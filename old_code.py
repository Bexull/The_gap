import asyncio
from datetime import datetime, timedelta, time
from uuid import uuid4
import pandas as pd
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, 
    KeyboardButton, ReplyKeyboardMarkup, InputMediaPhoto
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    CallbackContext, MessageHandler, filters
)
from telegram.ext import Application, JobQueue

from process.kidou_opt import SQL_requests
from telegram.error import BadRequest
import datetime as dt

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQL-–∫–ª–∏–µ–Ω—Ç–∞
SQL = SQL_requests()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–ª—É—á—à–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Redis –≤ –±—É–¥—É—â–µ–º)
active_tasks = {}
zav_on_shift = []
task_assignments = {}  # {task_num: –∫–æ–ª-–≤–æ —É–∂–µ –≤—ã–¥–∞–Ω–Ω—ã—Ö}
assignments = []

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SHIFT_MAP = {'–î–µ–Ω—å': 'day', '–ù–æ—á—å': 'night'}
ZS_GROUP_CHAT_ID = -1002694047317  # –ß–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π

TOPIC_IDS = {
    '–ë–∞–∫–∞–ª–µ—è': 9,
    '–ù–∞–ø–∏—Ç–∫–∏': 10,
    '–•–∏–º–∏—è': 2,
    '–°–û–§': 11,
    '–ú–æ–ª–æ—á–∫–∞': 12,
    '–ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è': 13,
    '–•–æ–ª–æ–¥–Ω–∞—è –∑–æ–Ω–∞': 14,
    '–°—É—Ö–∞—è –∑–æ–Ω–∞': 15,
    '–ó–∞–º–æ—Ä–æ–∑–∫–∞': 16
}


async def debug_chat_id(update: Update, context: CallbackContext):
    print(f"üÜî Chat ID: {update.effective_chat.id}")
    await update.message.reply_text(f"üÜî Chat ID —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã: `{update.effective_chat.id}`", parse_mode='Markdown')


# ======================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ======================

def get_current_slot(shift: str) -> int:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç –¥–ª—è —Å–º–µ–Ω—ã"""
    now = datetime.now().time()

    if shift == 'night':
        if time(20, 0) <= now or now < time(0, 0):
            return 5
        elif time(0, 0) <= now < time(3, 0):
            return 6
        elif time(3, 0) <= now < time(5, 0):
            return 7
        elif time(5, 0) <= now < time(8, 0):
            return 8
        else:
            return None
    else:
        if time(8, 0) <= now < time(10, 30):
            return 1
        elif time(10, 30) <= now < time(13, 30):
            return 2
        elif time(13, 30) <= now < time(16, 30):
            return 3
        elif time(16, 30) <= now < time(20, 0):
            return 4
        else:
            return None

    
#######–†–ê–ó–ë–ò–í–ö–ê —Å–µ–∫—Ç–æ—Ä–æ–≤
# async def debug_thread_id(update: Update, context: CallbackContext):
#     print(f"üßµ message_thread_id: {update.message.message_thread_id}")
#     await update.message.reply_text(
#         f"üßµ ID —ç—Ç–æ–π —Ç–µ–º—ã (—Ç–æ–ø–∏–∫–∞): {update.message.message_thread_id}"
#     )


async def schedule_tasks_from_rules(context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –∏–∑ shift_tasks —Å is_constant_task = false"""
    try:
        now = datetime.now()
        current_time = now.strftime('%H:%M')
        today = pd.to_datetime('today').date()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–µ–Ω—É
        shift_ru = '–î–µ–Ω—å' if 8 <= now.hour < 20 else '–ù–æ—á—å'
        shift_en = 'day' if 8 <= now.hour < 20 else 'night'

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è, –¥–∞—Ç—É –∏ —Å–º–µ–Ω—É
        schedule_df = SQL.sql_select('wms', f"""
            SELECT * FROM wms_bot.shift_tasks
            WHERE task_date = '{today}'
              AND shift = '{shift_ru}'
              AND is_constant_task = false
              AND status = '–í –æ–∂–∏–¥–∞–Ω–∏–∏'
        """)

        if schedule_df.empty:
            print("üì≠ –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
            return

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
        schedule_df['start_time_short'] = schedule_df['start_time'].apply(lambda x: x.strftime('%H:%M'))
        due_tasks = schedule_df[schedule_df['start_time_short'] == current_time]

        if due_tasks.empty:
            print("üì≠ –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è")
            return

        print(f"‚è∞ –°–µ–π—á–∞—Å {current_time}, –ø—Ä–æ–≤–µ—Ä—è—é –∑–∞–¥–∞–Ω–∏—è:\n{due_tasks[['start_time_short','task_name','id']]}")

        for _, task_row in due_tasks.iterrows():
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–µ–π —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –≤ shift_tasks
            duplicates_df = SQL.sql_select('wms', f"""
                SELECT COUNT(*) as task_count
                FROM wms_bot.shift_tasks
                WHERE task_date = '{today}'
                AND shift = '{shift_ru}'
                AND is_constant_task = false
                AND status = '–í –æ–∂–∏–¥–∞–Ω–∏–∏'
                AND start_time = '{task_row['start_time']}'
                AND task_name = '{task_row['task_name']}'
            """)

            task_count = int(duplicates_df.iloc[0]['task_count'])

            # –ü–æ–¥–±–∏—Ä–∞–µ–º –û–ü–í –Ω–∞ —Å–º–µ–Ω–µ
            opv_df = SQL.sql_select('wms', f"""
    SELECT DISTINCT ss.employee_id, bs.gender, concat(bs."name", ' ', bs.surname) AS fio, ba.userid
    FROM wms_bot.shift_sessions1 ss
    JOIN wms_bot.t_staff bs ON bs.id = ss.employee_id::int
    JOIN wms_bot.bot_auth ba ON ba.employee_id = ss.employee_id
    WHERE ss.end_time IS NULL
      AND ss.start_time::date = current_date
      AND ss.role = 'opv'
      AND ss.shift_type = '{shift_en}'
      AND ss.merchantid = 6001
      AND NOT EXISTS (
          SELECT 1
          FROM wms_bot.shift_tasks st
          WHERE st.user_id = ss.employee_id::int
            AND st.status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
            AND st.is_constant_task = false
            AND st.time_end IS null)
            """)

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª—É
            if task_row['gender'] in ['M', 'F']:
                opv_df = opv_df[opv_df['gender'].fillna('U').str.upper() == task_row['gender']]

            if opv_df.empty:
                print(f"üì≠ –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –û–ü–í –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_row['id']}")
                continue

            # –ë–µ—Ä—ë–º task_count –û–ü–í (–∏–ª–∏ –º–µ–Ω—å—à–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç)
            selected_opv = opv_df.head(task_count)

            # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∂–¥–æ–º—É –û–ü–í –∏–∑ —Å–ø–∏—Å–∫–∞
            for _, opv in selected_opv.iterrows():
                # –ó–∞–º–æ—Ä–æ–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –û–ü–í
                SQL.sql_delete('wms', f"""
                    UPDATE wms_bot.shift_tasks
                    SET status = '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ'
                    WHERE user_id = '{opv['employee_id']}'
                    AND status IN ('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è')
                    AND time_end IS NULL
                """)

                # –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–¥–Ω—É –∑–∞–¥–∞—á—É –∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                task_to_assign_df = SQL.sql_select('wms', f"""
                    SELECT id FROM wms_bot.shift_tasks
                    WHERE task_date = '{today}'
                    AND shift = '{shift_ru}'
                    AND is_constant_task = false
                    AND status = '–í –æ–∂–∏–¥–∞–Ω–∏–∏'
                    AND start_time = '{task_row['start_time']}'
                    AND task_name = '{task_row['task_name']}'
                    ORDER BY id LIMIT 1
                """)

                if task_to_assign_df.empty:
                    print(f"‚ùå –ù–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥—É–±–ª–µ–π –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_row['task_name']}")
                    break

                task_id = int(task_to_assign_df.iloc[0]['id'])

                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
                SQL.sql_delete('wms', f"""
                    UPDATE wms_bot.shift_tasks
                    SET status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
                        user_id = '{opv['employee_id']}',
                        time_begin = '{now}'
                    WHERE id = {task_id}
                """)

                duration = task_row['task_duration'].strftime('%H:%M')
                chat_id = opv['userid']
                if isinstance(chat_id, pd.Series):
                    chat_id = chat_id.values[0]

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await context.bot.send_message(
                    chat_id=int(chat_id),
                    text=(
                        f"üìå *–ù–∞ –í–∞—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ!*\n\n"
                        f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {task_row['task_name']}\n"
                        f"üì¶ *–ì—Ä—É–ø–ø–∞:* {task_row['product_group']}\n"
                        f"üìç *–°–ª–æ—Ç:* {task_row['slot']}\n"
                        f"‚è∞ *–í—Ä–µ–º—è:* {duration} –º–∏–Ω"
                    ),
                    parse_mode='Markdown'
                )

                print(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ {task_row['task_name']} ({task_id}) –¥–ª—è {opv['fio']}")


    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ schedule_tasks_from_rules: {e}")





async def send_task_to_zs(context: CallbackContext, task: dict, photos: list):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–µ–¥—É—é—â–µ–º—É"""
    try:
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{task['task_id']}|{context.user_data.get('staff_id')}"),
                InlineKeyboardButton("üîÅ –í–µ—Ä–Ω—É—Ç—å", callback_data=f"start_reject_{task['task_id']}|{context.user_data.get('staff_id')}")
            ]
        ])
        sector = context.user_data.get('sector', '').strip().capitalize()
        thread_id = TOPIC_IDS.get(sector)

        time_spent = datetime.now() - task['assigned_time']

        message = (
            f"üì¨ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç *{context.user_data.get('staff_name', '–û–ü–í')}* –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n"
            f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {task.get('task_name', '‚Äî')}\n"
            f"üì¶ *–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤:* {task.get('product_group', '‚Äî')}\n"
            f"üìç *–°–ª–æ—Ç:* {task.get('slot', '‚Äî')}\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(time_spent).split('.')[0]}\n"
            f"‚è≥ –í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {task['duration']} –º–∏–Ω"
        )

        if photos:
            media_group = []

            for i, photo in enumerate(photos):
                if i == 0:
                    media_group.append(InputMediaPhoto(media=photo, caption=message, parse_mode='Markdown'))
                else:
                    media_group.append(InputMediaPhoto(media=photo))

            messages = await context.bot.send_media_group(
                chat_id=ZS_GROUP_CHAT_ID,
                media=media_group,
                message_thread_id=thread_id
            )
            context.user_data['last_task_message_id'] = messages[0].message_id

            await context.bot.send_message(
                chat_id=ZS_GROUP_CHAT_ID,
                text="üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard,
                message_thread_id=thread_id
            )
        else:
            sent_msg = await context.bot.send_message(
                chat_id=ZS_GROUP_CHAT_ID,
                text=message,
                parse_mode='Markdown',
                reply_markup=keyboard,
                message_thread_id=thread_id
            )
            context.user_data['last_task_message_id'] = sent_msg.message_id

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ó–° –≥—Ä—É–ø–ø—É: {e}")
        raise

# ======================
# –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ======================

async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    try:
        auth_check = SQL.sql_select('wms', f"""
            SELECT phone, fio, employee_id
            FROM wms_bot.bot_auth
            WHERE userid = {user_id}
        """)
        
        if not auth_check.empty:
            record = auth_check.iloc[0]
            context.user_data.update({
                'phone': record['phone'],
                'staff_name': record['fio'],
                'staff_id': record['employee_id']
            })
            await update.message.reply_text(f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {record['fio']}!")
            await shift_start(update, context)
        else:
            button = KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±", request_contact=True)
            reply_markup = ReplyKeyboardMarkup([[button]], resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=reply_markup)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

async def handle_contact(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    contact = update.message.contact
    user_phone = contact.phone_number[-7:]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 —Ü–∏—Ñ—Ä
    
    try:
        staff_df = SQL.sql_select('wms', "select id,cell_phone, concat(bs.name, ' ', bs.surname) fio, gender from wms_bot.t_staff bs")
        match = staff_df[staff_df['cell_phone'].astype(str).str.endswith(user_phone)]

        if not match.empty:
            context.user_data.update({
                'phone': contact.phone_number,
                'staff_id': match.iloc[0]['id'],
                'staff_name': match.iloc[0]['fio']
            })

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            auth_data = pd.DataFrame([{
                'userid': update.effective_user.id,
                'phone': contact.phone_number,
                'fio': match.iloc[0]['fio'],
                'employee_id': match.iloc[0]['id']
            }])
            
            SQL.sql_execute_df('wms', auth_data, 'wms_bot.bot_auth(userid, phone, fio, employee_id)')
            await update.message.reply_text(f"‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫: {match.iloc[0]['fio']}")
            await shift_start(update, context)
        else:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞.")

async def shift_start(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã - –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–º–µ–Ω—ã"""
    keyboard = [
        [InlineKeyboardButton("–î–µ–Ω—å üåá", callback_data='day')],
        [InlineKeyboardButton("–ù–æ—á—å üåÉ", callback_data='night')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É:", reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É:", reply_markup=reply_markup)

async def shift_choice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–º–µ–Ω—ã"""
    query = update.callback_query
    await query.answer()
    shift = query.data.lower()
    
    keyboard = [
        [InlineKeyboardButton("–û–ü–í", callback_data=f'opv_{shift}')],
        [InlineKeyboardButton("–ó–°", callback_data=f'zs_{shift}')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–º–µ–Ω—É: {shift}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=reply_markup)


async def role_choice(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    role, shift = query.data.split('_')
    
    context.user_data.update({
        'role': role,
        'shift': shift
    })

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—Ç —Å–º–µ–Ω—ã –≤ –±–∞–∑—É
        session_row = pd.DataFrame([{
            'employee_id': context.user_data['staff_id'],
            'role': role,
            'shift_type': shift,
            'start_time': datetime.now(),
            'end_time': None,
            'load_date': pd.to_datetime('today').date(),
            'merchantid': 6001 
        }])
        SQL.sql_execute_df('wms', session_row, 'wms_bot.shift_sessions1')
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã: {e}")

    if role == 'opv':
        keyboard = [
            [InlineKeyboardButton("–û—Å–Ω–æ–≤–Ω–∞—è —Å–º–µ–Ω–∞", callback_data='employment_main')],
            [InlineKeyboardButton("–ü–∞—Ä—Ç—Ç–∞–π–º", callback_data='employment_part_time')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:", reply_markup=reply_markup)
    else:
        # –î–ª—è –ó–° —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        if update.effective_user.id not in zav_on_shift:
            zav_on_shift.append(update.effective_user.id)

        keyboard = [
            [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –û–ü–í –Ω–∞ —Å–º–µ–Ω–µ üìã", callback_data='opv_list_on_shift')],
            [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –û–ü–í –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö —Å–º–µ–Ω—É ‚úÖ", callback_data='opv_list_completed')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: {role.upper()} –Ω–∞ —Å–º–µ–Ω–µ: {shift}.",
            reply_markup=reply_markup
        )

async def employment_type_choice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()

    employment_type = query.data.replace('employment_', '')
    context.user_data['employment_type'] = employment_type

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –≤ shift_sessions1
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.wms_bot.shift_tasks
            SET part_time = '{employment_type}'
            WHERE user_id = '{context.user_data['staff_id']}' 
        """)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: {e}")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Å–µ–∫—Ç–æ—Ä–∞
    shift = context.user_data.get('shift')
    shift_ru = '–î–µ–Ω—å' if shift == 'day' else '–ù–æ—á—å'
    task_date = get_task_date(shift)

    sectors_df = SQL.sql_select('wms', f"""SELECT DISTINCT sector FROM wms_bot.shift_tasks WHERE task_date =  '{task_date}' AND shift = '{shift_ru}' and merchant_code='6001'""")
    sectors = sectors_df['sector'].dropna().tolist()

    if not sectors:
        await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–π —Å–º–µ–Ω—ã.")
        return

    keyboard = [[InlineKeyboardButton(sector, callback_data=f'sectorchoice_{sector}')] for sector in sectors]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ç–æ—Ä, —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —ç—Ç—É —Å–º–µ–Ω—É:", reply_markup=reply_markup)


async def sector_select_and_confirm(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ç–æ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    sector = query.data.replace('sectorchoice_', '')
    context.user_data.update({
        'sector': sector,
        'sector_selected': True
    })

    keyboard = [[InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data='get_task')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ–∫—Ç–æ—Ä: *{sector}*\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è.",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def get_task(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    employee_id = context.user_data.get('staff_id')
    if not employee_id:
        await query.edit_message_text("‚ö†Ô∏è –í–∞—à ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    active_df = SQL.sql_select('wms', f"""
        SELECT id, status
        FROM wms_bot.shift_tasks
        WHERE user_id = '{employee_id}'
          AND status IN ('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ','–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ')
    """)
    
    if not active_df.empty:
        await query.edit_message_text(
            "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –±—Ä–∞—Ç—å –Ω–æ–≤–æ–µ."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä —Å–µ–∫—Ç–æ—Ä–∞
    if not context.user_data.get('sector_selected'):
        sectors_df = SQL.sql_select('stock', """SELECT DISTINCT "–°–µ–∫—Ç–æ—Ä" FROM public.task_schedule WHERE "–î–∞—Ç–∞" = current_date""")
        sectors = sectors_df['–°–µ–∫—Ç–æ—Ä'].dropna().tolist()
        
        keyboard = [[InlineKeyboardButton(s, callback_data=f'sectorchoice_{s}')] for s in sectors]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ç–æ—Ä, —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å:", reply_markup=reply_markup)
        return

    # –ï—Å–ª–∏ —Å–µ–∫—Ç–æ—Ä –≤—ã–±—Ä–∞–Ω - –Ω–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    await assign_task_from_sector(update, context)

def get_task_date(shift: str) -> datetime.date:
    now = datetime.now()
    if shift == 'night':
        if now.hour >= 0 and now.hour < 8:  
            return now.date()               
        else:
            return (now + timedelta(days=1)).date()  
    else:
        return now.date()


async def assign_task_from_sector(update: Update, context: CallbackContext):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞"""
    query = update.callback_query
    await query.answer()

    employee_id = context.user_data.get('staff_id')
    sector = context.user_data.get('sector')
    shift = context.user_data.get('shift')

    if not all([employee_id, sector, shift]):
        await query.edit_message_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.")
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—ètF
        active_df = SQL.sql_select('wms', f"""
            SELECT id FROM wms_bot.shift_tasks
            WHERE user_id = '{employee_id}'
              AND status IN ('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è','–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ','–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ')
        """)

        if not active_df.empty:
            await query.edit_message_text("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª
        gender_df = SQL.sql_select('wms', f"SELECT gender FROM wms_bot.t_staff WHERE id = '{employee_id}'")
        opv_gender = gender_df.iloc[0]['gender'].strip().upper() if not gender_df.empty else 'U'

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º shift –≤ –Ω—É–∂–Ω—ã–π –≤–∏–¥
        shift_ru = '–î–µ–Ω—å' if shift == 'day' else '–ù–æ—á—å'

        task_date = get_task_date(shift)
        current_slot = get_current_slot(shift)
        if current_slot is None:
            await query.edit_message_text("‚è∞ –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—Ç–∞.")
            return

        # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ shift_tasks
        task_df = SQL.sql_select('wms', f"""
            SELECT * FROM wms_bot.shift_tasks
            WHERE task_date = '{task_date}'
              AND shift = '{shift_ru}'
              AND sector = '{sector}'
              AND slot = {current_slot}
              AND is_constant_task = true
              and merchant_code ='6001'
              AND (status IS NULL OR status = '–í –æ–∂–∏–¥–∞–Ω–∏–∏')
        """)

        if task_df.empty:
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–ª—É
        task_df = task_df[
            (task_df['gender'].isnull()) |
            (task_df['gender'].str.upper() == 'U') |
            (task_df['gender'].str.upper() == opv_gender)
        ]

        if task_df.empty:
            await query.edit_message_text("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ –ø–æ–ª—É –∑–∞–¥–∞–Ω–∏–π.")
            return

        # –ë–µ—Ä—ë–º –∑–∞–¥–∞–Ω–∏–µ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        task_row = task_df.sort_values('priority').iloc[0]
        now = datetime.now()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
        employment_type = context.user_data.get('employment_type', 'main')
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_tasks
            SET status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
                user_id = '{employee_id}',
                time_begin = '{now}',
                part_time = '{employment_type}'
            WHERE id = {task_row['id']}
        """)

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        try:
            duration_raw = task_row['task_duration']

            if isinstance(duration_raw, dt.time):
                total_seconds = duration_raw.hour * 3600 + duration_raw.minute * 60 + duration_raw.second
            else:
                time_str = str(duration_raw).strip()
                t = datetime.strptime(time_str, '%H:%M:%S')
                total_seconds = t.hour * 3600 + t.minute * 60 + t.second

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ task_duration: {e}")
            total_seconds = 900  # –¥–µ—Ñ–æ–ª—Ç 15 –º–∏–Ω –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        task = {
            'task_id': task_row['id'],
            'task_name': task_row['task_name'],
            'product_group': task_row['product_group'],
            'slot': task_row['slot'],
            'duration': task_row['task_duration'],
            'assigned_time': now
        }
        context.user_data['task'] = task
        context.user_data.pop('photos', None)
        context.user_data.pop('photo_request_time', None)
        context.user_data['late_warning_sent'] = False

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º
        message = (
            f"üìÑ *–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:* {task_row['id']}\n"
            f"‚úÖ *–ó–∞–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!*\n\n"
            f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {task_row['task_name']}\n"
            f"üì¶ *–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤:* {task_row.get('product_group', '‚Äî')}\n"
            f"üìç *–°–ª–æ—Ç:* {task_row['slot']}\n"
            f"‚è± *–í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:* {str(timedelta(seconds=total_seconds))}\n"
            f"‚è≥ *–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:* {str(timedelta(seconds=total_seconds))}"
        )

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        comment = task_row.get('comment')
        if comment and str(comment).strip():
            message += f"\nüí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment}"

        sent_msg = await query.edit_message_text(message, parse_mode='Markdown')

        # üí•üí•üí• –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä!
        asyncio.create_task(
            update_timer(context, sent_msg.chat_id, sent_msg.message_id, task, total_seconds)
        )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ assign_task_from_sector: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.")



async def update_timer(context, chat_id, message_id, task, total_seconds, comment=None):
    for remaining in range(total_seconds, -1, -15):
        try:
            minutes = remaining // 60
            seconds = remaining % 60
            remaining_str = f"{minutes:02d}:{seconds:02d}"

            message = (
                f"üìÑ *–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:* {task['task_id']}\n"
                f"‚úÖ *–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è*\n\n"
                f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {task['task_name']}\n"
                f"üì¶ *–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤:* {task.get('product_group', '‚Äî')}\n"
                f"üìç *–°–ª–æ—Ç:* {task.get('slot', '‚Äî')}\n"
                f"‚è± *–í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:* {task['duration']}\n"
                f"‚è≥ *–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:* {remaining_str}"
            )

            if comment and str(comment).strip():
                message += f"\nüí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment}"

            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=message,
                parse_mode='Markdown'
            )

            await asyncio.sleep(15)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞: {e}")
            break




async def complete_the_task(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    staff_id = context.user_data.get('staff_id')
    task = context.user_data.get('task')

    if not task:
        staff_id = context.user_data.get('staff_id')
        if not staff_id:
            await update.message.reply_text("‚ö†Ô∏è –í–∞—à ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã
        task_df = SQL.sql_select('wms', f"""
            SELECT id, task_name, product_group, slot, time_begin, task_duration, comment
            FROM wms_bot.shift_tasks
            WHERE user_id = '{staff_id}' AND status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
            AND time_end IS NULL
            ORDER BY time_begin DESC LIMIT 1
        """)

        if task_df.empty:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
            return


        row = task_df.iloc[0]
        time_begin_value = row['time_begin']

        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø–∞—Ä—Å–∏–º –≤ time
        if isinstance(time_begin_value, str):
            time_begin_value = datetime.strptime(time_begin_value, '%H:%M:%S').time()

        # –ï—Å–ª–∏ —ç—Ç–æ time ‚Äî –∫–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π
        if isinstance(time_begin_value, dt.time):
            assigned_time = datetime.combine(datetime.today(), time_begin_value)
        else:
            assigned_time = pd.to_datetime(time_begin_value)

        now = datetime.now()

        task = {
            'task_id': row['id'],
            'task_name': row['task_name'],
            'product_group': row['product_group'],
            'slot': row['slot'],
            'assigned_time': assigned_time,
            'duration': row['task_duration'],
            'assigned_time': now
        }
        context.user_data['task'] = task

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ
    if 'photos' not in context.user_data:
        context.user_data.update({'photo_request_time': datetime.now(), 'photos': []})
        await update.message.reply_text("üì∏ –°–¥–µ–ª–∞–π—Ç–µ –Ω–µ –±–æ–ª–µ–µ 3 —Ñ–æ—Ç–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É.")
        return

    if not context.user_data['photos']:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.")
        return

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    now = datetime.now()
    time_spent = now - task['assigned_time']

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_tasks
            SET status = '–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏',
                time_end = '{now}'
            WHERE id = {task['task_id']}
        """)

        await update.message.reply_text("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–µ–¥—É—é—â–µ–º—É.")
        await send_task_to_zs(context, task, context.user_data['photos'])

        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop('task', None)
        context.user_data.pop('photos', None)
        context.user_data.pop('photo_request_time', None)
        context.user_data['late_warning_sent'] = False


    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def receive_photo(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è"""
    staff_id = context.user_data.get('staff_id')
    now = datetime.now()

    if 'photo_request_time' not in context.user_data:
        await update.message.reply_text("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    time_passed = now - context.user_data['photo_request_time']
    is_late = time_passed > timedelta(minutes=180)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if 'photos' not in context.user_data:
        context.user_data['photos'] = []

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
    if 'late_warning_sent' not in context.user_data:
        context.user_data['late_warning_sent'] = False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ
    if len(context.user_data['photos']) >= 5:
        await update.message.reply_text("‚ö†Ô∏è –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 —Ñ–æ—Ç–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ç–æ
    if not update.message.photo:
        await update.message.reply_text("‚ùå –§–æ—Ç–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo_id = update.message.photo[-1].file_id
    context.user_data['photos'].append(photo_id)

    photo_num = len(context.user_data['photos'])
    await update.message.reply_text(f"üì∏ –§–æ—Ç–æ {photo_num}/3 –ø–æ–ª—É—á–µ–Ω–æ.")

    # ‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    if is_late and not context.user_data['late_warning_sent']:
        context.user_data['late_warning_sent'] = True
        await update.message.reply_text(
            "‚ö†Ô∏è –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é. –ó–° –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ."
        )




async def handle_review(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ó–° (–Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞)"""
    query = update.callback_query
    await query.answer()

    action, data = query.data.split('_')
    task_id, opv_id = data.split('|')

    now = datetime.now()

    if action == 'approve':
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞
        inspector_df = SQL.sql_select('wms', f"""
            SELECT fio FROM wms_bot.bot_auth WHERE userid = {update.effective_user.id}
        """)
        inspector_name = inspector_df.iloc[0]['fio'] if not inspector_df.empty else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ –≤ shift_tasks_test
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_tasks
            SET status = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ',
                time_end = '{now}',
                inspector_id = {update.effective_user.id}
            WHERE id = {task_id}
        """)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
        first_message_id = context.user_data.get('last_task_message_id')
        if first_message_id:
            try:
                await context.bot.edit_message_caption(
                    chat_id=ZS_GROUP_CHAT_ID,
                    message_id=first_message_id,
                    caption=f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task_id} –æ–¥–æ–±—Ä–µ–Ω–æ."
                )
            except:
                pass

        await query.edit_message_text(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task_id} –æ–¥–æ–±—Ä–µ–Ω–æ.")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –û–ü–í
        opv_userid_df = SQL.sql_select('wms', f"""
            SELECT userid FROM wms_bot.bot_auth WHERE employee_id = '{opv_id}'
        """)
        if not opv_userid_df.empty:
            opv_user_id = int(opv_userid_df.iloc[0]['userid'])
            await context.bot.send_message(
                chat_id=opv_user_id,
                text=f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task_id} *–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ* –∑–∞–≤–µ–¥—É—é—â–∏–º. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!",
                parse_mode='Markdown'
            )

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data='get_task')]
            ])
            await context.bot.send_message(
                chat_id=opv_user_id,
                text="–•–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ? üëá",
                reply_markup=keyboard
            )

    elif action == 'reject':
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_tasks
            SET status = '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ'
            WHERE id = {task_id}
        """)

        try:
            await query.message.edit_caption(f"üîÅ –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task_id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.")
        except:
            await query.edit_message_text(f"üîÅ –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task_id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –û–ü–í
        opv_userid_df = SQL.sql_select('wms', f"""
            SELECT userid FROM wms_bot.bot_auth WHERE employee_id = '{opv_id}'
        """)
        if opv_userid_df.empty:
            return

        opv_user_id = int(opv_userid_df.iloc[0]['userid'])

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        task_df = SQL.sql_select('wms', f"""
            SELECT id, task_name, slot, status, time_begin, task_duration, product_group
            FROM wms_bot.shift_tasks
            WHERE id = {task_id}
        """)
        if task_df.empty:
            return

        row = task_df.iloc[0]
        assigned_time = pd.to_datetime(row['time_begin'])
        total_duration = (
            row['task_duration'].hour * 3600 + row['task_duration'].minute * 60 + row['task_duration'].second
            if isinstance(row['task_duration'], dt.time)
            else 900
        )
        deadline = assigned_time + timedelta(seconds=total_duration)
        now = datetime.now()
        remaining_seconds = max(0, int((deadline - now).total_seconds()))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{row['id']} –≤–µ—Ä–Ω—É–ª–∏ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.\n\n"
            f"üìã *–ó–∞–¥–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ:*\n"
            f"üìç *–°–ª–æ—Ç:* {row['slot']}\n"
            f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {row['task_name']}\n"
            f"üì¶ *–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤:* {row.get('product_group', '‚Äî')}\n"
            f"‚è± *–í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:* {str(timedelta(seconds=total_duration))}\n"
            f"‚è≥ *–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:* {str(timedelta(seconds=remaining_seconds))}"
        )

        await context.bot.send_message(
            chat_id=opv_user_id,
            text=message,
            parse_mode='Markdown'
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –û–ü–í
        context.application.user_data[opv_user_id]['task'] = {
            'task_id': row['id'],
            'task_name': row['task_name'],
            'slot': row['slot'],
            'assigned_time': assigned_time,
            '–¥–µ–¥–ª–∞–π–Ω': total_duration,
            'status': '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ'
        }

        context.application.user_data[opv_user_id].pop('photo', None)
        context.user_data.pop('last_task_message_id', None)



async def complete_the_extra_task(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (priority = 111)"""
    staff_id = context.user_data.get('staff_id')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–æ–ø. –∑–∞–¥–∞–Ω–∏–µ
    extra_task_df = SQL.sql_select('wms', f"""
        SELECT id, task_name, time_begin
        FROM wms_bot.shift_tasks
        WHERE user_id = '{staff_id}'
          AND status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
          AND time_end IS NULL
          AND priority = '111'
        ORDER BY time_begin DESC LIMIT 1
    """)

    if extra_task_df.empty:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return

    task = extra_task_df.iloc[0]
    now = datetime.now()

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    SQL.sql_delete('wms', f"""
        UPDATE wms_bot.shift_tasks
        SET status = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ',
            time_end = '{now}'
        WHERE id = {task['id']}
    """)

    await update.message.reply_text(
        f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{task['id']} ({task['task_name']}) –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    )



async def start_reject_reason(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞–¥–∞–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()

    task_num, opv_id = query.data.replace("start_reject_", "").split("|")
    context.user_data.update({
        'reject_task_id': task_num,
        'reject_opv_id': opv_id
    })

    try:
        await query.edit_message_text("‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞–¥–∞–Ω–∏—è:")
    except telegram.error.BadRequest:
        try:
            await query.edit_message_caption("‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞–¥–∞–Ω–∏—è:")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ caption: {e}")

async def receive_reject_reason(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞–¥–∞–Ω–∏—è (shift_tasks_test)"""
    reason = update.message.text
    task_id = context.user_data.get('reject_task_id')

    if not task_id:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    SQL.sql_delete('wms', f"""
        UPDATE wms_bot.shift_tasks
        SET status = '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ'
        WHERE id = {task_id}
    """)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    task_df = SQL.sql_select('wms', f"""
        SELECT user_id, task_name, slot, time_begin, task_duration, product_group
        FROM wms_bot.shift_tasks
        WHERE id = {task_id}
    """)
    if task_df.empty:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")
        return

    row = task_df.iloc[0]
    opv_employee_id = row['user_id']

    if not opv_employee_id:
        await update.message.reply_text("‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É.")
        return

    # –ü–æ–ª—É—á–∞–µ–º userid –û–ü–í
    opv_userid_df = SQL.sql_select('wms', f"""
        SELECT userid FROM wms_bot.bot_auth WHERE employee_id = '{opv_employee_id}'
    """)
    if opv_userid_df.empty:
        await update.message.reply_text("‚ö†Ô∏è –£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω Telegram ID.")
        return

    opv_user_id = int(opv_userid_df.iloc[0]['userid'])

    if isinstance(row['time_begin'], dt.time):
        assigned_time = datetime.combine(datetime.today(), row['time_begin'])
    else:
        assigned_time = pd.to_datetime(row['time_begin'])

    total_duration = (
        row['task_duration'].hour * 3600 + row['task_duration'].minute * 60 + row['task_duration'].second
        if isinstance(row['task_duration'], dt.time)
        else 900
    )
    deadline = assigned_time + timedelta(seconds=total_duration)
    now = datetime.now()
    remaining_seconds = max(0, int((deadline - now).total_seconds()))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task_id} –≤–µ—Ä–Ω—É–ª–∏ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
        f"üìã *–ó–∞–¥–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ:*\n"
        f"üìç *–°–ª–æ—Ç:* {row['slot']}\n"
        f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {row['task_name']}\n"
        f"üì¶ *–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤:* {row.get('product_group', '‚Äî')}\n"
        f"‚è± *–í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:* {str(timedelta(seconds=total_duration))}\n"
        f"‚è≥ *–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:* {str(timedelta(seconds=remaining_seconds))}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–ü–í
    await context.bot.send_message(
        chat_id=opv_user_id,
        text=message,
        parse_mode='Markdown'
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –û–ü–í
    context.application.user_data[opv_user_id]['task'] = {
        'task_id': task_id,
        'task_name': row['task_name'],
        'slot': row['slot'],
        'assigned_time': assigned_time,
        '–¥–µ–¥–ª–∞–π–Ω': total_duration,
        'status': '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ',
        'duration': int(total_duration // 60)
    }

    # –û—á–∏—â–∞–µ–º —Ñ–æ—Ç–æ
    context.application.user_data[opv_user_id].pop('photo', None)
    await update.message.reply_text("üì§ –ó–∞–¥–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ —Ä–∞–±–æ—Ç—É. –û–ü–í —É–≤–µ–¥–æ–º–ª—ë–Ω.")



async def show_opv_list(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å–ø–∏—Å–∫–∞ –û–ü–í"""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–ø–∏—Å–æ–∫ –û–ü–í - —Å–≤–æ–±–æ–¥–Ω—ã–µ", callback_data='opv_free')],
        [InlineKeyboardButton("‚è≥ –°–ø–∏—Å–æ–∫ –û–ü–í - –∑–∞–Ω—è—Ç—ã–µ", callback_data='opv_busy')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –û–ü–í:", reply_markup=reply_markup)

async def show_opv_free(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –û–ü–í"""
    query = update.callback_query
    await query.answer()

    df = SQL.sql_select('wms', """
SELECT DISTINCT sh.employee_id, sh.role, sh.shift_type, concat(bs."name", ' ', bs.surname) user_name
        FROM wms_bot.shift_sessions1 sh
        LEFT JOIN (
            SELECT user_id, MAX(time_end) AS task_end
            FROM wms_bot.shift_tasks where task_date =current_date
            GROUP BY user_id
        ) t ON t.user_id = sh.employee_id::int
        left join wms_bot.t_staff bs ON bs.id = sh.employee_id::int
        WHERE sh.end_time IS NULL  
          AND t.task_end IS NOT NULL   and sh.role ='opv'
        ORDER BY user_name
    """)

    if df.empty:
        await query.edit_message_text("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –û–ü–í –Ω–∞ —Å–º–µ–Ω–µ.")
        return

    keyboard = [
        [InlineKeyboardButton(row['user_name'], callback_data=f"opv_{row['employee_id']}")]
        for _, row in df.iterrows()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("‚úÖ –°–≤–æ–±–æ–¥–Ω—ã–µ –û–ü–í (–∑–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ):", reply_markup=reply_markup)

async def show_opv_busy(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –û–ü–í"""
    query = update.callback_query
    await query.answer()

    df = SQL.sql_select('wms', """
        SELECT DISTINCT 
            sh.employee_id, 
            sh.role, 
            sh.shift_type, 
            concat(bs."name", ' ', bs.surname) user_name
        FROM wms_bot.shift_sessions1 sh
        LEFT JOIN (
            SELECT 
                user_id, 
                status
            FROM wms_bot.shift_tasks
            GROUP BY user_id,status
        ) t ON t.user_id = sh.employee_id ::int
        left jOIN wms_bot.t_staff bs ON bs.id = sh.employee_id::int
        WHERE sh.end_time IS NULL  
          AND t.status in('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è','–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ','–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ')
          AND sh.role NOT IN ('zs')      
        ORDER BY user_name;
    """)

    if df.empty:
        await query.edit_message_text("–ù–µ—Ç –∑–∞–Ω—è—Ç—ã—Ö –û–ü–í –Ω–∞ —Å–º–µ–Ω–µ.")
        return

    keyboard = []
    for _, row in df.iterrows():
        user_name = str(row.get('user_name', '')).strip()
        if user_name:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–º–µ–Ω–∞
            keyboard.append([
                InlineKeyboardButton(text=user_name, callback_data=f"opv_{row['employee_id']}")
            ])

    if not keyboard:
        await query.edit_message_text("‚è≥ –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("‚è≥ –ó–∞–Ω—è—Ç—ã–µ –û–ü–í (–∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è):", reply_markup=reply_markup)

async def show_opv_completed_list(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –û–ü–í, –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö —Å–º–µ–Ω—É"""
    query = update.callback_query
    await query.answer()
    shift = context.user_data.get('shift')

    try:
        completed_df = SQL.sql_select('wms', f"""
            SELECT DISTINCT st.user_id,concat(bs."name", ' ', bs.surname)
            FROM wms_bot.shift_tasks st
            left join wms_bot.shift_sessions1 ss on ss.employee_id::int =st.user_id 
            left join wms_bot.t_staff bs on bs.id=st.user_id 
            WHERE shift = '{shift}' AND st.status = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ' and ss.end_time is not null and ss.end_time ::date=current_date 
        """)

        if completed_df.empty:
            await query.edit_message_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª —Å–º–µ–Ω—É.")
            return

        keyboard = [
            [InlineKeyboardButton(f"{row['user_name']}", callback_data=f"completed_{row['employee_id']}")]
            for _, row in completed_df.iterrows()
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚úÖ –û–ü–í, –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–µ —Å–º–µ–Ω—É:", reply_markup=reply_markup)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö –û–ü–í: {e}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

async def show_opv_summary(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –û–ü–í"""
    query = update.callback_query
    await query.answer()
    employee_id = query.data.replace('completed_', '')

    try:
        summary_df = SQL.sql_select('stock', f"""
            SELECT user_id, COUNT(DISTINCT id) AS task_count
            FROM wms_bot.shift_tasks
            WHERE user_id = '{employee_id}' AND status = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ'
            GROUP BY user_id
        """)

        if summary_df.empty:
            await query.edit_message_text("–ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π —É —ç—Ç–æ–≥–æ –û–ü–í.")
            return

        row = summary_df.iloc[0]
        message = (
            f"üìä *–î–∞–Ω–Ω—ã–µ –ø–æ —Å–º–µ–Ω–µ:*\n"
            f"üë§ *–§–ò–û:* {row['user_name']}\n"
            f"‚úÖ *–ö–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:* {row['task_count']}"
        )
        await query.edit_message_text(message, parse_mode='Markdown')

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –û–ü–í: {e}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

async def shift_end(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã"""
    staff_id = context.user_data.get('staff_id')
    role = context.user_data.get('role')

    if not staff_id or not role:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å–º–µ–Ω—É –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Å–º–µ–Ω—ã
    active_tasks_df = SQL.sql_select('wms', f"""
        SELECT id FROM wms_bot.shift_tasks
        WHERE user_id = '{staff_id}'
          AND status IN ('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ', '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ')
    """)

    if not active_tasks_df.empty:
        await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Å–º–µ–Ω—ã.")
        return

    now = datetime.now()

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–µ—Ü —Å–º–µ–Ω—ã
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_sessions1
            SET end_time = '{now}' 
            WHERE employee_id = '{staff_id}' AND end_time IS NULL
        """)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã
        session_df = SQL.sql_select('wms', f"""
            SELECT start_time
            FROM wms_bot.shift_sessions1
            WHERE employee_id = '{staff_id}'
              AND end_time = '{now}'
            ORDER BY start_time DESC LIMIT 1
        """)

        if session_df.empty:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É.")
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        start_time = pd.to_datetime(session_df.iloc[0]['start_time'])
        duration = now - start_time
        duration_hours = round(duration.total_seconds() / 3600, 2)

        await update.message.reply_text(
            f"üïí –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"‚åõ –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: *{duration_hours} —á*",
            parse_mode='Markdown'
        )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")



from telegram.ext import ContextTypes

async def auto_close_expired_tasks(context: ContextTypes.DEFAULT_TYPE):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' –∏–ª–∏ '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ'"""
    try:
        now = datetime.now()
        now_str = now.strftime('%Y-%m-%d %H:%M:%S')

        expired_df = SQL.sql_select('wms', f"""
            SELECT id, user_id, task_name, time_begin, status
            FROM wms_bot.shift_tasks
            WHERE status IN ('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ','–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏') 
              AND task_date IN (current_date, current_date - 1)
        """)

        if expired_df.empty:
            print("‚úÖ –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —Å–µ–π—á–∞—Å")
            return

        print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {len(expired_df)}")

        for _, row in expired_df.iterrows():
            SQL.sql_delete('wms', f"""
                UPDATE wms_bot.shift_tasks
                SET status = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ',
                    time_end = '{now_str}',
                    inspector_id = 0
                WHERE id = '{row['id']}'
            """)
            print(f"‚úîÔ∏è –ó–∞–∫—Ä—ã—Ç–æ –∑–∞–¥–∞–Ω–∏–µ ID={row['id']} —É user_id={row['user_id']} ({row['task_name']})")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ auto_close_expired_tasks: {e}")




async def exit_session(update: Update, context: CallbackContext):
    """–í—ã—Ö–æ–¥ –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
    role = context.user_data.get('role')

    if role == 'opv':
        keyboard = [[InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data='get_task')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é. –ì–æ—Ç–æ–≤—ã –≤–∑—è—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ? üëá", reply_markup=reply_markup)
    elif role == 'zs':
        keyboard = [
            [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –û–ü–í –Ω–∞ —Å–º–µ–Ω–µ üìã", callback_data='opv_list_on_shift')],
            [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –û–ü–í –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö —Å–º–µ–Ω—É ‚úÖ", callback_data='opv_list_completed')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?", reply_markup=reply_markup)
    else:
        await update.message.reply_text("–í—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")

async def log_group_id(update: Update, context: CallbackContext):
    """–õ–æ–≥–∏—Ä—É–µ—Ç ID —á–∞—Ç–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    chat_id = update.effective_chat.id
    sender = update.effective_user.full_name
    print(f"üë§ {sender} –Ω–∞–ø–∏—Å–∞–ª –≤ —á–∞—Ç ID: {chat_id}")
    await update.message.reply_text(f"Chat ID: {chat_id}")


async def register_topic(update: Update, context: CallbackContext):#######–ù–ê –£–î–ê–õ–ï–ù–ò–ï
    topic_name = " ".join(context.args) if context.args else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    thread_id = update.message.message_thread_id

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"üîç –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é —Ç–µ–º—É: {topic_name}",
        message_thread_id=thread_id
    )

    await update.message.reply_text(
        f"‚úÖ –¢–µ–º–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: *{topic_name}*\nüßµ message_thread_id: `{thread_id}`",
        parse_mode='Markdown'
    )


# ======================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ======================

def main():
    TOKEN = '8119695965:AAEQpNuryd5Re-CuW4o2RP9L1nZUG8dEtag'
    
    #application = Application.builder().token(TOKEN).build()
    application = Application.builder().token(TOKEN).build()

 

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('shift_start', shift_start))
    application.add_handler(CommandHandler('shift_end', shift_end))
    application.add_handler(CommandHandler('exit', exit_session))
    application.add_handler(CommandHandler('complete_the_task', complete_the_task))
    application.add_handler(CommandHandler('complete_the_extra_task', complete_the_extra_task))
    application.add_handler(CommandHandler('force_close_tasks', auto_close_expired_tasks))
    # application.add_handler(CommandHandler('register_topic', register_topic))#######–†–ê–ó–ë–ò–í–ö–ê




    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    # application.add_handler(MessageHandler(filters.TEXT, log_group_id))
    application.add_handler(MessageHandler(filters.CONTACT, handle_contact))
    application.add_handler(MessageHandler(filters.PHOTO, receive_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, receive_reject_reason))
    # application.add_handler(MessageHandler(filters.TEXT, debug_thread_id))#######–†–ê–ó–ë–ò–í–ö–ê
    

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(shift_choice, pattern='^(day|night)$'))
    application.add_handler(CallbackQueryHandler(role_choice, pattern='^(opv|zs)_(day|night)$'))
    application.add_handler(CallbackQueryHandler(sector_select_and_confirm, pattern='^sectorchoice_'))
    application.add_handler(CallbackQueryHandler(employment_type_choice, pattern='^employment_'))
    application.add_handler(CallbackQueryHandler(employment_type_choice, pattern='^employment_'))
    application.add_handler(CallbackQueryHandler(get_task, pattern='^get_task$'))
    application.add_handler(CallbackQueryHandler(show_opv_list, pattern='^opv_list_on_shift$'))
    application.add_handler(CallbackQueryHandler(show_opv_completed_list, pattern='^opv_list_completed$'))
    application.add_handler(CallbackQueryHandler(show_opv_summary, pattern='^completed_'))
    application.add_handler(CallbackQueryHandler(show_opv_free, pattern='^opv_free$'))
    application.add_handler(CallbackQueryHandler(show_opv_busy, pattern='^opv_busy$'))
    application.add_handler(CallbackQueryHandler(handle_review, pattern='^(approve|reject)_'))
    # application.add_handler(CallbackQueryHandler(confirm_task_from_zs, pattern='^confirm_'))
    application.add_handler(CallbackQueryHandler(start_reject_reason, pattern='^start_reject_'))
    
    application.job_queue.run_repeating(schedule_tasks_from_rules, interval=60, first=10)
    print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    # –í–µ—á–µ—Ä–æ–º –≤ 9:00
    application.job_queue.run_daily(auto_close_expired_tasks, time(hour=4, minute=0))

    # –£—Ç—Ä–æ–º –≤ 21:00
    application.job_queue.run_daily(auto_close_expired_tasks, time(hour=16, minute=0))

    application.run_polling()

if __name__ == '__main__':
    main()