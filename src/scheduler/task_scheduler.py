import pandas as pd
from datetime import datetime, timedelta, time
from ..database.sql_client import SQL
from ..config.settings import ZS_GROUP_CHAT_ID, MERCHANT_ID

async def schedule_tasks_from_rules(context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –∏–∑ shift_tasks —Å is_constant_task = false"""
    try:
        now = datetime.now()
        current_time = now.strftime('%H:%M')
        today = pd.to_datetime('today').date()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–µ–Ω—É
        shift_ru = '–î–µ–Ω—å' if 8 <= now.hour < 20 else '–ù–æ—á—å'
        shift_en = 'day' if 8 <= now.hour < 20 else 'night'

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è, –¥–∞—Ç—É –∏ —Å–º–µ–Ω—É
        schedule_df = SQL.sql_select('wms', f"""
            SELECT * FROM wms_bot.shift_tasks
            WHERE task_date = '{today}'
              AND shift = '{shift_ru}'
              AND is_constant_task = false
              AND status = '–í –æ–∂–∏–¥–∞–Ω–∏–∏'
              AND merchant_code = '{MERCHANT_ID}'
        """)

        if schedule_df.empty:
            print("üì≠ –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
            return

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
        schedule_df['start_time_short'] = schedule_df['start_time'].apply(
        lambda x: x.strftime('%H:%M') if pd.notnull(x) else None
        )

        due_tasks = schedule_df[schedule_df['start_time_short'] == current_time]

        if due_tasks.empty:
            print("üì≠ –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è")
            return

        print(f"‚è∞ –°–µ–π—á–∞—Å {current_time}, –ø—Ä–æ–≤–µ—Ä—è—é –∑–∞–¥–∞–Ω–∏—è:\n{due_tasks[['start_time_short','task_name','id']]}")

        for _, task_row in due_tasks.iterrows():
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–µ–π —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –≤ shift_tasks
            duplicates_df = SQL.sql_select('wms', f"""
                SELECT COUNT(*) as task_count
                FROM wms_bot.shift_tasks
                WHERE task_date = '{today}'
                AND shift = '{shift_ru}'
                AND is_constant_task = false
                AND status = '–í –æ–∂–∏–¥–∞–Ω–∏–∏'
                AND start_time = '{task_row['start_time']}'
                AND task_name = '{task_row['task_name']}'
                AND merchant_code = '{MERCHANT_ID}'
            """)

            task_count = int(duplicates_df.iloc[0]['task_count'])

            # –ü–æ–¥–±–∏—Ä–∞–µ–º –û–ü–í –Ω–∞ —Å–º–µ–Ω–µ
            opv_df = SQL.sql_select('wms', f"""
    SELECT DISTINCT ss.employee_id, bs.gender, concat(bs."name", ' ', bs.surname) AS fio, ba.userid
    FROM wms_bot.shift_sessions1 ss
    JOIN wms_bot.t_staff bs ON bs.id = ss.employee_id::int
    JOIN wms_bot.bot_auth ba ON ba.employee_id = ss.employee_id
    WHERE ss.end_time IS NULL
      AND ss.start_time::date = current_date
      AND ss.role = 'opv'
      AND ss.shift_type = '{shift_en}'
      AND ss.merchantid = {MERCHANT_ID}
      AND NOT EXISTS (
          SELECT 1
          FROM wms_bot.shift_tasks st
          WHERE st.user_id = ss.employee_id::int
            AND st.status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
            AND st.is_constant_task = false
            AND st.time_end IS null
            AND st.merchant_code = '{MERCHANT_ID}')
            """)

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª—É
            if task_row['gender'] in ['M', 'F']:
                opv_df = opv_df[opv_df['gender'].fillna('U').str.upper() == task_row['gender']]

            if opv_df.empty:
                print(f"üì≠ –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –û–ü–í –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_row['id']}")
                continue

            # –ë–µ—Ä—ë–º task_count –û–ü–í (–∏–ª–∏ –º–µ–Ω—å—à–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç)
            selected_opv = opv_df.head(task_count)

            # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∂–¥–æ–º—É –û–ü–í –∏–∑ —Å–ø–∏—Å–∫–∞
            for _, opv in selected_opv.iterrows():
                # –ó–∞–º–æ—Ä–æ–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –û–ü–í
                SQL.sql_delete('wms', f"""
                    UPDATE wms_bot.shift_tasks
                    SET status = '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ'
                    WHERE user_id = '{opv['employee_id']}'
                    AND status IN ('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è')
                    AND time_end IS NULL
                """)

                # –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–¥–Ω—É –∑–∞–¥–∞—á—É –∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                task_to_assign_df = SQL.sql_select('wms', f"""
                    SELECT id FROM wms_bot.shift_tasks
                    WHERE task_date = '{today}'
                    AND shift = '{shift_ru}'
                    AND is_constant_task = false
                    AND status = '–í –æ–∂–∏–¥–∞–Ω–∏–∏'
                    AND start_time = '{task_row['start_time']}'
                    AND task_name = '{task_row['task_name']}'
                    AND merchant_code = '{MERCHANT_ID}'
                    ORDER BY id LIMIT 1
                """)

                if task_to_assign_df.empty:
                    print(f"‚ùå –ù–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥—É–±–ª–µ–π –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_row['task_name']}")
                    break

                task_id = int(task_to_assign_df.iloc[0]['id'])

                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
                SQL.sql_delete('wms', f"""
                    UPDATE wms_bot.shift_tasks
                    SET status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
                        user_id = '{opv['employee_id']}',
                        time_begin = '{now}'
                    WHERE id = {task_id}
                """)

                if task_row['task_duration'] is not None:
                    duration = task_row['task_duration'].strftime('%H:%M')
                else:
                    duration = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                chat_id = opv['userid']
                if isinstance(chat_id, pd.Series):
                    chat_id = chat_id.values[0]

                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                from ..keyboards.opv_keyboards import get_special_task_keyboard
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                await context.bot.send_message(
                    chat_id=int(chat_id),
                    text=(
                        f"üìå *–ù–∞ –í–∞—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ!*\n\n"
                        f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {task_row['task_name']}\n"
                        f"üì¶ *–ì—Ä—É–ø–ø–∞:* {task_row['product_group']}\n"
                        f"üìç *–°–ª–æ—Ç:* {task_row['slot']}\n"
                        f"‚è∞ *–í—Ä–µ–º—è:* {duration} –º–∏–Ω\n\n"
                        f"*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 111* - –∑–∞–¥–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ó–°"
                    ),
                    parse_mode='Markdown',
                    reply_markup=get_special_task_keyboard()
                )

                print(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ {task_row['task_name']} ({task_id}) –¥–ª—è {opv['fio']}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ schedule_tasks_from_rules: {e}")

async def auto_close_expired_tasks(context):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' –∏–ª–∏ '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ'"""
    try:
        now = datetime.now()
        now_str = now.strftime('%Y-%m-%d %H:%M:%S')

        expired_df = SQL.sql_select('wms', f"""
            SELECT id, user_id, task_name, time_begin, status
            FROM wms_bot.shift_tasks
            WHERE status IN ('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ','–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏') 
              AND task_date IN (current_date, current_date - 1)
              AND merchant_code = '{MERCHANT_ID}'
        """)

        if expired_df.empty:
            print("‚úÖ –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —Å–µ–π—á–∞—Å")
            return

        print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {len(expired_df)}")

        for _, row in expired_df.iterrows():
            SQL.sql_delete('wms', f"""
                UPDATE wms_bot.shift_tasks
                SET status = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ',
                    time_end = '{now_str}',
                    inspector_id = 0
                WHERE id = '{row['id']}'
            """)
            print(f"‚úîÔ∏è –ó–∞–∫—Ä—ã—Ç–æ –∑–∞–¥–∞–Ω–∏–µ ID={row['id']} —É user_id={row['user_id']} ({row['task_name']})")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ auto_close_expired_tasks: {e}")
