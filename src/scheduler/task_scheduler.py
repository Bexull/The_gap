import pandas as pd
from datetime import datetime, timedelta, time
from ..database.sql_client import SQL
from ..config.settings import ZS_GROUP_CHAT_ID, MERCHANT_ID

# –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –±–µ–∑ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –û–ü–í
_no_opv_cache = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
_scheduler_running = False

async def schedule_tasks_from_rules(context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –∏–∑ shift_tasks —Å is_constant_task = false"""
    global _scheduler_running
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    if _scheduler_running:
        print("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –∑–∞–ø—É—Å–∫.")
        return
        
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω
    _scheduler_running = True
    
    try:
        now = datetime.now()
        current_time = now.strftime('%H:%M')
        current_time_full = now.strftime('%H:%M:%S')
        today = pd.to_datetime('today').date()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–µ–Ω—É
        shift_ru = '–î–µ–Ω—å' if 8 <= now.hour < 20 else '–ù–æ—á—å'
        shift_en = 'day' if 8 <= now.hour < 20 else 'night'
        
        print(f"üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ {current_time_full} (—Å–º–µ–Ω–∞: {shift_ru}, –¥–∞—Ç–∞: {today})")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è, –¥–∞—Ç—É –∏ —Å–º–µ–Ω—É
        schedule_df = SQL.sql_select('wms', f"""
            SELECT * FROM wms_bot.shift_tasks
            WHERE task_date = '{today}'
              AND shift = '{shift_ru}'
              AND is_constant_task = false
              AND status = '–í –æ–∂–∏–¥–∞–Ω–∏–∏'
              AND merchant_code = '{MERCHANT_ID}'
        """)
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(schedule_df)}")
        
        if schedule_df.empty:
            print(f"üì≠ –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —Å–º–µ–Ω—É {shift_ru} –∑–∞ {today}")
            return
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ —Å –æ–∫–Ω–æ–º –≤ 5 –º–∏–Ω—É—Ç
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ¬±5 –º–∏–Ω—É—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
        current_hour = now.hour
        current_minute = now.minute
        
        time_window = []
        for offset in range(-5, 6):  # –æ—Ç -5 –¥–æ +5 –º–∏–Ω—É—Ç
            target_minute = current_minute + offset
            target_hour = current_hour
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ —á–∞—Å
            if target_minute < 0:
                target_minute += 60
                target_hour -= 1
                if target_hour < 0:
                    target_hour = 23
            elif target_minute >= 60:
                target_minute -= 60
                target_hour += 1
                if target_hour >= 24:
                    target_hour = 0
            
            time_window.append(f"{target_hour:02d}:{target_minute:02d}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –≤ –æ–∫–Ω–µ –≤—Ä–µ–º–µ–Ω–∏
        schedule_df['start_time_short'] = schedule_df['start_time'].apply(
            lambda x: x.strftime('%H:%M') if pd.notnull(x) else None
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –æ–∫–Ω–æ
        unique_times = schedule_df['start_time_short'].dropna().unique()
        times_in_window = [t for t in unique_times if t in time_window]
        if times_in_window:
            print(f"‚è∞ –û–∫–Ω–æ: {time_window[0]}-{time_window[-1]} | –í—Ä–µ–º–µ–Ω–∞ –≤ –æ–∫–Ω–µ: {times_in_window}")

        due_tasks = schedule_df[schedule_df['start_time_short'].isin(time_window)]

        if due_tasks.empty:
            return
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∑–∞–¥–∞–Ω–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –≤—Ä–µ–º–µ–Ω–∏
        due_tasks = due_tasks.drop_duplicates(subset=['task_name', 'start_time_short'])
        print(f"üìã –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(due_tasks)}")

        total_assigned = 0
        assigned_opv_ids = set()  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –û–ü–í, –∫–æ—Ç–æ—Ä—ã–º —É–∂–µ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∑–∞–¥–∞–Ω–∏—è –≤ —ç—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        
        for _, task_row in due_tasks.iterrows():
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
            task_name = task_row.get('task_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ')
            task_time = task_row.get('start_time_short', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –∫—ç—à–∞
            cache_key = f"{task_name}_{task_time}_{shift_ru}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à - –µ—Å–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –û–ü–í, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if cache_key in _no_opv_cache:
                last_check = _no_opv_cache[cache_key]
                if (now - last_check).total_seconds() < 180:  # 3 –º–∏–Ω—É—Ç—ã
                    print(f"\n‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º '{task_name}' - –Ω–µ–¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –û–ü–í (–∫—ç—à)")
                    continue
            
            print(f"\nüéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ: {task_name}")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–µ–π —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –≤ shift_tasks
            start_time_str = task_row['start_time'].strftime('%Y-%m-%d %H:%M:%S') if pd.notnull(task_row['start_time']) else None
            task_name_escaped = str(task_name).replace("'", "''")  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã
            duplicates_df = SQL.sql_select('wms', f"""
                SELECT COUNT(*) as task_count
                FROM wms_bot.shift_tasks
                WHERE task_date = '{today}'
                AND shift = '{shift_ru}'
                AND is_constant_task = false
                AND status = '–í –æ–∂–∏–¥–∞–Ω–∏–∏'
                AND start_time = '{start_time_str}'
                AND task_name = '{task_name_escaped}'
                AND merchant_code = '{MERCHANT_ID}'
            """)

            task_count = int(duplicates_df.iloc[0]['task_count'])
            print(f"  üìä –ù–∞–π–¥–µ–Ω–æ {task_count} –¥—É–±–ª–µ–π –∑–∞–¥–∞–Ω–∏—è")

            # –ü–æ–¥–±–∏—Ä–∞–µ–º –û–ü–í –Ω–∞ —Å–º–µ–Ω–µ
            # –î–ª—è —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–π –∏—â–µ–º –û–ü–í, —É –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï–¢ –¥—Ä—É–≥–∏—Ö —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–π (priority='111') –≤ —Å—Ç–∞—Ç—É—Å–µ '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
            # –û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (is_constant_task = true) –ù–ï –±–ª–æ–∫–∏—Ä—É—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–π
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–∫–ª—é—á–∞–µ–º –û–ü–í, –∫–æ—Ç–æ—Ä—ã–º —É–∂–µ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∑–∞–¥–∞–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            assigned_opv_filter = ""
            if assigned_opv_ids:
                assigned_ids_str = ','.join([f"'{opv_id}'" for opv_id in assigned_opv_ids])
                assigned_opv_filter = f"AND ss.employee_id NOT IN ({assigned_ids_str})"
            
            opv_df = SQL.sql_select('wms', f"""
                SELECT DISTINCT ss.employee_id, bs.gender, concat(bs."name", ' ', bs.surname) AS fio, ba.userid
                FROM wms_bot.shift_sessions1 ss
                JOIN wms_bot.t_staff bs ON bs.id = ss.employee_id::int
                JOIN wms_bot.bot_auth ba ON ba.employee_id = ss.employee_id
                WHERE ss.end_time IS NULL
                  AND ss.start_time::date = current_date
                  AND ss.role = 'opv'
                  AND ss.shift_type = '{shift_en}'
                  AND ss.merchantid = {MERCHANT_ID}
                  {assigned_opv_filter}
                  AND NOT EXISTS (
                      SELECT 1
                      FROM wms_bot.shift_tasks st
                      WHERE st.user_id = ss.employee_id::int
                        AND st.status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
                        AND st.is_constant_task = false
                        AND st.priority = 111
                        AND st.time_end IS null
                        AND st.merchant_code = '{MERCHANT_ID}')
            """)
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –û–ü–í –Ω–∞ —Å–º–µ–Ω–µ (–Ω–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö)
            all_opv_df = SQL.sql_select('wms', f"""
                SELECT DISTINCT ss.employee_id, bs.gender, concat(bs."name", ' ', bs.surname) AS fio, ba.userid
                FROM wms_bot.shift_sessions1 ss
                JOIN wms_bot.t_staff bs ON bs.id = ss.employee_id::int
                JOIN wms_bot.bot_auth ba ON ba.employee_id = ss.employee_id
                WHERE ss.end_time IS NULL
                  AND ss.start_time::date = current_date
                  AND ss.role = 'opv'
                  AND ss.shift_type = '{shift_en}'
                  AND ss.merchantid = {MERCHANT_ID}
            """)
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª—É
            if task_row['gender'] in ['M', 'F']:
                opv_df = opv_df[opv_df['gender'].fillna('U').str.upper() == task_row['gender']]
                print(f"  üë§ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—É ({task_row['gender']}): {len(opv_df)} –û–ü–í")

            if opv_df.empty:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å 5 –º–∏–Ω—É—Ç
                _no_opv_cache[cache_key] = now
                continue

            # –ë–µ—Ä—ë–º task_count –û–ü–í (–∏–ª–∏ –º–µ–Ω—å—à–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç)
            selected_opv = opv_df.head(task_count)

            # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∂–¥–æ–º—É –û–ü–í –∏–∑ —Å–ø–∏—Å–∫–∞
            for idx, opv in selected_opv.iterrows():
                opv_name = opv.get('fio', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                opv_id = opv.get('employee_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –û–ü–í –ø–µ—Ä–µ–¥ –∑–∞–º–æ—Ä–æ–∑–∫–æ–π
                employee_id_int = int(opv['employee_id'])
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∑–∞–º–æ—Ä–æ–∑–∫–∏
                # –î–ª—è "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ" time_end –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ-—Ä–∞–∑–Ω–æ–º—É
                active_tasks_df = SQL.sql_select('wms', f"""
                    SELECT id, task_name, status, user_id, is_constant_task FROM wms_bot.shift_tasks
                    WHERE user_id::bigint = {employee_id_int}
                    AND status IN ('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ')
                    AND (
                        (status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' AND time_end IS NULL) OR
                        (status = '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ')
                    )
                    AND is_constant_task = true
                    AND merchant_code = '{MERCHANT_ID}'
                """)
                
                # –ó–∞–º–æ—Ä–æ–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –û–ü–í
                if not active_tasks_df.empty:
                    from ..utils.freeze_time_utils import update_freeze_time_on_pause
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º freeze_time –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ü–ï–†–ï–î –∑–∞–º–æ—Ä–æ–∑–∫–æ–π
                    for _, task_row in active_tasks_df.iterrows():
                        task_id = int(task_row['id'])
                        update_freeze_time_on_pause(task_id)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ"
                    SQL.sql_delete('wms', f"""
                        UPDATE wms_bot.shift_tasks
                        SET status = '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ'
                        WHERE user_id = '{opv['employee_id']}'
                        AND status IN ('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ')
                        AND (
                            (status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' AND time_end IS NULL) OR
                            (status = '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ')
                        )
                    """)
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–º–æ—Ä–æ–∑–∫–µ
                for _, task_row in active_tasks_df.iterrows():
                    task_id = int(task_row['id'])
                    task_name = task_row.get('task_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ')
                    
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                    try:
                        from ..config.settings import active_timers
                        if task_id in active_timers:
                            from ..handlers.task_handlers.task_timer import stop_timer
                            await stop_timer(task_id)
                    except Exception as timer_error:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}: {timer_error}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–º–æ—Ä–æ–∑–∫–µ –í–°–ï–ì–î–ê, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Ç–∞–π–º–µ—Ä–∞
                    try:
                        chat_id = opv['userid']
                        if isinstance(chat_id, pd.Series):
                            chat_id = chat_id.values[0]
                            
                        await context.bot.send_message(
                            chat_id=int(chat_id),
                            text=(
                                f"‚ùÑÔ∏è *–ó–∞–¥–∞–Ω–∏–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ!*\n\n"
                                f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {task_name}\n"
                                f"üìã *ID –∑–∞–¥–∞–Ω–∏—è:* {task_id}\n\n"
                                f"–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ –∏–∑-–∑–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏—è.\n"
                                f"–í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –µ–≥–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏—è."
                            ),
                            parse_mode='Markdown'
                        )
                    except Exception as notify_error:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–º–æ—Ä–æ–∑–∫–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}: {notify_error}")

                # –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–¥–Ω—É –∑–∞–¥–∞—á—É –∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å—Ç—Ä–æ–∫–∏ (FOR UPDATE)
                task_to_assign_df = SQL.sql_select('wms', f"""
                    SELECT id FROM wms_bot.shift_tasks
                    WHERE task_date = '{today}'
                    AND shift = '{shift_ru}'
                    AND is_constant_task = false
                    AND status = '–í –æ–∂–∏–¥–∞–Ω–∏–∏'
                    AND start_time = '{start_time_str}'
                    AND task_name = '{task_name_escaped}'
                    AND merchant_code = '{MERCHANT_ID}'
                    ORDER BY id LIMIT 1
                    FOR UPDATE
                """)

                if task_to_assign_df.empty:
                    print(f"      ‚ö†Ô∏è –í—Å–µ –¥—É–±–ª–∏ –∑–∞–¥–∞–Ω–∏—è '{task_name}' —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã")
                    break

                task_id = int(task_to_assign_df.iloc[0]['id'])

                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
                now_str = now.strftime('%Y-%m-%d %H:%M:%S')
                print(f"  ‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–æ: {task_name} ‚Üí {opv_name}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –æ—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–Ω–∞—Å–ª–µ–¥—É–µ–º)
                employment_type = 'main'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Å–Ω–æ–≤–Ω–∞—è —Å–º–µ–Ω–∞
                try:
                    # –ò—â–µ–º –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–µ—Ä–µ–º –µ–≥–æ part_time
                    frozen_task_df = SQL.sql_select('wms', f"""
                        SELECT part_time 
                        FROM wms_bot.shift_tasks 
                        WHERE user_id = '{opv['employee_id']}' 
                          AND status IN ('–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ', '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ')
                          AND merchant_code = '{MERCHANT_ID}'
                          AND part_time IS NOT NULL
                        ORDER BY time_begin DESC LIMIT 1
                    """)
                    if hasattr(frozen_task_df, 'empty') and not frozen_task_df.empty and len(frozen_task_df) > 0:
                        employment_type = frozen_task_df.iloc[0]['part_time'] or 'main'
                        print(f"üìã –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–º–µ–ª–æ —Å–º–µ–Ω—É: {employment_type}, –±–µ—Ä–µ–º —ç—Ç—É —Å–º–µ–Ω—É")
                    else:
                        print(f"‚ö†Ô∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {employment_type}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –æ—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {e}")

                SQL.sql_delete('wms', f"""
                    UPDATE wms_bot.shift_tasks
                    SET status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
                        user_id = '{opv['employee_id']}',
                        time_begin = '{now_str}',
                        part_time = '{employment_type}',
                        operator_name = '{opv['fio']}'
                    WHERE id = {task_id}
                """)

                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
                task_details_df = SQL.sql_select('wms', f"""
                    SELECT task_name, product_group, slot, task_duration
                    FROM wms_bot.shift_tasks
                    WHERE id = {task_id}
                """)
                
                if not task_details_df.empty:
                    task_details = task_details_df.iloc[0]
                    task_name = task_details.get('task_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ')
                    product_group = task_details.get('product_group', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                    slot = task_details.get('slot', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—è task_duration
                    try:
                        if 'task_duration' in task_details and task_details['task_duration'] is not None and pd.notnull(task_details['task_duration']):
                            if hasattr(task_details['task_duration'], 'strftime'):
                                duration = task_details['task_duration'].strftime('%H:%M')
                            else:
                                duration = str(task_details['task_duration'])
                        else:
                            duration = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                    except Exception as e:
                        print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ duration: {e}")
                        duration = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                else:
                    task_name = task_row.get('task_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ')
                    product_group = task_row.get('product_group', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                    slot = task_row.get('slot', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                    duration = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                    print(f"      ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è {task_id}")
                
                chat_id = opv['userid']
                if isinstance(chat_id, pd.Series):
                    chat_id = chat_id.values[0]

                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                from ..keyboards.opv_keyboards import get_special_task_keyboard
                
                try:
                    message_text = (
                        f"üìå *–ù–∞ –í–∞—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ!*\n\n"
                        f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {task_name}\n"
                        f"üì¶ *–ì—Ä—É–ø–ø–∞:* {product_group}\n"
                        f"üìç *–°–ª–æ—Ç:* {slot}\n"
                        f"‚è∞ *–í—Ä–µ–º—è:* {duration} –º–∏–Ω\n\n"
                        f"*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 111* - –∑–∞–¥–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ó–°"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    keyboard = get_special_task_keyboard()
                    await context.bot.send_message(
                        chat_id=int(chat_id),
                        text=message_text,
                        parse_mode='Markdown',
                        reply_markup=keyboard
                    )
                except Exception:
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                    try:
                        simple_text = f"üìå –ù–∞ –í–∞—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ!\n\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {task_name}\n–ì—Ä—É–ø–ø–∞: {product_group}\n–°–ª–æ—Ç: {slot}\n–í—Ä–µ–º—è: {duration} –º–∏–Ω"
                        await context.bot.send_message(
                            chat_id=int(chat_id),
                            text=simple_text
                        )
                    except Exception:
                        pass
                total_assigned += 1
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º –û–ü–í –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö
                assigned_opv_ids.add(str(opv['employee_id']))
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞, —Ç–∞–∫ –∫–∞–∫ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ
                if cache_key in _no_opv_cache:
                    del _no_opv_cache[cache_key]
        
        if total_assigned > 0:
            print(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {total_assigned}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        pass
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        _scheduler_running = False

async def auto_close_expired_tasks(context):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' –∏–ª–∏ '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ', –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 4 —á–∞—Å–∞ —Å –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        now = datetime.now()
        now_str = now.strftime('%Y-%m-%d %H:%M:%S')

        expired_df = SQL.sql_select('wms', f"""
            SELECT id, user_id, task_name, time_begin, status
            FROM wms_bot.shift_tasks
            WHERE status IN ('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ','–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏') 
              AND task_date IN (current_date, current_date - 1)
              AND merchant_code = '{MERCHANT_ID}'
              AND time_begin IS NOT NULL
              AND time_begin <= NOW() - INTERVAL '4 hours'
        """)

        if expired_df.empty:
            return

        for _, row in expired_df.iterrows():
            SQL.sql_delete('wms', f"""
                UPDATE wms_bot.shift_tasks
                SET status = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ',
                    time_end = '{now_str}',
                    inspector_id = 0
                WHERE id = '{row['id']}'
            """)

    except Exception as e:
        pass
