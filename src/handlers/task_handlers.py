import asyncio
import pandas as pd
from datetime import datetime, timedelta
import datetime as dt
from telegram import Update
from telegram.ext import CallbackContext
from ..database.sql_client import SQL
from ..utils.time_utils import get_current_slot, get_task_date
from ..config.settings import MERCHANT_ID
from ..utils.task_utils import send_task_to_zs, check_user_task_status
from ..keyboards.opv_keyboards import get_next_task_keyboard, get_task_in_progress_keyboard, get_photo_upload_keyboard, get_task_keyboard
from telegram.ext import ContextTypes
import logging
logger = logging.getLogger(__name__)



async def get_task(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    employee_id = context.user_data.get('staff_id')
    if not employee_id:
        await query.edit_message_text("‚ö†Ô∏è –í–∞—à ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    status_check = check_user_task_status(employee_id)
    if status_check['blocked']:
        reply_markup = status_check.get('reply_markup')
        await query.edit_message_text(status_check['message'], reply_markup=reply_markup)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä —Å–µ–∫—Ç–æ—Ä–∞
    if not context.user_data.get('sector_selected'):
        sectors_df = SQL.sql_select('stock', """SELECT DISTINCT "–°–µ–∫—Ç–æ—Ä" FROM public.task_schedule WHERE "–î–∞—Ç–∞" = current_date""")
        sectors = sectors_df['–°–µ–∫—Ç–æ—Ä'].dropna().tolist()
        
        from ..keyboards.opv_keyboards import get_sector_keyboard
        reply_markup = get_sector_keyboard(sectors)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ç–æ—Ä, —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å:", reply_markup=reply_markup)
        return

    # –ï—Å–ª–∏ —Å–µ–∫—Ç–æ—Ä –≤—ã–±—Ä–∞–Ω - –Ω–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    await assign_task_from_sector(update, context)

async def assign_task_from_sector(update: Update, context: CallbackContext):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞"""
    query = update.callback_query
    await query.answer()

    employee_id = context.user_data.get('staff_id')
    sector = context.user_data.get('sector')
    shift = context.user_data.get('shift')

    if not all([employee_id, sector, shift]):
        await query.edit_message_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.")
        return

    try:
        print(f"üîé assign_task_from_sector: staff_id={employee_id}, sector={sector}, shift={shift}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status_check = check_user_task_status(employee_id)
        if status_check['blocked']:
            reply_markup = status_check.get('reply_markup')
            await query.edit_message_text(status_check['message'], reply_markup=reply_markup)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª
        gender_df = SQL.sql_select('wms', f"SELECT gender FROM wms_bot.t_staff WHERE id = '{employee_id}'")
        opv_gender = gender_df.iloc[0]['gender'].strip().upper() if not gender_df.empty else 'U'
        
        # –ü–æ–ª—É—á–∞–µ–º –§–ò–û –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        operator_full_name = context.user_data.get('staff_name', '–û–ü–í')

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º shift –≤ –Ω—É–∂–Ω—ã–π –≤–∏–¥
        shift_ru = '–î–µ–Ω—å' if shift == 'day' else '–ù–æ—á—å'

        task_date = get_task_date(shift)
        current_slot = get_current_slot(shift)
        if current_slot is None:
            await query.edit_message_text("‚è∞ –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—Ç–∞.")
            return

        # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ shift_tasks
        sql_query = f"""
            SELECT * FROM wms_bot.shift_tasks
            WHERE task_date = '{task_date}'
              AND shift = '{shift_ru}'
              AND sector = '{sector}'
              AND slot = {current_slot}
              AND is_constant_task = true
              and merchant_code ='{MERCHANT_ID}'
              AND (status IS NULL OR status = '–í –æ–∂–∏–¥–∞–Ω–∏–∏')
        """
        # print("üîé SQL (assign_task_from_sector):", sql_query)
        task_df = SQL.sql_select('wms', sql_query)

        if task_df.empty:
            print("üîé –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:", {
                'task_date': str(task_date),
                'shift_ru': shift_ru,
                'sector': sector,
                'slot': current_slot,
                'merchant': MERCHANT_ID
            })
            # –î–æ–ø. –æ—Ç–ª–∞–¥–∫–∞: –∫–∞–∫–∏–µ –º–µ—Ä—á–∞–Ω—Ç—ã –µ—Å—Ç—å –ø–æ–¥ —ç—Ç–∏ —É—Å–ª–æ–≤–∏—è –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞
            dbg_merchants_sql = f"""
                SELECT merchant_code, COUNT(*) AS cnt
                FROM wms_bot.shift_tasks
                WHERE task_date = '{task_date}'
                  AND shift = '{shift_ru}'
                  AND sector = '{sector}'
                  AND slot = {current_slot}
                  AND is_constant_task = true
                GROUP BY merchant_code
                ORDER BY cnt DESC
            """
            try:
                dbg_df = SQL.sql_select('wms', dbg_merchants_sql)
                print("üîé Merchants under same constraints:", dbg_df.to_dict(orient='records') if hasattr(dbg_df, 'to_dict') else dbg_df)
                # –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å–ª–æ—Ç—É
                dbg_no_slot = f"""
                    SELECT merchant_code, slot, COUNT(*) cnt
                    FROM wms_bot.shift_tasks
                    WHERE task_date = '{task_date}'
                      AND shift = '{shift_ru}'
                      AND sector = '{sector}'
                      AND is_constant_task = true
                    GROUP BY merchant_code, slot
                    ORDER BY cnt DESC
                """
                dbg_no_slot_df = SQL.sql_select('wms', dbg_no_slot)
                print("üîé Merchants by slot (no slot filter):", dbg_no_slot_df.to_dict(orient='records') if hasattr(dbg_no_slot_df, 'to_dict') else dbg_no_slot_df)
                # –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å–µ–∫—Ç–æ—Ä—É
                dbg_no_sector = f"""
                    SELECT merchant_code, sector, COUNT(*) cnt
                    FROM wms_bot.shift_tasks
                    WHERE task_date = '{task_date}'
                      AND shift = '{shift_ru}'
                      AND slot = {current_slot}
                      AND is_constant_task = true
                    GROUP BY merchant_code, sector
                    ORDER BY cnt DESC
                """
                dbg_no_sector_df = SQL.sql_select('wms', dbg_no_sector)
                print("üîé Merchants by sector (no sector filter):", dbg_no_sector_df.to_dict(orient='records') if hasattr(dbg_no_sector_df, 'to_dict') else dbg_no_sector_df)
                # –°–≤–æ–¥–∫–∞ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Å–º–µ–Ω–∞–º –¥–ª—è 5001
                dbg_shifts_5001 = f"""
                    SELECT shift, COUNT(*) cnt
                    FROM wms_bot.shift_tasks
                    WHERE task_date = '{task_date}'
                      AND merchant_code = '{MERCHANT_ID}'
                    GROUP BY shift
                """
                dbg_shifts_df = SQL.sql_select('wms', dbg_shifts_5001)
                print("üîé Shifts present for merchant:", dbg_shifts_df.to_dict(orient='records') if hasattr(dbg_shifts_df, 'to_dict') else dbg_shifts_df)
            except Exception as e:
                print("‚ö†Ô∏è Debug merchants query failed:", e)
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–ª—É
        task_df = task_df[
            (task_df['gender'].isnull()) |
            (task_df['gender'].str.upper() == 'U') |
            (task_df['gender'].str.upper() == opv_gender)
        ]

        if task_df.empty:
            await query.edit_message_text("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ –ø–æ–ª—É –∑–∞–¥–∞–Ω–∏–π.")
            return

        # –ë–µ—Ä—ë–º –∑–∞–¥–∞–Ω–∏–µ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        task_row = task_df.sort_values('priority').iloc[0]
        now = datetime.now()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è + –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        employment_type = context.user_data.get('employment_type', 'main')
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_tasks
            SET status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
                user_id = '{employee_id}',
                time_begin = '{now}',
                part_time = '{employment_type}',
                operator_name = '{operator_full_name}'
            WHERE id = {task_row['id']}
        """)

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        try:
            duration_raw = task_row['task_duration']

            if isinstance(duration_raw, dt.time):
                total_seconds = duration_raw.hour * 3600 + duration_raw.minute * 60 + duration_raw.second
            else:
                time_str = str(duration_raw).strip()
                t = datetime.strptime(time_str, '%H:%M:%S')
                total_seconds = t.hour * 3600 + t.minute * 60 + t.second

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ task_duration: {e}")
            total_seconds = 900  # –¥–µ—Ñ–æ–ª—Ç 15 –º–∏–Ω –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        task = {
            'task_id': task_row['id'],
            'task_name': task_row['task_name'],
            'product_group': task_row['product_group'],
            'slot': task_row['slot'],
            'duration': task_row['task_duration'],
            'assigned_time': now
        }
        context.user_data['task'] = task
        context.user_data.pop('photos', None)
        context.user_data.pop('photo_request_time', None)
        context.user_data['late_warning_sent'] = False

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º
        message = (
            f"üìÑ *–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:* {task_row['id']}\n"
            f"‚úÖ *–ó–∞–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!*\n\n"
            f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {task_row['task_name']}\n"
            f"üì¶ *–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤:* {task_row.get('product_group', '‚Äî')}\n"
            f"üìç *–°–ª–æ—Ç:* {task_row['slot']}\n"
            f"‚è± *–í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:* {str(timedelta(seconds=total_seconds))}\n"
            f"‚è≥ *–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:* {str(timedelta(seconds=total_seconds))}"
        )

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        comment = task_row.get('comment')
        if comment and str(comment).strip():
            message += f"\nüí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"
        reply_markup = get_task_in_progress_keyboard()
        sent_msg = await query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)

        # üí•üí•üí• –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä!
        asyncio.create_task(
            update_timer(context, sent_msg.chat_id, sent_msg.message_id, task, total_seconds, reply_markup)
        )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ assign_task_from_sector: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.")

async def update_timer(context, chat_id, message_id, task, total_seconds, reply_markup=None, comment=None):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è"""
    for remaining in range(total_seconds, -1, -15):
        try:
            minutes = remaining // 60
            seconds = remaining % 60
            remaining_str = f"{minutes:02d}:{seconds:02d}"

            message = (
                f"üìÑ *–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:* {task['task_id']}\n"
                f"‚úÖ *–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è*\n\n"
                f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {task['task_name']}\n"
                f"üì¶ *–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤:* {task.get('product_group', '‚Äî')}\n"
                f"üìç *–°–ª–æ—Ç:* {task.get('slot', '‚Äî')}\n"
                f"‚è± *–í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:* {task['duration']}\n"
                f"‚è≥ *–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:* {remaining_str}"
            )

            if comment and str(comment).strip():
                message += f"\nüí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment}"

            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )

            await asyncio.sleep(15)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞: {e}")
            break

async def complete_task_inline(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É'"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    staff_id = context.user_data.get('staff_id')
    task = context.user_data.get('task')

    if not task:
        staff_id = context.user_data.get('staff_id')
        if not staff_id:
            await query.edit_message_text("‚ö†Ô∏è –í–∞—à ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã
        task_df = SQL.sql_select('wms', f"""
            SELECT id, task_name, product_group, slot, time_begin, task_duration, comment
            FROM wms_bot.shift_tasks
            WHERE user_id = '{staff_id}' AND status IN ('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ')
            AND merchant_code = '{MERCHANT_ID}'
            ORDER BY time_begin DESC LIMIT 1
        """)

        if task_df.empty:
            await query.edit_message_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
            return

        row = task_df.iloc[0]
        time_begin_value = row['time_begin']

        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø–∞—Ä—Å–∏–º –≤ time
        if isinstance(time_begin_value, str):
            time_begin_value = datetime.strptime(time_begin_value, '%H:%M:%S').time()

        # –ï—Å–ª–∏ —ç—Ç–æ time ‚Äî –∫–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π
        if isinstance(time_begin_value, dt.time):
            assigned_time = datetime.combine(datetime.today(), time_begin_value)
        else:
            assigned_time = pd.to_datetime(time_begin_value)

        now = datetime.now()

        task = {
            'task_id': row['id'],
            'task_name': row['task_name'],
            'product_group': row['product_group'],
            'slot': row['slot'],
            'assigned_time': assigned_time,
            'duration': row['task_duration'],
            'assigned_time': now
        }
        context.user_data['task'] = task

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ
    if 'photos' not in context.user_data:
        context.user_data.update({'photo_request_time': datetime.now(), 'photos': []})
        reply_markup = get_photo_upload_keyboard()
        await query.edit_message_text(
            "üì∏ –°–¥–µ–ª–∞–π—Ç–µ –Ω–µ –±–æ–ª–µ–µ 3 —Ñ–æ—Ç–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É.\n\n"
            "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É'",
            reply_markup=reply_markup
        )
        return

    if not context.user_data['photos']:
        reply_markup = get_photo_upload_keyboard()
        await query.edit_message_text(
            "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É'",
            reply_markup=reply_markup
        )
        return

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    now = datetime.now()
    time_spent = now - task['assigned_time']

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_tasks
            SET status = '–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏',
                time_end = '{now}'
            WHERE id = {task['task_id']}
        """)

        await query.edit_message_text("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–µ–¥—É—é—â–µ–º—É.")
        await send_task_to_zs(context, task, context.user_data['photos'])

        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop('task', None)
        context.user_data.pop('photos', None)
        context.user_data.pop('photo_request_time', None)
        context.user_data['late_warning_sent'] = False

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–µ–¥—É—é—â–µ–º—É.\n\n‚è≥ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –±—Ä–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ."
        )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
        error_message = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if "Message thread not found" in str(e):
            sector = context.user_data.get('sector', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
            error_message += f"\n\nüîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n–°–µ–∫—Ç–æ—Ä: {sector}\n–ü—Ä–æ–±–ª–µ–º–∞: –¢–æ–ø–∏–∫ –¥–ª—è —Å–µ–∫—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            print(f"üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –°–µ–∫—Ç–æ—Ä: {sector}")
        
        await query.edit_message_text(error_message)

async def show_task(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()

    staff_id = context.user_data.get('staff_id')

    if not staff_id:
        await query.edit_message_text("‚ö†Ô∏è –í–∞—à ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (–≤—ã–ø–æ–ª–Ω—è—é—â–∏–µ—Å—è)
    task_df = SQL.sql_select('wms', f"""
        SELECT id, task_name, product_group, slot, time_begin, task_duration, comment, status
        FROM wms_bot.shift_tasks
        WHERE user_id = '{staff_id}' AND status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
        AND merchant_code = '{MERCHANT_ID}'
        ORDER BY time_begin DESC LIMIT 1
    """)

    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö, –∏—â–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ
    if task_df.empty:
        task_df = SQL.sql_select('wms', f"""
            SELECT id, task_name, product_group, slot, time_begin, task_duration, comment, status
            FROM wms_bot.shift_tasks
            WHERE user_id = '{staff_id}' AND status = '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ'
            AND merchant_code = '{MERCHANT_ID}'
            ORDER BY time_begin DESC LIMIT 1
        """)

    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ, –∏—â–µ–º –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ
    if task_df.empty:
        task_df = SQL.sql_select('wms', f"""
            SELECT id, task_name, product_group, slot, time_begin, task_duration, comment, status
            FROM wms_bot.shift_tasks
            WHERE user_id = '{staff_id}' AND status = '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ'
            AND merchant_code = '{MERCHANT_ID}'
            ORDER BY time_begin DESC LIMIT 1
        """)

    if task_df.empty:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return

    row = task_df.iloc[0]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if row['status'] == '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è':
        status_emoji = "‚ñ∂Ô∏è"
        status_text = "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
    elif row['status'] == '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ':
        status_emoji = "üîÑ"
        status_text = "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ"
    else:  # –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ
        status_emoji = "‚ùÑÔ∏è"
        status_text = "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ (–∏–∑-–∑–∞ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏—è)"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π
    task_info = (
        f"üìã *–¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ*\n\n"
        f"üÜî ID: `{row['id']}`\n"
        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: *{row['task_name']}*\n"
        f"üì¶ –ì—Ä—É–ø–ø–∞: {row['product_group']}\n"
        f"üìç –°–ª–æ—Ç: {row['slot']}\n"
        f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {row['time_begin']}\n"
        f"‚è≥ –ü–ª–∞–Ω–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {row['task_duration']} –º–∏–Ω\n"
        f"{status_emoji} *–°—Ç–∞—Ç—É—Å:* {status_text}"
    )
    if "comment" in row and row["comment"]:
        task_info += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {row['comment']}"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∏ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ
    if row['status'] in ['–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ']:
        await query.edit_message_text(task_info, parse_mode="Markdown", reply_markup=get_task_keyboard())
    else:
        # –î–ª—è –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        task_info += f"\n\n*‚ÑπÔ∏è –ó–∞–¥–∞–Ω–∏–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.*"
        await query.edit_message_text(task_info, parse_mode="Markdown")



async def complete_the_task(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–∫–æ–º–∞–Ω–¥–∞) - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    await complete_task_inline(update, context)

async def receive_photo(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è"""
    staff_id = context.user_data.get('staff_id')
    now = datetime.now()

    if 'photo_request_time' not in context.user_data:
        await update.message.reply_text("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    time_passed = now - context.user_data['photo_request_time']
    is_late = time_passed > timedelta(minutes=180)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if 'photos' not in context.user_data:
        context.user_data['photos'] = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ
    if len(context.user_data['photos']) >= 3:   # –ª–∏–º–∏—Ç 3 —Ñ–æ—Ç–æ
        await update.message.reply_text("‚ö†Ô∏è –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 —Ñ–æ—Ç–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ç–æ
    if not update.message.photo:
        await update.message.reply_text("‚ùå –§–æ—Ç–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo_id = update.message.photo[-1].file_id
    context.user_data['photos'].append(photo_id)
    photo_num = len(context.user_data['photos'])

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    if 'progress_message' not in context.user_data:
        sent = await update.message.reply_text(f"üì∏ –§–æ—Ç–æ {photo_num}/3 –ø–æ–ª—É—á–µ–Ω–æ.")
        context.user_data['progress_message'] = sent.message_id
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            new_text = (
                f"üì∏ –§–æ—Ç–æ {photo_num}/3 –ø–æ–ª—É—á–µ–Ω–æ."
                if photo_num < 3 else
                f"üì∏ –§–æ—Ç–æ {photo_num}/3 –ø–æ–ª—É—á–µ–Ω–æ. ‚úÖ –í—Å–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!"
            )
            new_markup = get_task_keyboard() if photo_num == 3 else None
            
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=context.user_data['progress_message'],
                text=new_text,
                reply_markup=new_markup
            )
        except Exception as e:
            if "Message is not modified" not in str(e):
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
   

    # ‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    if is_late and not context.user_data['late_warning_sent']:
        context.user_data['late_warning_sent'] = True
        await update.message.reply_text(
            "‚ö†Ô∏è –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é. –ó–° –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ."
        )

async def complete_special_task_inline(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    await query.answer()
    
    staff_id = context.user_data.get('staff_id')
    if not staff_id:
        await query.edit_message_text("‚ö†Ô∏è –í–∞—à ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ
    extra_task_df = SQL.sql_select('wms', f"""
        SELECT id, task_name, time_begin
        FROM wms_bot.shift_tasks
        WHERE user_id = '{staff_id}'
          AND status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
          AND time_end IS NULL
          AND priority = '111'
          AND merchant_code = '{MERCHANT_ID}'
        ORDER BY time_begin DESC LIMIT 1
    """)

    if extra_task_df.empty:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–π.")
        return

    task = extra_task_df.iloc[0]
    now = datetime.now()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É—á–µ—Ç–∞ –≤ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    from ..utils.task_utils import parse_task_duration
    task_duration_df = SQL.sql_select('wms', f"""
        SELECT task_duration FROM wms_bot.shift_tasks WHERE id = {task['id']} AND merchant_code = '{MERCHANT_ID}'
    """)
    
    if not task_duration_df.empty:
        duration_raw = task_duration_df.iloc[0]['task_duration']
        task_seconds = parse_task_duration(duration_raw)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É
        current_worked = context.user_data.get('worked_seconds', 0)
        new_worked = current_worked + task_seconds
        context.user_data['worked_seconds'] = new_worked
        
        print(f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (—Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ): {current_worked}s + {task_seconds}s = {new_worked}s")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ
    SQL.sql_delete('wms', f"""
        UPDATE wms_bot.shift_tasks
        SET status = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ',
            time_end = '{now}'
        WHERE id = {task['id']}
    """)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Ö
    frozen_task_df = SQL.sql_select('wms', f"""
        SELECT id, task_name, product_group, slot, task_duration, comment
        FROM wms_bot.shift_tasks
        WHERE user_id = '{staff_id}'
          AND status = '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ'
          AND time_end IS NULL
          AND merchant_code = '{MERCHANT_ID}'
        ORDER BY time_begin DESC LIMIT 1
    """)

    success_message = f"‚úÖ –°–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ ‚Ññ{task['id']} ({task['task_name']}) –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"

    if not frozen_task_df.empty:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        frozen_task = frozen_task_df.iloc[0]
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_tasks
            SET status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
            WHERE id = {frozen_task['id']}
        """)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        from ..keyboards.opv_keyboards import get_task_keyboard
        
        task_info = (
            f"{success_message}\n\n"
            f"üîÑ *–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:*\n\n"
            f"üÜî ID: `{frozen_task['id']}`\n"
            f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: *{frozen_task['task_name']}*\n"
            f"üì¶ –ì—Ä—É–ø–ø–∞: {frozen_task['product_group']}\n"
            f"üìç –°–ª–æ—Ç: {frozen_task['slot']}\n"
            f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {frozen_task['task_duration']} –º–∏–Ω"
        )
        
        if frozen_task['comment']:
            task_info += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {frozen_task['comment']}"

        await query.edit_message_text(
            task_info, 
            parse_mode="Markdown", 
            reply_markup=get_task_keyboard()
        )
    else:
        # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        await query.edit_message_text(success_message)

async def complete_the_extra_task(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (priority = 111) - –∫–æ–º–∞–Ω–¥–∞"""
    staff_id = context.user_data.get('staff_id')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–æ–ø. –∑–∞–¥–∞–Ω–∏–µ
    extra_task_df = SQL.sql_select('wms', f"""
        SELECT id, task_name, time_begin
        FROM wms_bot.shift_tasks
        WHERE user_id = '{staff_id}'
          AND status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
          AND time_end IS NULL
          AND priority = '111'
          AND merchant_code = '{MERCHANT_ID}'
        ORDER BY time_begin DESC LIMIT 1
    """)

    if extra_task_df.empty:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return

    task = extra_task_df.iloc[0]
    now = datetime.now()

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    SQL.sql_delete('wms', f"""
        UPDATE wms_bot.shift_tasks
        SET status = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ',
            time_end = '{now}'
        WHERE id = {task['id']}
    """)

    await update.message.reply_text(
        f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{task['id']} ({task['task_name']}) –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    )

async def complete_the_task(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    staff_id = context.user_data.get('staff_id')
    task = context.user_data.get('task')

    if not task:
        staff_id = context.user_data.get('staff_id')
        if not staff_id:
            await update.message.reply_text("‚ö†Ô∏è –í–∞—à ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã
        task_df = SQL.sql_select('wms', f"""
            SELECT id, task_name, product_group, slot, time_begin, task_duration, comment
            FROM wms_bot.shift_tasks
            WHERE user_id = '{staff_id}' AND status IN ('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ')
            AND merchant_code = '{MERCHANT_ID}'
            ORDER BY time_begin DESC LIMIT 1
        """)

        if task_df.empty:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
            return


        row = task_df.iloc[0]
        time_begin_value = row['time_begin']

        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø–∞—Ä—Å–∏–º –≤ time
        if isinstance(time_begin_value, str):
            time_begin_value = datetime.strptime(time_begin_value, '%H:%M:%S').time()

        # –ï—Å–ª–∏ —ç—Ç–æ time ‚Äî –∫–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π
        if isinstance(time_begin_value, dt.time):
            assigned_time = datetime.combine(datetime.today(), time_begin_value)
        else:
            assigned_time = pd.to_datetime(time_begin_value)

        now = datetime.now()

        task = {
            'task_id': row['id'],
            'task_name': row['task_name'],
            'product_group': row['product_group'],
            'slot': row['slot'],
            'assigned_time': assigned_time,
            'duration': row['task_duration'],
            'assigned_time': now
        }
        context.user_data['task'] = task

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ
    if 'photos' not in context.user_data:
        context.user_data.update({'photo_request_time': datetime.now(), 'photos': []})
        await update.message.reply_text("üì∏ –°–¥–µ–ª–∞–π—Ç–µ –Ω–µ –±–æ–ª–µ–µ 3 —Ñ–æ—Ç–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É.")
        return

    if not context.user_data['photos']:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.")
        return

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    now = datetime.now()
    time_spent = now - task['assigned_time']

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_tasks
            SET status = '–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏',
                time_end = '{now}'
            WHERE id = {task['task_id']}
        """)

        await update.message.reply_text("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–µ–¥—É—é—â–µ–º—É.")
        await send_task_to_zs(context, task, context.user_data['photos'])

        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop('task', None)
        context.user_data.pop('photos', None)
        context.user_data.pop('photo_request_time', None)
        context.user_data['late_warning_sent'] = False


    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def clear_topic_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–ø–∏–∫–∞ –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫–µ, –≤–∫–ª—é—á–∞—è –∫–æ–º–∞–Ω–¥—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ
    if update.message.chat.type not in ["group", "supergroup"]:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ —Ç–æ–ø–∏–∫–µ
    if not update.message.message_thread_id:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ —Ç–æ–ø–∏–∫–∞!")
        return
    
    chat_id = update.message.chat.id
    thread_id = update.message.message_thread_id
    user = update.message.from_user
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_member = await context.bot.get_chat_member(chat_id, user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å)
        if chat_member.status not in ["administrator", "creator"]:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–ø–∏–∫–∞!")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        confirm_msg = await update.message.reply_text(
            "üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É —Ç–æ–ø–∏–∫–∞...\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
        )
        
        deleted_count = 0
        errors_count = 0
        skipped_count = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–¥–∞–ª—è–µ–º –∏—Ö –ø–∞—á–∫–∞–º–∏
        current_message_id = update.message.message_id
        batch_size = 100
        
        for offset in range(0, 1000, batch_size):
            batch_deleted = 0
            
            for msg_id in range(current_message_id - offset, 
                              max(1, current_message_id - offset - batch_size), -1):
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ "@" –≤ –Ω–∞—á–∞–ª–µ
                should_skip = False
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
                    message = await context.bot.forward_message(
                        chat_id=chat_id,
                        from_chat_id=chat_id,
                        message_id=msg_id,
                        message_thread_id=thread_id
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    message_text = ""
                    if message.text:
                        message_text = message.text.strip()
                    elif message.caption:
                        message_text = message.caption.strip()
                    
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "@", —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º
                    if message_text.startswith("@"):
                        should_skip = True
                        skipped_count += 1
                        logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id} (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)")
                    
                    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await context.bot.delete_message(chat_id, message.message_id)
                    
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É —É–¥–∞–ª–µ–Ω–∏—è
                    pass
                
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                if should_skip:
                    continue
                
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await context.bot.delete_message(
                        chat_id=chat_id, 
                        message_id=msg_id
                    )
                    deleted_count += 1
                    batch_deleted += 1
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
                    await asyncio.sleep(0.1)
                    
                except Exception as e:
                    error_msg = str(e).lower()
                    if "message to delete not found" not in error_msg:
                        if any(keyword in error_msg for keyword in [
                            "message can't be deleted", 
                            "pinned", 
                            "can't delete",
                            "bad request"
                        ]):
                            # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ –∏–ª–∏ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            skipped_count += 1
                            logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id} (–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ): {e}")
                        else:
                            errors_count += 1
                            logger.debug(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")
            
            # –ï—Å–ª–∏ –≤ –ø–∞—á–∫–µ –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–∏–ª–∏, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
            if batch_deleted == 0:
                break
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 50 —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if deleted_count % 50 == 0 and deleted_count > 0:
                try:
                    await context.bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=confirm_msg.message_id,
                        text=f"üßπ –û—á–∏—Å—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n"
                             f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                             f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}"
                    )
                except:
                    pass
        
        # –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É /clear
        try:
            await context.bot.delete_message(chat_id, update.message.message_id)
            deleted_count += 1
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: {e}")
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        final_text = f"‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ç–æ–ø–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n" \
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" \
                    f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {deleted_count}\n"
        
        if skipped_count > 0:
            final_text += f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (@ –∏–ª–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ): {skipped_count}\n"
        
        if deleted_count == 0:
            final_text = "‚ÑπÔ∏è –í —Ç–æ–ø–∏–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
        
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=confirm_msg.message_id,
                text=final_text
            )
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(10)
            try:
                await context.bot.delete_message(chat_id, confirm_msg.message_id)
            except:
                pass
                
        except:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            temp_msg = await context.bot.send_message(
                chat_id=chat_id,
                text=final_text,
                message_thread_id=thread_id
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(10)
            try:
                await context.bot.delete_message(chat_id, temp_msg.message_id)
            except:
                pass
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–æ–ø–∏–∫–∞: {e}")
        try:
            error_msg = await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–æ–ø–∏–∫–∞:\n{str(e)}"
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(10)
            try:
                await context.bot.delete_message(chat_id, error_msg.message_id)
                await context.bot.delete_message(chat_id, update.message.message_id)
            except:
                pass
        except:
            pass

async def clear_topic_confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
    """
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ —Ç–æ–ø–∏–∫–µ
    if not update.message.message_thread_id:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ —Ç–æ–ø–∏–∫–∞!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    chat_id = update.message.chat.id
    user = update.message.from_user
    
    try:
        chat_member = await context.bot.get_chat_member(chat_id, user.id)
        if chat_member.status not in ["administrator", "creator"]:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–ø–∏–∫–∞!")
            return
    except:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data=f"clear_confirm_{update.message.message_thread_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="clear_cancel")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–ø–∏–∫?\n\n"
        "üóëÔ∏è –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–ø–∏–∫–µ!\n"
        "‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=reply_markup
    )


# Callback handler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async def clear_topic_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–ø–∏–∫–∞"""
    
    query = update.callback_query
    await query.answer()
    
    if query.data == "clear_cancel":
        await query.edit_message_text("‚ùå –û—á–∏—Å—Ç–∫–∞ —Ç–æ–ø–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    
    if query.data.startswith("clear_confirm_"):
        thread_id = int(query.data.split("_")[-1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞
        chat_id = query.message.chat.id
        user = query.from_user
        
        try:
            chat_member = await context.bot.get_chat_member(chat_id, user.id)
            if chat_member.status not in ["administrator", "creator"]:
                await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–ø–∏–∫–∞!")
                return
        except:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞!")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
        await query.edit_message_text("üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É —Ç–æ–ø–∏–∫–∞...")
        
        # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–æ–¥—É –∏–∑ clear_topic_handler, –Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –¥–ª—è callback
