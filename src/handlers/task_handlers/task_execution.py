import pandas as pd
from datetime import datetime, timedelta
import datetime as dt
from telegram import Update
from telegram.ext import CallbackContext
from ...database.sql_client import SQL
from ...config.settings import MERCHANT_ID
from ...utils.task_utils import send_task_to_zs
from ...keyboards.opv_keyboards import get_photo_upload_keyboard, get_task_keyboard
from .special_task_completion import complete_special_task_directly
from .task_restoration import restore_frozen_task_if_needed


async def complete_task_inline(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É'"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    staff_id = context.user_data.get('staff_id')
    task = context.user_data.get('task')

    if not task:
        staff_id = context.user_data.get('staff_id')
        if not staff_id:
            await query.edit_message_text("‚ö†Ô∏è –í–∞—à ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã
        try:
            task_df = SQL.sql_select('wms', f"""
                SELECT id, task_name, product_group, slot, time_begin, task_duration, comment, provider, priority
                FROM wms_bot.shift_tasks
                WHERE user_id = '{staff_id}' AND status IN ('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ')
                AND merchant_code = '{MERCHANT_ID}'
                ORDER BY time_begin DESC LIMIT 1
            """)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        if task_df.empty:
            await query.edit_message_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
            return

        row = task_df.iloc[0]
        time_begin_value = row['time_begin']

        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø–∞—Ä—Å–∏–º –≤ time
        if isinstance(time_begin_value, str):
            time_begin_value = datetime.strptime(time_begin_value, '%H:%M:%S').time()

        # –ï—Å–ª–∏ —ç—Ç–æ time ‚Äî –∫–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π
        if isinstance(time_begin_value, dt.time):
            assigned_time = datetime.combine(datetime.today(), time_begin_value)
        else:
            assigned_time = pd.to_datetime(time_begin_value)

        now = datetime.now()

        task = {
            'task_id': row['id'],
            'task_name': row['task_name'],
            'product_group': row['product_group'],
            'slot': row['slot'],
            'provider': row.get('provider', '–ù–µ —É–∫–∞–∑–∞–Ω'),
            'assigned_time': assigned_time,
            'duration': row['task_duration'],
            'assigned_time': now,
            'priority': row.get('priority', '1')
        }
        context.user_data['task'] = task

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞–Ω–∏—è
    task_priority = task.get('priority', '1')
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 111) - –∑–∞–≤–µ—Ä—à–∞–µ–º –±–µ–∑ —Ñ–æ—Ç–æ
    if str(task_priority) == '111':
        await complete_special_task_directly(update, context, task)
        return

    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ
    if 'photos' not in context.user_data:
        context.user_data.update({'photo_request_time': datetime.now(), 'photos': []})
        reply_markup = get_photo_upload_keyboard()
        await query.edit_message_text(
            "üì∏ –°–¥–µ–ª–∞–π—Ç–µ –Ω–µ –±–æ–ª–µ–µ 3 —Ñ–æ—Ç–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É.\n\n"
            "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É'",
            reply_markup=reply_markup
        )
        return

    if not context.user_data['photos']:
        reply_markup = get_photo_upload_keyboard()
        await query.edit_message_text(
            "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É'",
            reply_markup=reply_markup
        )
        return

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    now = datetime.now()
    time_spent = now - task['assigned_time']

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        now_str = now.strftime('%Y-%m-%d %H:%M:%S')
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_tasks
            SET status = '–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏',
                time_end = '{now_str}'
            WHERE id = {task['task_id']}
        """)

        await query.edit_message_text("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–µ–¥—É—é—â–µ–º—É.")
        await send_task_to_zs(context, task, context.user_data['photos'])

        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop('task', None)
        context.user_data.pop('photos', None)
        context.user_data.pop('photo_request_time', None)
        context.user_data['late_warning_sent'] = False

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–µ–¥—É—é—â–µ–º—É.\n\n‚è≥ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –±—Ä–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ."
        )

    except Exception as e:
        error_message = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        await query.edit_message_text(error_message)


async def show_task(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()

    staff_id = context.user_data.get('staff_id')

    if not staff_id:
        await query.edit_message_text("‚ö†Ô∏è –í–∞—à ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await restore_frozen_task_if_needed(staff_id, context)

    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (–≤—ã–ø–æ–ª–Ω—è—é—â–∏–µ—Å—è)
    task_df = SQL.sql_select('wms', f"""
        SELECT id, task_name, product_group, slot, time_begin, task_duration, comment, status, provider
        FROM wms_bot.shift_tasks
        WHERE user_id = '{staff_id}' AND status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
        AND merchant_code = '{MERCHANT_ID}'
        ORDER BY time_begin DESC LIMIT 1
    """)

    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö, –∏—â–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ
    if task_df.empty:
        task_df = SQL.sql_select('wms', f"""
            SELECT id, task_name, product_group, slot, time_begin, task_duration, comment, status, provider
            FROM wms_bot.shift_tasks
            WHERE user_id = '{staff_id}' AND status = '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ'
            AND merchant_code = '{MERCHANT_ID}'
            ORDER BY time_begin DESC LIMIT 1
        """)

    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ, –∏—â–µ–º —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º 111
    if task_df.empty:
        task_df = SQL.sql_select('wms', f"""
            SELECT id, task_name, product_group, slot, time_begin, task_duration, comment, status, provider, priority
            FROM wms_bot.shift_tasks
            WHERE user_id = '{staff_id}' AND status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
            AND priority = '111'
            AND merchant_code = '{MERCHANT_ID}'
            ORDER BY time_begin DESC LIMIT 1
        """)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–π, –∏—â–µ–º –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ
    if task_df.empty:
        task_df = SQL.sql_select('wms', f"""
            SELECT id, task_name, product_group, slot, time_begin, task_duration, comment, status, provider, priority
            FROM wms_bot.shift_tasks
            WHERE user_id = '{staff_id}' AND status = '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ'
            AND merchant_code = '{MERCHANT_ID}'
            ORDER BY time_begin DESC LIMIT 1
        """)

    if task_df.empty:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return

    row = task_df.iloc[0]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if row['status'] == '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è':
        if row.get('priority') == '111':
            status_emoji = "üî•"
            status_text = "–°–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 111)"
        else:
            status_emoji = "‚ñ∂Ô∏è"
            status_text = "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
    elif row['status'] == '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ':
        status_emoji = "üîÑ"
        status_text = "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ"
    else:  # –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ
        status_emoji = "‚ùÑÔ∏è"
        status_text = "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ (–∏–∑-–∑–∞ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏—è)"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π
    task_info = (
        f"üìã *–¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ*\n\n"
        f"üÜî ID: `{row['id']}`\n"
        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: *{row['task_name']}*\n"
        f"üì¶ –ì—Ä—É–ø–ø–∞: {row['product_group']}\n"
        f"üìç –°–ª–æ—Ç: {row['slot']}\n"
        f"üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {row.get('provider', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {row['time_begin']}\n"
        f"‚è≥ –ü–ª–∞–Ω–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {row['task_duration']} –º–∏–Ω\n"
        f"{status_emoji} *–°—Ç–∞—Ç—É—Å:* {status_text}"
    )
    if "comment" in row and row["comment"]:
        task_info += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {row['comment']}"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∏ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ
    if row['status'] in ['–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ']:
        # –î–ª—è —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É
        if row.get('priority') == '111':
            from ...keyboards.opv_keyboards import get_special_task_keyboard
            await query.edit_message_text(task_info, parse_mode="Markdown", reply_markup=get_special_task_keyboard())
        else:
            await query.edit_message_text(task_info, parse_mode="Markdown", reply_markup=get_task_keyboard())
    else:
        # –î–ª—è –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        task_info += f"\n\n*‚ÑπÔ∏è –ó–∞–¥–∞–Ω–∏–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.*"
        await query.edit_message_text(task_info, parse_mode="Markdown")


async def complete_the_task(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–∫–æ–º–∞–Ω–¥–∞) - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    staff_id = context.user_data.get('staff_id')
    
    if not staff_id:
        await update.message.reply_text("‚ö†Ô∏è –í–∞—à ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã
    task_df = SQL.sql_select('wms', f"""
        SELECT id, task_name, product_group, slot, time_begin, task_duration, comment, provider, priority
        FROM wms_bot.shift_tasks
        WHERE user_id = '{staff_id}' AND status IN ('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ')
        AND merchant_code = '{MERCHANT_ID}'
        ORDER BY time_begin DESC LIMIT 1
    """)

    if task_df.empty:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
        return

    row = task_df.iloc[0]
    time_begin_value = row['time_begin']

    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø–∞—Ä—Å–∏–º –≤ time
    if isinstance(time_begin_value, str):
        time_begin_value = datetime.strptime(time_begin_value, '%H:%M:%S').time()

    # –ï—Å–ª–∏ —ç—Ç–æ time ‚Äî –∫–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π
    if isinstance(time_begin_value, dt.time):
        assigned_time = datetime.combine(datetime.today(), time_begin_value)
    else:
        assigned_time = pd.to_datetime(time_begin_value)

    now = datetime.now()

    task = {
        'task_id': row['id'],
        'task_name': row['task_name'],
        'product_group': row['product_group'],
        'slot': row['slot'],
        'provider': row.get('provider', '–ù–µ —É–∫–∞–∑–∞–Ω'),
        'assigned_time': assigned_time,
        'duration': row['task_duration'],
        'assigned_time': now,
        'priority': row.get('priority', '1')
    }
    context.user_data['task'] = task

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞–Ω–∏—è
    task_priority = task.get('priority', '1')
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 111) - –∑–∞–≤–µ—Ä—à–∞–µ–º –±–µ–∑ —Ñ–æ—Ç–æ
    if str(task_priority) == '111':
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback_query –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        class FakeCallbackQuery:
            def __init__(self, message):
                self.message = message
                self.data = None
            
            async def answer(self):
                pass
        
        fake_query = FakeCallbackQuery(update.message)
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç update —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º callback_query
        fake_update = type('FakeUpdate', (), {
            'callback_query': fake_query,
            'effective_user': update.effective_user
        })()
        
        await complete_special_task_directly(fake_update, context, task)
        return

    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ
    if 'photos' not in context.user_data:
        context.user_data.update({'photo_request_time': datetime.now(), 'photos': []})
        await update.message.reply_text(
            "üì∏ –°–¥–µ–ª–∞–π—Ç–µ –Ω–µ –±–æ–ª–µ–µ 3 —Ñ–æ—Ç–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É.\n\n"
            "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É'"
        )
        return

    if not context.user_data['photos']:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É'"
        )
        return

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—ã—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    now = datetime.now()
    time_spent = now - task['assigned_time']

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        now_str = now.strftime('%Y-%m-%d %H:%M:%S')
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_tasks
            SET status = '–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏',
                time_end = '{now_str}'
            WHERE id = {task['task_id']}
        """)

        await update.message.reply_text("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–µ–¥—É—é—â–µ–º—É.")
        await send_task_to_zs(context, task, context.user_data['photos'])

        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop('task', None)
        context.user_data.pop('photos', None)
        context.user_data.pop('photo_request_time', None)
        context.user_data['late_warning_sent'] = False

    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def receive_photo(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è"""
    staff_id = context.user_data.get('staff_id')
    now = datetime.now()

    if 'photo_request_time' not in context.user_data:
        await update.message.reply_text("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    time_passed = now - context.user_data['photo_request_time']
    is_late = time_passed > timedelta(minutes=180)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if 'photos' not in context.user_data:
        context.user_data['photos'] = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ
    if len(context.user_data['photos']) >= 3:   # –ª–∏–º–∏—Ç 3 —Ñ–æ—Ç–æ
        await update.message.reply_text("‚ö†Ô∏è –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 —Ñ–æ—Ç–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ç–æ
    if not update.message.photo:
        await update.message.reply_text("‚ùå –§–æ—Ç–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo_id = update.message.photo[-1].file_id
    context.user_data['photos'].append(photo_id)
    photo_num = len(context.user_data['photos'])

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    if 'progress_message' not in context.user_data:
        sent = await update.message.reply_text(f"üì∏ –§–æ—Ç–æ {photo_num}/3 –ø–æ–ª—É—á–µ–Ω–æ.")
        context.user_data['progress_message'] = sent.message_id
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            new_text = (
                f"üì∏ –§–æ—Ç–æ {photo_num}/3 –ø–æ–ª—É—á–µ–Ω–æ."
                if photo_num < 3 else
                f"üì∏ –§–æ—Ç–æ {photo_num}/3 –ø–æ–ª—É—á–µ–Ω–æ. ‚úÖ –í—Å–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!"
            )
            new_markup = get_task_keyboard() if photo_num == 3 else None
            
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=context.user_data['progress_message'],
                text=new_text,
                reply_markup=new_markup
            )
        except Exception as e:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            pass

    # ‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–æ–∑–¥–∞–Ω–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    if is_late and not context.user_data['late_warning_sent']:
        context.user_data['late_warning_sent'] = True
        await update.message.reply_text(
            "‚ö†Ô∏è –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é. –ó–° –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ."
        )
