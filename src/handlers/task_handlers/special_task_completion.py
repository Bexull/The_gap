import asyncio
import pandas as pd
from datetime import datetime, timedelta
import datetime as dt
from telegram import Update
from telegram.ext import CallbackContext
from ...database.sql_client import SQL
from ...config.settings import MERCHANT_ID
from ...utils.task_utils import parse_task_duration
from ...keyboards.opv_keyboards import get_task_keyboard
from .task_timer import update_timer
from .task_restoration import restore_frozen_task_if_needed


async def complete_special_task_directly(update: Update, context: CallbackContext, task: dict):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 111) –±–µ–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ
    """
    query = update.callback_query
    staff_id = context.user_data.get('staff_id')
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
    from ...config.settings import frozen_tasks_info
    
    try:
        now = datetime.now()
        now_str = now.strftime('%Y-%m-%d %H:%M:%S')
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_tasks
            SET status = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ',
                time_end = '{now_str}'
            WHERE id = {task['task_id']}
        """)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É—á–µ—Ç–∞ –≤ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        task_seconds = parse_task_duration(task['duration'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É
        current_worked = context.user_data.get('worked_seconds', 0)
        new_worked = current_worked + task_seconds
        context.user_data['worked_seconds'] = new_worked
        
        print(f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (—Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ): {current_worked}s + {task_seconds}s = {new_worked}s")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Ö
        frozen_task_df = SQL.sql_select('wms', f"""
            SELECT id, task_name, product_group, slot, task_duration, comment
            FROM wms_bot.shift_tasks
            WHERE user_id = '{staff_id}'
              AND status = '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ'
              AND time_end IS NULL
              AND merchant_code = '{MERCHANT_ID}'
            ORDER BY time_begin DESC LIMIT 1
        """)
        
        success_message = f"‚úÖ –°–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ ‚Ññ{task['task_id']} ({task['task_name']}) –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
        
        if not frozen_task_df.empty:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
            frozen_task = frozen_task_df.iloc[0]
            now_str = now.strftime('%Y-%m-%d %H:%M:%S')
            # –ü–æ–ª—É—á–∞–µ–º task_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ frozen_tasks_info
            frozen_task_id = int(frozen_task['id'])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º original_start_time –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            time_begin_to_use = now_str  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            if frozen_task_id in frozen_tasks_info and 'original_start_time' in frozen_tasks_info[frozen_task_id]:
                original_start_time = frozen_tasks_info[frozen_task_id]['original_start_time']
                if isinstance(original_start_time, datetime):
                    time_begin_to_use = original_start_time.strftime('%Y-%m-%d %H:%M:%S')
                    print(f"üîß [FIX] –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è {frozen_task_id}: {time_begin_to_use}")
                else:
                    print(f"‚ö†Ô∏è [WARNING] original_start_time –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è {frozen_task_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è datetime –æ–±—ä–µ–∫—Ç–æ–º: {type(original_start_time)}")
            else:
                print(f"‚ö†Ô∏è [WARNING] –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ original_start_time –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è {frozen_task_id}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
            
            SQL.sql_delete('wms', f"""
                UPDATE wms_bot.shift_tasks
                SET status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
                    time_begin = '{time_begin_to_use}'
                WHERE id = {frozen_task['id']}
            """)
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
                from ...utils.time_utils import align_seconds, seconds_to_hms
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
                task_data = {
                    'task_id': frozen_task['id'],
                    'task_name': frozen_task['task_name'],
                    'product_group': frozen_task['product_group'],
                    'slot': frozen_task['slot'],
                    'duration': frozen_task['task_duration']
                }
                
                # –ü–æ–ª—É—á–∞–µ–º task_id
                task_id = int(frozen_task['id'])
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ,
                # –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
                total_seconds = 0
                elapsed_seconds = 0
                
                if task_id in frozen_tasks_info:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
                    total_seconds = frozen_tasks_info[task_id].get('remaining_seconds', 0)
                    elapsed_seconds = frozen_tasks_info[task_id].get('elapsed_seconds', 0)
                    total_seconds = align_seconds(total_seconds, mode='ceil')
                    elapsed_seconds = align_seconds(elapsed_seconds, mode='round')

                    print(
                        f"üïí [RESTORE] task_id={task_id} after special elapsed={seconds_to_hms(elapsed_seconds)} remaining={seconds_to_hms(total_seconds)}"
                    )
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º–µ
                    full_duration = parse_task_duration(frozen_task['task_duration'])
                    total_seconds = full_duration
                
                # –ü–æ–ª—É—á–∞–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                opv_userid_df = SQL.sql_select('wms', f"""
                    SELECT userid FROM wms_bot.bot_auth WHERE employee_id = '{staff_id}'
                """)
                
                if not opv_userid_df.empty:
                    opv_user_id = int(opv_userid_df.iloc[0]['userid'])
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è
                    reply_markup = get_task_keyboard()
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
                    remaining_time = str(timedelta(seconds=total_seconds)).split('.')[0]
                    
                    # –ï—Å–ª–∏ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ 0, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
                    elapsed_info = ""
                    if elapsed_seconds > 0:
                        elapsed_time = str(timedelta(seconds=elapsed_seconds)).split('.')[0]
                        elapsed_info = f"\n‚è± *–£–∂–µ –∑–∞—Ç—Ä–∞—á–µ–Ω–æ:* {elapsed_time}"
                    
                    message = (
                        f"üìÑ *–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:* {frozen_task['id']}\n"
                        f"üîÑ *–ó–∞–¥–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ*\n\n"
                        f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {frozen_task['task_name']}\n"
                        f"üì¶ *–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤:* {frozen_task['product_group']}\n"
                        f"üìç *–°–ª–æ—Ç:* {frozen_task['slot']}\n"
                        f"‚è± *–í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:* {frozen_task['task_duration']}{elapsed_info}\n"
                        f"‚è≥ *–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:* {remaining_time}"
                    )
                    
                    if frozen_task['comment']:
                        message += f"\nüí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {frozen_task['comment']}"
                    
                    sent_msg = await context.bot.send_message(
                        chat_id=opv_user_id,
                        text=message,
                        parse_mode='Markdown',
                        reply_markup=reply_markup
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–∞–π–º–µ—Ä–∞
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                    from ...config.settings import active_timers
                    if task_id in active_timers:
                        print(f"‚ö†Ô∏è [WARNING] –¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫")
                    else:
                        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º total_seconds (remaining), –∞ –Ω–µ allocated_seconds
                        # total_seconds —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç remaining_seconds –∏–∑ frozen_tasks_info
                        allocated_seconds = frozen_tasks_info.get(task_id, {}).get('allocated_seconds', total_seconds)
                        asyncio.create_task(
                            update_timer(context, sent_msg.chat_id, sent_msg.message_id, task_data, total_seconds, reply_markup)
                        )
                        print(
                            f"üïí [RESTORE] timer restarted after special for task_id={task_id} remaining={seconds_to_hms(total_seconds)} allocated={seconds_to_hms(allocated_seconds)}"
                        )
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {e}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏—è
            await query.edit_message_text(
                f"{success_message}\n\n"
                f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{frozen_task['id']}\n"
                f"üìå {frozen_task['task_name']}\n\n"
                f"–¢–∞–π–º–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É"
            )
        else:
            # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await query.edit_message_text(success_message)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞–Ω–∏–∏ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        task_id = task['task_id']
        if task_id in frozen_tasks_info:
            del frozen_tasks_info[task_id]
            print(f"üßπ –£–¥–∞–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏ {task_id} –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop('task', None)
        context.user_data.pop('photos', None)
        context.user_data.pop('photo_request_time', None)
        context.user_data['late_warning_sent'] = False
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        await restore_frozen_task_if_needed(staff_id, context)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏—è: {e}")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
