import pandas as pd
from datetime import datetime, timedelta
import datetime as dt
from telegram import Update
from telegram.ext import CallbackContext
from ...database.sql_client import SQL
from ...utils.time_utils import get_current_slot, get_task_date
from ...config.settings import MERCHANT_ID
from ...utils.task_utils import check_user_task_status
from ...keyboards.opv_keyboards import get_sector_keyboard, get_task_in_progress_keyboard
from .task_timer import update_timer
from .task_execution import restore_frozen_task_if_needed


async def get_task(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    employee_id = context.user_data.get('staff_id')
    if not employee_id:
        await query.edit_message_text("‚ö†Ô∏è –í–∞—à ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await restore_frozen_task_if_needed(employee_id, context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    status_check = check_user_task_status(employee_id)
    if status_check['blocked']:
        reply_markup = status_check.get('reply_markup')
        await query.edit_message_text(status_check['message'], reply_markup=reply_markup)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä —Å–µ–∫—Ç–æ—Ä–∞
    if not context.user_data.get('sector_selected'):
        sectors_df = SQL.sql_select('stock', """SELECT DISTINCT "–°–µ–∫—Ç–æ—Ä" FROM public.task_schedule WHERE "–î–∞—Ç–∞" = current_date""")
        sectors = sectors_df['–°–µ–∫—Ç–æ—Ä'].dropna().tolist()
        
        reply_markup = get_sector_keyboard(sectors)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ç–æ—Ä, —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å:", reply_markup=reply_markup)
        return

    # –ï—Å–ª–∏ —Å–µ–∫—Ç–æ—Ä –≤—ã–±—Ä–∞–Ω - –Ω–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    await assign_task_from_sector(update, context)


async def assign_task_from_sector(update: Update, context: CallbackContext):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞"""
    query = update.callback_query
    await query.answer()

    employee_id = context.user_data.get('staff_id')
    sector = context.user_data.get('sector')
    shift = context.user_data.get('shift')

    if not all([employee_id, sector, shift]):
        await query.edit_message_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.")
        return

    try:
        print(f"üîé assign_task_from_sector: staff_id={employee_id}, sector={sector}, shift={shift}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status_check = check_user_task_status(employee_id)
        if status_check['blocked']:
            reply_markup = status_check.get('reply_markup')
            await query.edit_message_text(status_check['message'], reply_markup=reply_markup)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª
        gender_df = SQL.sql_select('wms', f"SELECT gender FROM wms_bot.t_staff WHERE id = '{employee_id}'")
        opv_gender = gender_df.iloc[0]['gender'].strip().upper() if not gender_df.empty else 'U'
        
        # –ü–æ–ª—É—á–∞–µ–º –§–ò–û –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        operator_full_name = context.user_data.get('staff_name', '–û–ü–í')

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º shift –≤ –Ω—É–∂–Ω—ã–π –≤–∏–¥
        shift_ru = '–î–µ–Ω—å' if shift == 'day' else '–ù–æ—á—å'

        task_date = get_task_date(shift)
        current_slot = get_current_slot(shift)
        if current_slot is None:
            await query.edit_message_text("‚è∞ –°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—Ç–∞.")
            return

        # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ shift_tasks
        sql_query = f"""
            SELECT * FROM wms_bot.shift_tasks
            WHERE task_date = '{task_date}'
              AND shift = '{shift_ru}'
              AND sector = '{sector}'
              AND slot = {current_slot}
              AND is_constant_task = true
              and merchant_code ='{MERCHANT_ID}'
              AND (status IS NULL OR status = '–í –æ–∂–∏–¥–∞–Ω–∏–∏')
        """
        # print("üîé SQL (assign_task_from_sector):", sql_query)
        task_df = SQL.sql_select('wms', sql_query)

        if task_df.empty:
            print("üîé –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:", {
                'task_date': str(task_date),
                'shift_ru': shift_ru,
                'sector': sector,
                'slot': current_slot,
                'merchant': MERCHANT_ID
            })
            # –î–æ–ø. –æ—Ç–ª–∞–¥–∫–∞: –∫–∞–∫–∏–µ –º–µ—Ä—á–∞–Ω—Ç—ã –µ—Å—Ç—å –ø–æ–¥ —ç—Ç–∏ —É—Å–ª–æ–≤–∏—è –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞
            dbg_merchants_sql = f"""
                SELECT merchant_code, COUNT(*) AS cnt
                FROM wms_bot.shift_tasks
                WHERE task_date = '{task_date}'
                  AND shift = '{shift_ru}'
                  AND sector = '{sector}'
                  AND slot = {current_slot}
                  AND is_constant_task = true
                GROUP BY merchant_code
                ORDER BY cnt DESC
            """
            try:
                dbg_df = SQL.sql_select('wms', dbg_merchants_sql)
                print("üîé Merchants under same constraints:", dbg_df.to_dict(orient='records') if hasattr(dbg_df, 'to_dict') else dbg_df)
                # –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å–ª–æ—Ç—É
                dbg_no_slot = f"""
                    SELECT merchant_code, slot, COUNT(*) cnt
                    FROM wms_bot.shift_tasks
                    WHERE task_date = '{task_date}'
                      AND shift = '{shift_ru}'
                      AND sector = '{sector}'
                      AND is_constant_task = true
                    GROUP BY merchant_code, slot
                    ORDER BY cnt DESC
                """
                dbg_no_slot_df = SQL.sql_select('wms', dbg_no_slot)
                print("üîé Merchants by slot (no slot filter):", dbg_no_slot_df.to_dict(orient='records') if hasattr(dbg_no_slot_df, 'to_dict') else dbg_no_slot_df)
                # –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å–µ–∫—Ç–æ—Ä—É
                dbg_no_sector = f"""
                    SELECT merchant_code, sector, COUNT(*) cnt
                    FROM wms_bot.shift_tasks
                    WHERE task_date = '{task_date}'
                      AND shift = '{shift_ru}'
                      AND slot = {current_slot}
                      AND is_constant_task = true
                    GROUP BY merchant_code, sector
                    ORDER BY cnt DESC
                """
                dbg_no_sector_df = SQL.sql_select('wms', dbg_no_sector)
                print("üîé Merchants by sector (no sector filter):", dbg_no_sector_df.to_dict(orient='records') if hasattr(dbg_no_sector_df, 'to_dict') else dbg_no_sector_df)
                # –°–≤–æ–¥–∫–∞ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Å–º–µ–Ω–∞–º –¥–ª—è 5001
                dbg_shifts_5001 = f"""
                    SELECT shift, COUNT(*) cnt
                    FROM wms_bot.shift_tasks
                    WHERE task_date = '{task_date}'
                      AND merchant_code = '{MERCHANT_ID}'
                    GROUP BY shift
                """
                dbg_shifts_df = SQL.sql_select('wms', dbg_shifts_5001)
                print("üîé Shifts present for merchant:", dbg_shifts_df.to_dict(orient='records') if hasattr(dbg_shifts_df, 'to_dict') else dbg_shifts_df)
            except Exception as e:
                print("‚ö†Ô∏è Debug merchants query failed:", e)
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–ª—É
        task_df = task_df[
            (task_df['gender'].isnull()) |
            (task_df['gender'].str.upper() == 'U') |
            (task_df['gender'].str.upper() == opv_gender)
        ]

        if task_df.empty:
            await query.edit_message_text("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ –ø–æ–ª—É –∑–∞–¥–∞–Ω–∏–π.")
            return

        # –ë–µ—Ä—ë–º –∑–∞–¥–∞–Ω–∏–µ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        task_row = task_df.sort_values('priority').iloc[0]
        now = datetime.now()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è + –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        employment_type = context.user_data.get('employment_type', 'main')
        now_str = now.strftime('%Y-%m-%d %H:%M:%S')
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_tasks
            SET status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
                user_id = '{employee_id}',
                time_begin = '{now_str}',
                part_time = '{employment_type}',
                operator_name = '{operator_full_name}'
            WHERE id = {task_row['id']}
        """)

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        try:
            duration_raw = task_row['task_duration']

            if isinstance(duration_raw, dt.time):
                total_seconds = duration_raw.hour * 3600 + duration_raw.minute * 60 + duration_raw.second
            else:
                time_str = str(duration_raw).strip()
                t = datetime.strptime(time_str, '%H:%M:%S')
                total_seconds = t.hour * 3600 + t.minute * 60 + t.second

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ task_duration: {e}")
            total_seconds = 900  # –¥–µ—Ñ–æ–ª—Ç 15 –º–∏–Ω –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        task = {
            'task_id': task_row['id'],
            'task_name': task_row['task_name'],
            'product_group': task_row['product_group'],
            'slot': task_row['slot'],
            'provider': task_row.get('provider', '–ù–µ —É–∫–∞–∑–∞–Ω'),
            'duration': task_row['task_duration'],
            'assigned_time': now
        }
        context.user_data['task'] = task
        context.user_data.pop('photos', None)
        context.user_data.pop('photo_request_time', None)
        context.user_data['late_warning_sent'] = False

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º
        message = (
            f"üìÑ *–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:* {task_row['id']}\n"
            f"‚úÖ *–ó–∞–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!*\n\n"
            f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {task_row['task_name']}\n"
            f"üì¶ *–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤:* {task_row.get('product_group', '‚Äî')}\n"
            f"üìç *–°–ª–æ—Ç:* {task_row['slot']}\n"
            f"üè¢ *–ü–æ—Å—Ç–∞–≤—â–∏–∫:* {task_row.get('provider', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"‚è± *–í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:* {str(timedelta(seconds=total_seconds))}\n"
            f"‚è≥ *–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:* {str(timedelta(seconds=total_seconds))}"
        )

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        comment = task_row.get('comment')
        if comment and str(comment).strip():
            message += f"\nüí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"
        reply_markup = get_task_in_progress_keyboard()
        sent_msg = await query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)

        # üí•üí•üí• –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä!
        import asyncio
        asyncio.create_task(
            update_timer(context, sent_msg.chat_id, sent_msg.message_id, task, total_seconds, reply_markup)
        )

    except Exception as e:
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.")
