import asyncio
import pandas as pd
from datetime import datetime, timedelta
import datetime as dt
from telegram import Update
from telegram.ext import CallbackContext
from ...database.sql_client import SQL
from ...config.settings import MERCHANT_ID
from ...utils.task_utils import parse_task_duration
from ...utils.time_utils import seconds_to_hms
from ...utils.freeze_time_utils import read_freeze_time
from ...keyboards.opv_keyboards import get_task_keyboard
from .task_timer import update_timer


async def restore_frozen_task_if_needed(staff_id: str, context: CallbackContext = None, send_message: bool = False):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–π
    
    Args:
        staff_id: ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        bool: True –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        special_task_df = SQL.sql_select('wms', f"""
            SELECT id FROM wms_bot.shift_tasks
            WHERE user_id = '{staff_id}'
              AND status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
              AND priority = '111'
              AND merchant_code = '{MERCHANT_ID}'
        """)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏—è - –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        if not special_task_df.empty:
            return False
        
        # –ò—â–µ–º –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
        frozen_task_df = SQL.sql_select('wms', f"""
            SELECT id, task_name, product_group, slot, task_duration, comment, user_id
            FROM wms_bot.shift_tasks
            WHERE user_id = '{staff_id}'
              AND status IN ('–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ', '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ')
              AND merchant_code = '{MERCHANT_ID}'
            ORDER BY time_begin DESC LIMIT 1
        """)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ (–¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö ID)
        if frozen_task_df.empty:
            try:
                staff_id_int = int(staff_id)
                frozen_task_df = SQL.sql_select('wms', f"""
                    SELECT id, task_name, product_group, slot, task_duration, comment, user_id
                    FROM wms_bot.shift_tasks
                    WHERE user_id = {staff_id_int}
                      AND status IN ('–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ', '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ')
                      AND merchant_code = '{MERCHANT_ID}'
                    ORDER BY time_begin DESC LIMIT 1
                """)
            except ValueError:
                pass
        
        if frozen_task_df.empty:
            return False
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        frozen_task = frozen_task_df.iloc[0]
        now = datetime.now()
        now_str = now.strftime('%Y-%m-%d %H:%M:%S')
        task_id = int(frozen_task['id'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è –Ω–∞ "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è" –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º time_begin
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_tasks
            SET status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
                time_begin = '{now_str}'
            WHERE id = {task_id}
        """)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if send_message and context:
            try:
                # –ü–æ–ª—É—á–∞–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                opv_userid_df = SQL.sql_select('wms', f"""
                    SELECT userid FROM wms_bot.bot_auth WHERE employee_id = '{staff_id}'
                """)
                
                if not opv_userid_df.empty:
                    opv_user_id = int(opv_userid_df.iloc[0]['userid'])
                    
                    # –ü–æ–ª—É—á–∞–µ–º task_id
                    task_id = int(frozen_task['id'])
                    
                    # 1. –ß–∏—Ç–∞–µ–º elapsed –∏–∑ –ë–î
                    elapsed_seconds = read_freeze_time(task_id)
                    
                    # 2. –í—ã—á–∏—Å–ª—è–µ–º remaining
                    allocated_seconds = parse_task_duration(frozen_task['task_duration'])
                    remaining_seconds = max(0, allocated_seconds - elapsed_seconds)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞–Ω–∏—è
                    reply_markup = get_task_keyboard()
                    
                    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏
                    message = (
                        f"üìã *–¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ*\n\n"
                        f"üÜî ID: `{frozen_task['id']}`\n"
                        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: *{frozen_task['task_name']}*\n"
                        f"üì¶ –ì—Ä—É–ø–ø–∞: {frozen_task['product_group']}\n"
                        f"üìç –°–ª–æ—Ç: {frozen_task['slot']}\n"
                        f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {now.strftime('%H:%M:%S')}\n"
                        f"‚è± –ü–ª–∞–Ω–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {frozen_task['task_duration']} –º–∏–Ω\n"
                        f"‚è≥ –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: {seconds_to_hms(remaining_seconds)}"
                    )
                    
                    if elapsed_seconds > 0:
                        message += f"\n‚è± –£–∂–µ –∑–∞—Ç—Ä–∞—á–µ–Ω–æ: {seconds_to_hms(elapsed_seconds)}"
                    
                    message += f"\n‚ñ∂Ô∏è –°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
                    
                    if frozen_task['comment']:
                        message += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {frozen_task['comment']}"
                    
                    sent_msg = await context.bot.send_message(
                        chat_id=opv_user_id,
                        text=message,
                        parse_mode='Markdown',
                        reply_markup=reply_markup
                    )
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
                    task_data = {
                        'task_id': frozen_task['id'],
                        'task_name': frozen_task['task_name'],
                        'product_group': frozen_task['product_group'],
                        'slot': frozen_task['slot'],
                        'duration': frozen_task['task_duration']
                    }
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                    from ...config.settings import active_timers
                    if task_id in active_timers:
                        print(f"‚ö†Ô∏è [WARNING] –¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫")
                    else:
                        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
                        asyncio.create_task(
                            update_timer(context, sent_msg.chat_id, sent_msg.message_id, task_data, allocated_seconds, reply_markup)
                        )
                    
            except Exception as e:
                pass
                    
        return True
        
    except Exception as e:
        return False
