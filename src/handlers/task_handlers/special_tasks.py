import asyncio
import pandas as pd
from datetime import datetime, timedelta
import datetime as dt
from telegram import Update
from telegram.ext import CallbackContext, ContextTypes
from ...database.sql_client import SQL
from ...config.settings import MERCHANT_ID
from ...utils.task_utils import parse_task_duration
from ...keyboards.opv_keyboards import get_special_task_keyboard, get_task_keyboard
from .task_timer import update_timer


async def complete_special_task_inline(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    await query.answer()
    
    staff_id = context.user_data.get('staff_id')
    if not staff_id:
        await query.edit_message_text("‚ö†Ô∏è –í–∞—à ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ
    extra_task_df = SQL.sql_select('wms', f"""
        SELECT id, task_name, time_begin
        FROM wms_bot.shift_tasks
        WHERE user_id = '{staff_id}'
          AND status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
          AND time_end IS NULL
          AND priority = '111'
          AND merchant_code = '{MERCHANT_ID}'
        ORDER BY time_begin DESC LIMIT 1
    """)

    if extra_task_df.empty:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–π.")
        return

    task = extra_task_df.iloc[0]
    now = datetime.now()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É—á–µ—Ç–∞ –≤ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    task_duration_df = SQL.sql_select('wms', f"""
        SELECT task_duration FROM wms_bot.shift_tasks WHERE id = {task['id']} AND merchant_code = '{MERCHANT_ID}'
    """)
    
    if not task_duration_df.empty:
        duration_raw = task_duration_df.iloc[0]['task_duration']
        task_seconds = parse_task_duration(duration_raw)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É
        current_worked = context.user_data.get('worked_seconds', 0)
        new_worked = current_worked + task_seconds
        context.user_data['worked_seconds'] = new_worked
        
        print(f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (—Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ): {current_worked}s + {task_seconds}s = {new_worked}s")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ
    now_str = now.strftime('%Y-%m-%d %H:%M:%S')
    SQL.sql_delete('wms', f"""
        UPDATE wms_bot.shift_tasks
        SET status = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ',
            time_end = '{now_str}'
        WHERE id = {task['id']}
    """)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Ö
    frozen_task_df = SQL.sql_select('wms', f"""
        SELECT id, task_name, product_group, slot, task_duration, comment
        FROM wms_bot.shift_tasks
        WHERE user_id = '{staff_id}'
          AND status = '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ'
          AND time_end IS NULL
          AND merchant_code = '{MERCHANT_ID}'
        ORDER BY time_begin DESC LIMIT 1
    """)

    success_message = f"‚úÖ –°–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ ‚Ññ{task['id']} ({task['task_name']}) –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"

    if not frozen_task_df.empty:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        frozen_task = frozen_task_df.iloc[0]
        now_str = now.strftime('%Y-%m-%d %H:%M:%S')
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_tasks
            SET status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
                time_begin = '{now_str}'
            WHERE id = {frozen_task['id']}
        """)
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
            task_data = {
                'task_id': frozen_task['id'],
                'task_name': frozen_task['task_name'],
                'product_group': frozen_task['product_group'],
                'slot': frozen_task['slot'],
                'duration': frozen_task['task_duration']
            }
            
            # –ü–æ–ª—É—á–∞–µ–º task_id
            task_id = frozen_task['id']
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
            from ...utils.task_utils import get_task_remaining_time
            total_seconds, elapsed_seconds = get_task_remaining_time(task_id, frozen_task['task_duration'])
            
            # –ü–æ–ª—É—á–∞–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            opv_userid_df = SQL.sql_select('wms', f"""
                SELECT userid FROM wms_bot.bot_auth WHERE employee_id = '{staff_id}'
            """)
            
            if not opv_userid_df.empty:
                opv_user_id = int(opv_userid_df.iloc[0]['userid'])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è
                reply_markup = get_task_keyboard()
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–∏
                from ...utils.task_utils import format_task_time_info
                remaining_time, elapsed_info = format_task_time_info(total_seconds, elapsed_seconds)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Markdown
                if elapsed_info:
                    elapsed_info = elapsed_info.replace("–£–∂–µ –∑–∞—Ç—Ä–∞—á–µ–Ω–æ:", "*–£–∂–µ –∑–∞—Ç—Ä–∞—á–µ–Ω–æ:*")
                
                message = (
                    f"üìÑ *–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:* {frozen_task['id']}\n"
                    f"üîÑ *–ó–∞–¥–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ*\n\n"
                    f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {frozen_task['task_name']}\n"
                    f"üì¶ *–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤:* {frozen_task['product_group']}\n"
                    f"üìç *–°–ª–æ—Ç:* {frozen_task['slot']}\n"
                    f"‚è± *–í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:* {frozen_task['task_duration']}{elapsed_info}\n"
                    f"‚è≥ *–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:* {remaining_time}"
                )
                
                if frozen_task['comment']:
                    message += f"\nüí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {frozen_task['comment']}"
                
                sent_msg = await context.bot.send_message(
                    chat_id=opv_user_id,
                    text=message,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                from ...config.settings import active_timers
                
                task_id = frozen_task['id']
                if task_id in active_timers:
                    print(f"‚ö†Ô∏è [WARNING] –¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ special_tasks, –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
                else:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
                    asyncio.create_task(
                        update_timer(context, sent_msg.chat_id, sent_msg.message_id, task_data, total_seconds, reply_markup)
                    )
                
        except Exception as e:
            pass

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏—è
        await query.edit_message_text(
            f"{success_message}\n\n"
            f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{frozen_task['id']}\n"
            f"üìå {frozen_task['task_name']}\n\n"
            f"–¢–∞–π–º–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É"
        )
    else:
        # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        await query.edit_message_text(success_message)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
    from .task_restoration import restore_frozen_task_if_needed
    await restore_frozen_task_if_needed(staff_id, context, send_message=True)


async def complete_the_extra_task(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (priority = 111) - –∫–æ–º–∞–Ω–¥–∞"""
    staff_id = context.user_data.get('staff_id')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–æ–ø. –∑–∞–¥–∞–Ω–∏–µ
    extra_task_df = SQL.sql_select('wms', f"""
        SELECT id, task_name, time_begin
        FROM wms_bot.shift_tasks
        WHERE user_id = '{staff_id}'
          AND status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
          AND time_end IS NULL
          AND priority = '111'
          AND merchant_code = '{MERCHANT_ID}'
        ORDER BY time_begin DESC LIMIT 1
    """)

    if extra_task_df.empty:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return

    task = extra_task_df.iloc[0]
    now = datetime.now()

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    now_str = now.strftime('%Y-%m-%d %H:%M:%S')
    SQL.sql_delete('wms', f"""
        UPDATE wms_bot.shift_tasks
        SET status = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ',
            time_end = '{now_str}'
        WHERE id = {task['id']}
    """)

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏—è
    from .task_restoration import restore_frozen_task_if_needed
    await restore_frozen_task_if_needed(staff_id, context)
    
    await update.message.reply_text(
        f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{task['id']} ({task['task_name']}) –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    )


async def set_special_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /set –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏—è (–¢–ï–°–¢–û–í–ê–Ø)"""
    
    staff_id = context.user_data.get('staff_id')
    
    if not staff_id:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        from .auto_special_task_handler import auto_assign_special_task
        
        result = await auto_assign_special_task(staff_id, context)
        
        if not result['success']:
            await update.message.reply_text(f"‚ùå {result['error']}")
            return
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        await update.message.reply_text("‚úÖ –°–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ set_special_task: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏—è")
