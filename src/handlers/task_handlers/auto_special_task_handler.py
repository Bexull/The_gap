import pandas as pd
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import CallbackContext
from ...database.sql_client import SQL
from ...config.settings import MERCHANT_ID
from ...keyboards.opv_keyboards import get_special_task_keyboard
from .task_timer import stop_timer


async def handle_special_task_assignment(staff_id: str, special_task_id: int, context: CallbackContext = None):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏—è
    
    Args:
        staff_id: ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        special_task_id: ID —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö
    """
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_tasks_query = f"""
            SELECT id, task_name, status
            FROM wms_bot.shift_tasks
            WHERE user_id = '{staff_id}'
              AND status IN ('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ')
              AND merchant_code = '{MERCHANT_ID}'
        """
        
        active_tasks_df = SQL.sql_select('wms', active_tasks_query)
        
        frozen_tasks_list = []
        
        if not active_tasks_df.empty:
            # 2. –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            from ...utils.freeze_time_utils import update_freeze_time_on_pause
            
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º freeze_time –∏ —Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ"
            for _, task in active_tasks_df.iterrows():
                task_id = int(task['id'])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º freeze_time (–Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º time_begin)
                update_freeze_time_on_pause(task_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                SQL.sql_delete('wms', f"""
                    UPDATE wms_bot.shift_tasks
                    SET status = '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ'
                    WHERE id = {task_id}
                """)
                
            # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É, –¥–µ–ª–∞–µ–º –æ–±—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            check_query = f"""
                SELECT COUNT(*) as count
                FROM wms_bot.shift_tasks
                WHERE user_id = '{staff_id}'
                  AND status IN ('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ')
                  AND merchant_code = '{MERCHANT_ID}'
            """
            
            remaining_tasks = SQL.sql_select('wms', check_query)
            if not remaining_tasks.empty and remaining_tasks.iloc[0]['count'] > 0:
                from ...utils.freeze_time_utils import update_freeze_time_on_pause
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞–Ω–∏—è
                remaining_tasks_df = SQL.sql_select('wms', f"""
                    SELECT id
                    FROM wms_bot.shift_tasks
                    WHERE user_id = '{staff_id}'
                      AND status IN ('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ')
                      AND merchant_code = '{MERCHANT_ID}'
                """)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                for _, task in remaining_tasks_df.iterrows():
                    task_id = int(task['id'])
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º freeze_time (–Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º time_begin)
                    update_freeze_time_on_pause(task_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                freeze_query = f"""
                    UPDATE wms_bot.shift_tasks
                    SET status = '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ'
                    WHERE user_id = '{staff_id}'
                      AND status IN ('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ')
                      AND merchant_code = '{MERCHANT_ID}'
                """
                
                SQL.sql_delete('wms', freeze_query)
            
            # 3. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–º–æ—Ä–æ–∑–∫–µ
            for _, task in active_tasks_df.iterrows():
                task_id = int(task['id'])
                task_name = task.get('task_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ')
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                try:
                    from ...config.settings import active_timers
                    if task_id in active_timers:
                        await stop_timer(task_id)
                except Exception as e:
                    pass
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–º–æ—Ä–æ–∑–∫–µ –í–°–ï–ì–î–ê
                try:
                    opv_userid_df = SQL.sql_select('wms', f"""
                        SELECT userid FROM wms_bot.bot_auth WHERE employee_id = '{staff_id}'
                    """)
                    
                    if not opv_userid_df.empty:
                        opv_user_id = int(opv_userid_df.iloc[0]['userid'])
                        
                        await context.bot.send_message(
                            chat_id=opv_user_id,
                            text=(
                                f"‚ùÑÔ∏è *–ó–∞–¥–∞–Ω–∏–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ!*\n\n"
                                f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {task_name}\n"
                                f"üìã *ID –∑–∞–¥–∞–Ω–∏—è:* {task_id}\n\n"
                                f"–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ –∏–∑-–∑–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏—è.\n"
                                f"–í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –µ–≥–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏—è."
                            ),
                            parse_mode='Markdown'
                        )
                except Exception as notify_error:
                    pass
                
                frozen_tasks_list.append({
                    'id': task['id'],
                    'name': task['task_name'],
                    'status': task['status']
                })
        
        # 5. –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ
        now = datetime.now()
        now_str = now.strftime('%Y-%m-%d %H:%M:%S')
        
        # –ü–æ–ª—É—á–∞–µ–º –§–ò–û –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ë–î
        operator_name_df = SQL.sql_select('wms', f"SELECT concat(name, ' ', surname) AS fio FROM wms_bot.t_staff WHERE id = '{staff_id}'")
        operator_full_name = operator_name_df.iloc[0]['fio'] if not operator_name_df.empty else '–û–ü–í'
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –æ—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–Ω–∞—Å–ª–µ–¥—É–µ–º)
        employment_type = 'main'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Å–Ω–æ–≤–Ω–∞—è —Å–º–µ–Ω–∞
        try:
            # –ò—â–µ–º –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–µ—Ä–µ–º –µ–≥–æ part_time
            frozen_task_df = SQL.sql_select('wms', f"""
                SELECT part_time 
                FROM wms_bot.shift_tasks 
                WHERE user_id = '{staff_id}' 
                  AND status IN ('–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ', '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ')
                  AND merchant_code = '{MERCHANT_ID}'
                  AND part_time IS NOT NULL
                ORDER BY time_begin DESC LIMIT 1
            """)
            if hasattr(frozen_task_df, 'empty') and not frozen_task_df.empty and len(frozen_task_df) > 0:
                employment_type = frozen_task_df.iloc[0]['part_time'] or 'main'
            else:
                pass
        except Exception as e:
            pass
        
        assign_query = f"""
            UPDATE wms_bot.shift_tasks
            SET status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
                user_id = '{staff_id}',
                time_begin = '{now_str}',
                freeze_time = '00:00:00',
                part_time = '{employment_type}',
                operator_name = '{operator_full_name}'
            WHERE id = {special_task_id}
        """
        
        SQL.sql_delete('wms', assign_query)
        
        # 6. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        special_task_info = get_special_task_info(special_task_id)
        
        # 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–∏ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç)
        if context and special_task_info:
            await send_special_task_notification(context, special_task_info)
        
        return {
            'success': True,
            'frozen_tasks': frozen_tasks_list,
            'special_task': special_task_info
        }
        
    except Exception as e:
        return {
            'success': False,
            'error': str(e),
            'frozen_tasks': [],
            'special_task': None
        }


async def send_freeze_notification(context: CallbackContext, frozen_tasks_info: list):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–º–æ—Ä–æ–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π"""
    try:
        if not frozen_tasks_info:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        staff_id = context.user_data.get('staff_id')
        if not staff_id:
            return
        
        opv_userid_df = SQL.sql_select('wms', f"""
            SELECT userid FROM wms_bot.bot_auth WHERE employee_id = '{staff_id}'
        """)
        
        if opv_userid_df.empty:
            return
        
        opv_user_id = int(opv_userid_df.iloc[0]['userid'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        tasks_list = []
        for task in frozen_tasks_info:
            tasks_list.append(f"‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task['id']}: {task['name']}")
        
        freeze_message = (
            f"‚ùÑÔ∏è *–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã*\n\n"
            f"{chr(10).join(tasks_list)}\n\n"
            f"‚è∏Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É.\n"
            f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–Ω–µ—Ç—Å—è —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏—è."
        )
        
        await context.bot.send_message(
            chat_id=opv_user_id,
            text=freeze_message,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        pass


async def send_special_task_notification(context: CallbackContext, special_task_info: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        staff_id = context.user_data.get('staff_id')
        if not staff_id:
            return
        
        opv_userid_df = SQL.sql_select('wms', f"""
            SELECT userid FROM wms_bot.bot_auth WHERE employee_id = '{staff_id}'
        """)
        
        if opv_userid_df.empty:
            return
        
        opv_user_id = int(opv_userid_df.iloc[0]['userid'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–∏
        duration = special_task_info.get('task_duration', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        if duration and hasattr(duration, 'strftime'):
            duration = duration.strftime('%H:%M')
        
        message_text = (
            f"üìå *–ù–∞ –í–∞—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ!*\n\n"
            f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {special_task_info.get('task_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üì¶ *–ì—Ä—É–ø–ø–∞:* {special_task_info.get('product_group', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìç *–°–ª–æ—Ç:* {special_task_info.get('slot', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚è∞ *–í—Ä–µ–º—è:* {duration} –º–∏–Ω\n\n"
            f"*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 111* - –∑–∞–¥–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ó–°"
        )
        
        await context.bot.send_message(
            chat_id=opv_user_id,
            text=message_text,
            parse_mode='Markdown',
            reply_markup=get_special_task_keyboard()
        )
        
    except Exception as e:
        pass


def get_special_task_info(special_task_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–∏"""
    try:
        task_df = SQL.sql_select('wms', f"""
            SELECT id, task_name, product_group, slot, task_duration
            FROM wms_bot.shift_tasks
            WHERE id = {special_task_id}
        """)
        
        if not task_df.empty:
            return task_df.iloc[0].to_dict()
        return {}
        
    except Exception as e:
        return {}


async def auto_assign_special_task(staff_id: str, context: CallbackContext = None):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        staff_id: ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    """
    try:
        # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ
        special_task_query = f"""
            SELECT id, task_name, product_group, slot, task_duration, gender
            FROM wms_bot.shift_tasks
            WHERE priority = '111'
              AND status = '–í –æ–∂–∏–¥–∞–Ω–∏–∏'
              AND merchant_code = '{MERCHANT_ID}'
            LIMIT 1
        """
        
        special_task_df = SQL.sql_select('wms', special_task_query)
        
        
        if special_task_df.empty:
            return {
                'success': False,
                'error': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–π —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º 111',
                'frozen_tasks': [],
                'special_task': None
            }
        
        special_task = special_task_df.iloc[0]
        special_task_id = special_task['id']
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
        return await handle_special_task_assignment(staff_id, special_task_id, context)
        
    except Exception as e:
        return {
            'success': False,
            'error': str(e),
            'frozen_tasks': [],
            'special_task': None
        }
