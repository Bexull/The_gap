import asyncio
from datetime import datetime, timedelta
from telegram.ext import CallbackContext
from ...database.sql_client import SQL
from ...config.settings import active_timers, MERCHANT_ID


async def update_timer(context, chat_id, message_id, task, total_seconds, reply_markup=None, comment=None):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–π–º–µ—Ä–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    active_timers[task['task_id']] = {
        'chat_id': chat_id,
        'message_id': message_id,
        'task': task,
        'total_seconds': total_seconds,
        'reply_markup': reply_markup
    }
    
    for remaining in range(total_seconds, -1, -15):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è –≤ –ë–î
            task_status_df = SQL.sql_select('wms', f"""
                SELECT status FROM wms_bot.shift_tasks 
                WHERE id = {task['task_id']} AND merchant_code = '{MERCHANT_ID}'
            """)
            
            if task_status_df.empty:
                break
                
            current_status = task_status_df.iloc[0]['status']
            
            # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if current_status == '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ':
                message = (
                    f"üìÑ *–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:* {task['task_id']}\n"
                    f"‚ùÑÔ∏è *–ó–∞–¥–∞–Ω–∏–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ*\n\n"
                    f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {task['task_name']}\n"
                    f"üì¶ *–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤:* {task.get('product_group', '‚Äî')}\n"
                    f"üìç *–°–ª–æ—Ç:* {task.get('slot', '‚Äî')}\n"
                    f"üè¢ *–ü–æ—Å—Ç–∞–≤—â–∏–∫:* {task.get('provider', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"‚è± *–í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:* {task['duration']}\n"
                    f"‚è∏Ô∏è *–¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*\n\n"
                    f"*‚ÑπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å*"
                )
                
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=message,
                    parse_mode='Markdown'
                )
                
                # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                active_timers.pop(task['task_id'], None)
                break
            
            # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏–ª–∏ –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            if current_status not in ['–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ']:
                active_timers.pop(task['task_id'], None)
                break

            minutes = remaining // 60
            seconds = remaining % 60
            remaining_str = f"{minutes:02d}:{seconds:02d}"

            message = (
                f"üìÑ *–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:* {task['task_id']}\n"
                f"‚úÖ *–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è*\n\n"
                f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {task['task_name']}\n"
                f"üì¶ *–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤:* {task.get('product_group', '‚Äî')}\n"
                f"üìç *–°–ª–æ—Ç:* {task.get('slot', '‚Äî')}\n"
                f"üè¢ *–ü–æ—Å—Ç–∞–≤—â–∏–∫:* {task.get('provider', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"‚è± *–í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:* {task['duration']}\n"
                f"‚è≥ *–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:* {remaining_str}"
            )

            if comment and str(comment).strip():
                message += f"\nüí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment}"

            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )

            await asyncio.sleep(15)
        except Exception as e:
            break
    
    # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    active_timers.pop(task['task_id'], None)


async def stop_timer_for_task(task_id: int, context, reason: str = "–∑–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    
    if task_id in active_timers:
        timer_info = active_timers[task_id]
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞
            await context.bot.edit_message_text(
                chat_id=timer_info['chat_id'],
                message_id=timer_info['message_id'],
                text=(
                    f"üìÑ *–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:* {task_id}\n"
                    f"‚èπÔ∏è *–¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*\n\n"
                    f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {timer_info['task']['task_name']}\n"
                    f"üì¶ *–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤:* {timer_info['task'].get('product_group', '‚Äî')}\n"
                    f"üìç *–°–ª–æ—Ç:* {timer_info['task'].get('slot', '‚Äî')}\n"
                    f"üè¢ *–ü–æ—Å—Ç–∞–≤—â–∏–∫:* {timer_info['task'].get('provider', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"‚è± *–í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:* {timer_info['task']['duration']}\n"
                    f"‚è∏Ô∏è *–ü—Ä–∏—á–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:* {reason}"
                ),
                parse_mode='Markdown'
            )
        except Exception as e:
            pass
        
        # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        active_timers.pop(task_id, None)
