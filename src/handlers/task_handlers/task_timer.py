import asyncio
from datetime import datetime, timedelta
from ...database.sql_client import SQL
from ...config.settings import active_timers, MERCHANT_ID, task_time_tracker, frozen_tasks_info
from ...utils.time_utils import seconds_to_hms, align_seconds, TIMER_TICK_SECONDS
from ...utils.freeze_time_utils import accumulate_freeze_time, read_freeze_time


_TRACKER_INTERVAL_SECONDS = 15
_tracker_loop_task = None


def _ensure_tracker_loop():
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""

    global _tracker_loop_task

    if _tracker_loop_task is None or _tracker_loop_task.done():
        _tracker_loop_task = asyncio.create_task(_time_tracker_loop())


def _cleanup_task_tracking(task_id: int, keep_frozen: bool = False):
    """–£–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è"""

    tracker_entry = task_time_tracker.pop(task_id, None)

    if not keep_frozen:
        frozen_tasks_info.pop(task_id, None)

    # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–π –ª—É–ø
    global _tracker_loop_task
    if not task_time_tracker and _tracker_loop_task is not None and not _tracker_loop_task.done():
        _tracker_loop_task.cancel()

    return tracker_entry


async def update_timer(context, chat_id, message_id, task, total_seconds, reply_markup=None, comment=None):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º —Ç—Ä–µ–∫–µ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏"""

    task_id = task['task_id']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    if task_id in active_timers:
        print(f"‚ö†Ô∏è [WARNING] –¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
        return

    _ensure_tracker_loop()

    now = datetime.now()
    allocated_seconds = int(total_seconds)

    # 1. –ß–∏—Ç–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ –ë–î (–µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã!)
    previous_elapsed = read_freeze_time(task_id)
    
    # 2. –°–æ–∑–¥–∞–µ–º tracker –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0)
    task_time_tracker[task_id] = {
        'elapsed_seconds': 0.0,  # –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0!
        'allocated_seconds': allocated_seconds,
        'previous_elapsed': previous_elapsed,  # –•—Ä–∞–Ω–∏–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
        'last_tick': now,
        'original_start_time': now,
        'remaining_seconds': allocated_seconds - previous_elapsed
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–µ–¥–µ–Ω–∏—è –¥–ª—è UI
    active_timers[task_id] = {
        'chat_id': chat_id,
        'message_id': message_id,
        'task': task,
        'allocated_seconds': allocated_seconds,
        'reply_markup': reply_markup,
        'comment': comment,
        'last_rendered_remaining': None
    }

    # 3. –ó–∞–ø—É—Å–∫–∞–µ–º render loop
    asyncio.create_task(_render_timer_loop(context, task_id))


async def _render_timer_loop(context, task_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç—Ä–µ–∫–µ—Ä–∞"""

    keep_frozen = False

    try:
        while task_id in active_timers:
            timer_info = active_timers.get(task_id)
            if not timer_info:
                break

            chat_id = timer_info['chat_id']
            message_id = timer_info['message_id']
            task = timer_info['task']
            reply_markup = timer_info['reply_markup']
            comment = timer_info.get('comment')

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç—Ä–µ–∫–µ—Ä–∞
            tracker_entry = task_time_tracker.get(task_id)
            if not tracker_entry:
                print(f"‚ö†Ô∏è [WARNING] –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                break

            # –û–±—â–µ–µ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ = –ø—Ä–µ–¥—ã–¥—É—â–µ–µ (–∏–∑ –ë–î) + —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è
            current_session_elapsed = tracker_entry.get('elapsed_seconds', 0)
            previous_elapsed = tracker_entry.get('previous_elapsed', 0)
            total_elapsed = previous_elapsed + current_session_elapsed
            
            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            total_elapsed = align_seconds(total_elapsed, mode='round')
            
            # –í—ã—á–∏—Å–ª—è–µ–º remaining
            allocated_seconds = tracker_entry.get('allocated_seconds', 0)
            remaining_seconds = max(0, int(allocated_seconds - total_elapsed))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º tracker
            tracker_entry['remaining_seconds'] = remaining_seconds

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
            task_status_df = SQL.sql_select('wms', f"""
                SELECT status FROM wms_bot.shift_tasks
                WHERE id = {task_id} AND merchant_code = '{MERCHANT_ID}'
            """)

            if task_status_df.empty:
                print(f"‚ö†Ô∏è [WARNING] –ó–∞–¥–∞–Ω–∏–µ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä")
                break

            current_status = task_status_df.iloc[0]['status']

            if current_status == '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ':
                await _handle_freeze_state(context, task_id, tracker_entry, timer_info)
                keep_frozen = True
                break

            if current_status not in ['–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ']:
                print(f"‚ÑπÔ∏è –¢–∞–π–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è {task_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å—Ç–∞—Ç—É—Å: {current_status}")
                break

            minutes = remaining_seconds // 60
            seconds = remaining_seconds % 60
            remaining_str = f"{minutes:02d}:{seconds:02d}"

            if timer_info.get('last_rendered_remaining') == remaining_str:
                await asyncio.sleep(_TRACKER_INTERVAL_SECONDS)
                continue

            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å None)
            if timer_info.get('last_rendered_remaining') is not None:
                print(
                    f"üïí [TIMER] task_id={task_id} remaining_before={timer_info.get('last_rendered_remaining')} -> {remaining_str}"
                )

            message = (
                f"üìÑ *–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:* {task_id}\n"
                f"‚úÖ *–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è*\n\n"
                f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {task['task_name']}\n"
                f"üì¶ *–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤:* {task.get('product_group', '‚Äî')}\n"
                f"üìç *–°–ª–æ—Ç:* {task.get('slot', '‚Äî')}\n"
                f"üè¢ *–ü–æ—Å—Ç–∞–≤—â–∏–∫:* {task.get('provider', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"‚è± *–í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:* {task['duration']}\n"
                f"‚è≥ *–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:* {remaining_str}"
            )

            if comment and str(comment).strip():
                message += f"\nüí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment}"

            try:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=message,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                timer_info['last_rendered_remaining'] = remaining_str
            except Exception as render_error:
                print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ {task_id}: {render_error}")

            await asyncio.sleep(_TRACKER_INTERVAL_SECONDS)

    finally:
        active_timers.pop(task_id, None)
        _cleanup_task_tracking(task_id, keep_frozen=keep_frozen)


async def _time_tracker_loop():
    """–§–æ–Ω–æ–≤–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""

    global _tracker_loop_task

    try:
        while True:
            if not task_time_tracker:
                break

            now = datetime.now()

            for task_id, entry in list(task_time_tracker.items()):
                last_tick = entry.get('last_tick', now)

                try:
                    delta = (now - last_tick).total_seconds()
                except Exception:
                    delta = 0

                if delta < 0:
                    delta = 0

                entry['elapsed_seconds'] = float(entry.get('elapsed_seconds', 0)) + delta
                entry['last_tick'] = now

                allocated = float(entry.get('allocated_seconds', 0))
                elapsed_aligned = align_seconds(entry['elapsed_seconds'], mode='round')
                entry['elapsed_seconds'] = elapsed_aligned
                entry['remaining_seconds'] = max(0, int(allocated - elapsed_aligned))

            await asyncio.sleep(_TRACKER_INTERVAL_SECONDS)

    except Exception as tracker_error:
        print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ –≤ —Ç—Ä–µ–∫–µ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏: {tracker_error}")
    finally:
        _tracker_loop_task = None


async def _handle_freeze_state(context, task_id, tracker_entry, timer_info):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç UI –¥–ª—è –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""

    # 1. –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤ –ë–î
    current_session_seconds = tracker_entry.get('elapsed_seconds', 0)
    total_elapsed = accumulate_freeze_time(task_id, current_session_seconds)
    
    # 2. –í—ã—á–∏—Å–ª—è–µ–º remaining –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ
    allocated = tracker_entry.get('allocated_seconds', 0)
    remaining_seconds = max(0, int(allocated - total_elapsed))
    remaining_time_str = str(timedelta(seconds=remaining_seconds)).split('.')[0]
    
    # 3. Minimal info –¥–ª—è UI
    frozen_tasks_info[task_id] = {
        'freeze_time': datetime.now(),
        'original_start_time': tracker_entry.get('original_start_time')
    }

    # 4. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º
    task = timer_info['task']
    message = (
        f"üìÑ *–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:* {task_id}\n"
        f"‚ùÑÔ∏è *–ó–∞–¥–∞–Ω–∏–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ*\n\n"
        f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {task['task_name']}\n"
        f"üì¶ *–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤:* {task.get('product_group', '‚Äî')}\n"
        f"üìç *–°–ª–æ—Ç:* {task.get('slot', '‚Äî')}\n"
        f"üè¢ *–ü–æ—Å—Ç–∞–≤—â–∏–∫:* {task.get('provider', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"‚è± *–í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:* {task['duration']}\n"
        f"‚è≥ *–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:* {remaining_time_str}\n"
        f"‚è∏Ô∏è *–¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*\n\n"
        f"*‚ÑπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å*"
    )

    try:
        await context.bot.edit_message_text(
            chat_id=timer_info['chat_id'],
            message_id=timer_info['message_id'],
            text=message,
            parse_mode='Markdown'
        )
    except Exception as freeze_render_error:
        print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–º–æ—Ä–æ–∑–∫–∏ —Ç–∞–π–º–µ—Ä–∞ {task_id}: {freeze_render_error}")


async def stop_timer_for_task(task_id: int, context, reason: str = "–∑–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""

    try:
        timer_info = active_timers.get(task_id)
        tracker_entry = task_time_tracker.get(task_id)

        if not timer_info:
            return

        remaining_seconds = 0
        keep_frozen = False

        if tracker_entry:
            allocated = tracker_entry.get('allocated_seconds', 0)
            current_session_elapsed = tracker_entry.get('elapsed_seconds', 0)
            previous_elapsed = tracker_entry.get('previous_elapsed', 0)
            total_elapsed = previous_elapsed + current_session_elapsed
            remaining_seconds = max(0, int(allocated - total_elapsed))

        # –ï—Å–ª–∏ –∑–∞–º–æ—Ä–æ–∑–∫–∞ - –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤ –ë–î
        if "–∑–∞–º–æ—Ä–æ–∑–∫–∞" in reason.lower() or "–∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ" in reason.lower():
            if tracker_entry:
                # 1. –ë–µ—Ä–µ–º –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∏–∑ tracker
                current_session_seconds = tracker_entry.get('elapsed_seconds', 0)
                
                # 2. –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –≤ –ë–î
                total_elapsed = accumulate_freeze_time(task_id, current_session_seconds)
                
                # 3. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º remaining –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                allocated = tracker_entry.get('allocated_seconds', 0)
                remaining_seconds = max(0, int(allocated - total_elapsed))
            
            # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º minimal info –¥–ª—è UI
            frozen_tasks_info[task_id] = {
                'freeze_time': datetime.now(),
                'original_start_time': tracker_entry.get('original_start_time') if tracker_entry else None
            }
            keep_frozen = True

        remaining_time_str = str(timedelta(seconds=int(remaining_seconds))).split('.')[0]

        try:
            freeze_info = ""
            if "–∑–∞–º–æ—Ä–æ–∑–∫–∞" in reason.lower() or "–∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ" in reason.lower():
                freeze_info = f"\n‚è≥ *–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:* {remaining_time_str}"

            await context.bot.edit_message_text(
                chat_id=timer_info['chat_id'],
                message_id=timer_info['message_id'],
                text=(
                    f"üìÑ *–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:* {task_id}\n"
                    f"‚èπÔ∏è *–¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*\n\n"
                    f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {timer_info['task']['task_name']}\n"
                    f"üì¶ *–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤:* {timer_info['task'].get('product_group', '‚Äî')}\n"
                    f"üìç *–°–ª–æ—Ç:* {timer_info['task'].get('slot', '‚Äî')}\n"
                    f"üè¢ *–ü–æ—Å—Ç–∞–≤—â–∏–∫:* {timer_info['task'].get('provider', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"‚è± *–í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:* {timer_info['task']['duration']}{freeze_info}\n"
                    f"‚è∏Ô∏è *–ü—Ä–∏—á–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:* {reason}"
                ),
                parse_mode='Markdown'
            )
        except Exception as render_error:
            print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}: {render_error}")

        active_timers.pop(task_id, None)
        _cleanup_task_tracking(task_id, keep_frozen=keep_frozen)

    except Exception as e:
        print(f"‚ùå [ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}: {e}")