from datetime import datetime
import pandas as pd
from telegram import Update
from telegram.ext import CallbackContext
from ..utils.opv_utils import get_free_opv_for_special_tasks, get_busy_opv_for_special_tasks, force_assign_tasks_by_time
from ..config.settings import ADMIN_ID

async def see_free_opv(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /see –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –û–ü–í –¥–ª—è —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–π"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã—Ö –û–ü–í
        free_opv_df, shift_ru, shift_en = get_free_opv_for_special_tasks()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç—ã—Ö –û–ü–í
        busy_opv_df, _, _ = get_busy_opv_for_special_tasks()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üë• *–°—Ç–∞—Ç—É—Å –û–ü–í –¥–ª—è —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–π*\n\n"
        message += f"üïê *–°–º–µ–Ω–∞:* {shift_ru} ({shift_en})\n"
        message += f"üìÖ *–î–∞—Ç–∞:* {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        
        # –°–≤–æ–±–æ–¥–Ω—ã–µ –û–ü–í
        if not free_opv_df.empty:
            message += f"‚úÖ *–°–≤–æ–±–æ–¥–Ω—ã–µ –û–ü–í ({len(free_opv_df)}):*\n"
            for _, opv in free_opv_df.iterrows():
                gender_emoji = "üë®" if opv['gender'] == 'M' else "üë©" if opv['gender'] == 'F' else "üë§"
                message += f"{gender_emoji} {opv['fio']} ({opv['gender']})\n"
        else:
            message += "‚ùå *–°–≤–æ–±–æ–¥–Ω—ã—Ö –û–ü–í –Ω–µ—Ç*\n"
        
        message += "\n"
        
        # –ó–∞–Ω—è—Ç—ã–µ –û–ü–í
        if not busy_opv_df.empty:
            message += f"üîí *–ó–∞–Ω—è—Ç—ã–µ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏—è–º–∏ ({len(busy_opv_df)}):*\n"
            for _, opv in busy_opv_df.iterrows():
                gender_emoji = "üë®" if opv['gender'] == 'M' else "üë©" if opv['gender'] == 'F' else "üë§"
                time_begin = opv['time_begin'].strftime('%H:%M') if pd.notnull(opv['time_begin']) else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                message += f"{gender_emoji} {opv['fio']} - {opv['task_name']} (—Å {time_begin})\n"
        else:
            message += "üÜì *–ó–∞–Ω—è—Ç—ã—Ö —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏—è–º–∏ –Ω–µ—Ç*\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

async def set_push_opv(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /set_push_opv –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–∑–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM\n"
            "–ü—Ä–∏–º–µ—Ä: /set_push_opv 12:30"
        )
        return
    
    time_str = context.args[0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    try:
        from datetime import datetime
        datetime.strptime(time_str, '%H:%M')
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM\n"
            "–ü—Ä–∏–º–µ—Ä: /set_push_opv 12:30"
        )
        return
    
    try:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
        result = await force_assign_tasks_by_time(context, time_str)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if len(result) > 4000:  # Telegram –ª–∏–º–∏—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = result.split('\n')
            current_message = ""
            
            for part in parts:
                if len(current_message + part + '\n') > 4000:
                    await update.message.reply_text(current_message)
                    current_message = part + '\n'
                else:
                    current_message += part + '\n'
            
            if current_message:
                await update.message.reply_text(current_message)
        else:
            await update.message.reply_text(result)
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
