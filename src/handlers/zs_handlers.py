import asyncio
import pandas as pd
from datetime import datetime, timedelta
import datetime as dt
from telegram import Update
from telegram.ext import CallbackContext
from ..database.sql_client import SQL
from ..keyboards.zs_keyboards import get_zs_main_menu_keyboard, get_opv_list_keyboard, get_opv_names_keyboard
from ..keyboards.opv_keyboards import get_next_task_keyboard, get_task_keyboard
from ..config.settings import ZS_GROUP_CHAT_ID, MERCHANT_ID
from ..utils.freeze_time_utils import read_freeze_time
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ForceReply


def safe_update_user_data(application, user_id, updates):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç user_data –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ mappingproxy"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        current_data = application.user_data.get(user_id, {})
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å
        new_data = dict(current_data)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        new_data.update(updates)
        
        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å
        application.user_data[user_id] = new_data
        
        return True
    except Exception as e:
        return False


async def show_opv_list(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å–ø–∏—Å–∫–∞ –û–ü–í"""
    query = update.callback_query
    await query.answer()

    reply_markup = get_opv_list_keyboard()
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –û–ü–í:", reply_markup=reply_markup)

async def show_opv_free(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –û–ü–í"""
    query = update.callback_query
    await query.answer()

    df = SQL.sql_select('wms', f"""
SELECT DISTINCT sh.employee_id, sh.role, sh.shift_type, concat(bs."name", ' ', bs.surname) user_name
        FROM wms_bot.shift_sessions1 sh
        LEFT JOIN (
            SELECT user_id, MAX(time_end) AS task_end
            FROM wms_bot.shift_tasks where task_date =current_date AND merchant_code = '{MERCHANT_ID}'
            GROUP BY user_id
        ) t ON t.user_id = sh.employee_id::int
        left join wms_bot.t_staff bs ON bs.id = sh.employee_id::int
        WHERE sh.end_time IS NULL  
          AND t.task_end IS NOT NULL   and sh.role ='opv'
        ORDER BY user_name
    """)

    if df.empty:
        await query.edit_message_text("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –û–ü–í –Ω–∞ —Å–º–µ–Ω–µ.")
        return

    reply_markup = get_opv_names_keyboard(df, 'opv')
    await query.edit_message_text("‚úÖ –°–≤–æ–±–æ–¥–Ω—ã–µ –û–ü–í (–∑–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ):", reply_markup=reply_markup)

async def show_opv_busy(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –û–ü–í"""
    query = update.callback_query
    await query.answer()

    df = SQL.sql_select('wms', f"""
        SELECT DISTINCT 
            sh.employee_id, 
            sh.role, 
            sh.shift_type, 
            concat(bs."name", ' ', bs.surname) user_name
        FROM wms_bot.shift_sessions1 sh
        LEFT JOIN (
            SELECT 
                user_id, 
                status
            FROM wms_bot.shift_tasks
            WHERE merchant_code = '{MERCHANT_ID}'
            GROUP BY user_id,status
        ) t ON t.user_id = sh.employee_id ::int
        left jOIN wms_bot.t_staff bs ON bs.id = sh.employee_id::int
        WHERE sh.end_time IS NULL  
          AND t.status in('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è','–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ','–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ')
          AND sh.role NOT IN ('zs')      
        ORDER BY user_name;
    """)

    if df.empty:
        await query.edit_message_text("–ù–µ—Ç –∑–∞–Ω—è—Ç—ã—Ö –û–ü–í –Ω–∞ —Å–º–µ–Ω–µ.")
        return

    keyboard = []
    for _, row in df.iterrows():
        user_name = str(row.get('user_name', '')).strip()
        if user_name:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–º–µ–Ω–∞
            keyboard.append([
                InlineKeyboardButton(text=user_name, callback_data=f"opv_{row['employee_id']}")
            ])

    if not keyboard:
        await query.edit_message_text("‚è≥ –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("‚è≥ –ó–∞–Ω—è—Ç—ã–µ –û–ü–í (–∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è):", reply_markup=reply_markup)

async def show_opv_completed_list(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –û–ü–í, –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö —Å–º–µ–Ω—É"""
    query = update.callback_query
    await query.answer()
    shift = context.user_data.get('shift')

    try:
        completed_df = SQL.sql_select('wms', f"""
            SELECT DISTINCT st.user_id,concat(bs."name", ' ', bs.surname)
            FROM wms_bot.shift_tasks st
            left join wms_bot.shift_sessions1 ss on ss.employee_id::int =st.user_id 
            left join wms_bot.t_staff bs on bs.id=st.user_id 
            WHERE shift = '{shift}' AND st.status = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ' and ss.end_time is not null and ss.end_time ::date=current_date 
            AND st.merchant_code = '{MERCHANT_ID}'
        """)

        if completed_df.empty:
            await query.edit_message_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª —Å–º–µ–Ω—É.")
            return

        keyboard = [
            [InlineKeyboardButton(f"{row['user_name']}", callback_data=f"completed_{row['employee_id']}")]
            for _, row in completed_df.iterrows()
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚úÖ –û–ü–í, –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–µ —Å–º–µ–Ω—É:", reply_markup=reply_markup)

    except Exception as e:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

async def show_opv_summary(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –û–ü–í"""
    query = update.callback_query
    await query.answer()
    employee_id = query.data.replace('completed_', '')

    try:
        summary_df = SQL.sql_select('stock', f"""
            SELECT user_id, COUNT(DISTINCT id) AS task_count
            FROM wms_bot.shift_tasks
            WHERE user_id = '{employee_id}' AND status = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ' AND merchant_code = '{MERCHANT_ID}'
            GROUP BY user_id
        """)

        if summary_df.empty:
            await query.edit_message_text("–ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π —É —ç—Ç–æ–≥–æ –û–ü–í.")
            return

        row = summary_df.iloc[0]
        message = (
            f"üìä *–î–∞–Ω–Ω—ã–µ –ø–æ —Å–º–µ–Ω–µ:*\n"
            f"üë§ *–§–ò–û:* {row['user_name']}\n"
            f"‚úÖ *–ö–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:* {row['task_count']}"
        )
        await query.edit_message_text(message, parse_mode='Markdown')

    except Exception as e:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

async def handle_review(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ó–° (–¢–û–õ–¨–ö–û approve)"""
    query = update.callback_query
    await query.answer()

    action, data = query.data.split('_', 1)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º split —Å –ª–∏–º–∏—Ç–æ–º
    task_id, opv_id = data.split('|')

    now = datetime.now()
    

    if action == 'approve':
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞
        inspector_df = SQL.sql_select('wms', f"""
            SELECT fio FROM wms_bot.bot_auth WHERE userid = {update.effective_user.id}
        """)
        inspector_name = inspector_df.iloc[0]['fio'] if not inspector_df.empty else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞
        now_str = now.strftime('%Y-%m-%d %H:%M:%S')
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_tasks
            SET status = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ',
                time_end = '{now_str}',
                inspector_id = {update.effective_user.id}
            WHERE id = {task_id}
        """)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
        first_message_id = context.user_data.get('last_task_message_id')
        if first_message_id:
            try:
                await context.bot.edit_message_caption(
                    chat_id=ZS_GROUP_CHAT_ID,
                    message_id=first_message_id,
                    caption=f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task_id} –æ–¥–æ–±—Ä–µ–Ω–æ."
                )
            except:
                pass

        await query.edit_message_text(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task_id} –æ–¥–æ–±—Ä–µ–Ω–æ.")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –û–ü–í
        opv_userid_df = SQL.sql_select('wms', f"""
            SELECT userid FROM wms_bot.bot_auth WHERE employee_id = '{opv_id}'
        """)
        if not opv_userid_df.empty:
            opv_user_id = int(opv_userid_df.iloc[0]['userid'])
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–¥–∞–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É
            task_row = SQL.sql_select('wms', f"SELECT task_duration FROM wms_bot.shift_tasks WHERE id = {task_id}")
            if not task_row.empty:
                from ..utils.task_utils import parse_task_duration, add_worked_time
                duration_raw = task_row.iloc[0]['task_duration']
                task_seconds = parse_task_duration(duration_raw)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç)
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ application
                try:
                    user_context = context.application.user_data.get(opv_user_id, {})
                    current_worked = user_context.get('worked_seconds', 0)
                    new_worked = current_worked + task_seconds
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    success = safe_update_user_data(
                        context.application, 
                        opv_user_id, 
                        {'worked_seconds': new_worked}
                    )
                    
                    if success:
                        pass
                    else:
                        pass
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    pass
            
            try:
                await context.bot.send_message(
                    chat_id=opv_user_id,
                    text=f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task_id} *–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ* –∑–∞–≤–µ–¥—É—é—â–∏–º. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!",
                    parse_mode='Markdown'
                )

                reply_markup = get_next_task_keyboard()
                await context.bot.send_message(
                    chat_id=opv_user_id,
                    text="–•–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ? üëá",
                    reply_markup=reply_markup
                )
            except Exception as e:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –ó–°
                await context.bot.send_message(
                    chat_id=ZS_GROUP_CHAT_ID,
                    text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –û–ü–í {opv_id} –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è {task_id}. –û—à–∏–±–∫–∞: {e}"
                )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ approve - –∑–Ω–∞—á–∏—Ç —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è.")


async def start_reject_reason(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞–¥–∞–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã"""
    query = update.callback_query
    await query.answer()

    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏–º callback_data
    callback_data = query.data
    task_num, opv_id = callback_data.replace("start_reject_", "").split("|")
    
    context.user_data.update({
        'reject_task_id': task_num,
        'reject_opv_id': opv_id
    })
    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ForceReply –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏—á–∏–Ω—ã
    try:
        thread_id = getattr(query.message, 'message_thread_id', None)
        if thread_id is not None:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞–¥–∞–Ω–∏—è (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ):",
                reply_markup=ForceReply(selective=True),
                message_thread_id=thread_id
            )
        else:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞–¥–∞–Ω–∏—è (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ):",
                reply_markup=ForceReply(selective=True)
            )
    except Exception as e:
        pass


async def receive_reject_reason(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞–¥–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –¥–ª—è –ó–°"""
    
    user_id = update.effective_user.id
    task_id = context.user_data.get('reject_task_id')
    opv_id = context.user_data.get('reject_opv_id')
    
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –ó–°, –∫–æ—Ç–æ—Ä—ã–π –∂–¥–µ—Ç –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã
    if not task_id or not opv_id:
        return  # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–æ–º–∞–Ω–¥—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    message_text = update.message.text.strip() if update.message.text else ""
    if message_text.startswith('/') or len(message_text) < 3:
        return
    
    reason = message_text

    try:
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ó–°
        await update.message.reply_text(f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–æ–∑–≤—Ä–∞—Ç –∑–∞–¥–∞–Ω–∏—è ‚Ññ{task_id}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        task_check_df = SQL.sql_select('wms', f"""
            SELECT id, user_id, status FROM wms_bot.shift_tasks WHERE id = {task_id}
        """)
        
        if task_check_df.empty:
            await update.message.reply_text("‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
            context.user_data.pop('reject_task_id', None)
            context.user_data.pop('reject_opv_id', None)
            return
            
        current_status = task_check_df.iloc[0]['status']
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç, –∫–æ–≥–¥–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ/–æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–ª–∏ —É–∂–µ –ø–æ–º–µ—á–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É
        if current_status not in ['–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏']:
            await update.message.reply_text(f"‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '{current_status}' –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ.")
            context.user_data.pop('reject_task_id', None)
            context.user_data.pop('reject_opv_id', None)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–∞–≤—ã—á–µ–∫
        escaped_reason = reason.replace("'", "''")
        now_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_tasks
            SET status = '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ',
                time_begin = '{now_str}'
            WHERE id = {task_id}
        """)
        

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        task_df = SQL.sql_select('wms', f"""
            SELECT user_id, task_name, slot, time_begin, task_duration, product_group
            FROM wms_bot.shift_tasks
            WHERE id = {task_id}
        """)
        
        if task_df.empty:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")
            context.user_data.pop('reject_task_id', None)
            context.user_data.pop('reject_opv_id', None)
            return

        row = task_df.iloc[0]
        opv_employee_id = row['user_id']

        # –ü–æ–ª—É—á–∞–µ–º Telegram ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        opv_userid_df = SQL.sql_select('wms', f"""
            SELECT userid FROM wms_bot.bot_auth WHERE employee_id = '{opv_employee_id}'
        """)
        
        if opv_userid_df.empty:
            await update.message.reply_text("‚ö†Ô∏è –£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω Telegram ID.")
            context.user_data.pop('reject_task_id', None)
            context.user_data.pop('reject_opv_id', None)
            return

        opv_user_id = int(opv_userid_df.iloc[0]['userid'])

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        if isinstance(row['time_begin'], dt.time):
            assigned_time = datetime.combine(datetime.today(), row['time_begin'])
        else:
            assigned_time = pd.to_datetime(row['time_begin'])

        # 1. –ß–∏—Ç–∞–µ–º elapsed –∏–∑ –ë–î
        elapsed_seconds = read_freeze_time(task_id)
        
        # 2. –í—ã—á–∏—Å–ª—è–µ–º allocated –∏ remaining
        total_duration = (
            row['task_duration'].hour * 3600 + row['task_duration'].minute * 60 + row['task_duration'].second
            if isinstance(row['task_duration'], dt.time)
            else 900
        )
        remaining_seconds = max(0, total_duration - elapsed_seconds)

        from ..utils.time_utils import seconds_to_hms

        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –û–ü–í —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏
        message = (
            f"‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task_id} –≤–µ—Ä–Ω—É–ª–∏ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"üìã *–ó–∞–¥–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ:*\n"
            f"üìç *–°–ª–æ—Ç:* {row['slot']}\n"
            f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {row['task_name']}\n"
            f"üì¶ *–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤:* {row.get('product_group', '‚Äî')}\n"
            f"‚è± *–í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:* {seconds_to_hms(total_duration)}\n"
            f"‚è≥ *–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:* {seconds_to_hms(remaining_seconds)}"
        )
        
        if elapsed_seconds > 0:
            message += f"\n‚è± *–£–∂–µ –∑–∞—Ç—Ä–∞—á–µ–Ω–æ:* {seconds_to_hms(elapsed_seconds)}"
        


        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –û–ü–í
        try:
            sent_message = await context.bot.send_message(
                chat_id=opv_user_id,
                text=message,
                parse_mode='Markdown',
                reply_markup=get_task_keyboard()
            )

            from ..config.settings import active_timers
            from ..handlers.task_handlers import update_timer

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
            if task_id in active_timers:
                del active_timers[task_id]

            task_payload = {
                'task_id': task_id,
                'task_name': row['task_name'],
                'product_group': row.get('product_group', '‚Äî'),
                'slot': row['slot'],
                'provider': row.get('provider', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                'duration': seconds_to_hms(total_duration)
            }

            asyncio.create_task(
                update_timer(
                    context,
                    sent_message.chat_id,
                    sent_message.message_id,
                    task_payload,
                    total_duration,
                    get_task_keyboard()
                )
            )
        except Exception as e:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –ó–°
            await context.bot.send_message(
                chat_id=ZS_GROUP_CHAT_ID,
                text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –û–ü–í {opv_employee_id} –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}. –û—à–∏–±–∫–∞: {e}"
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –û–ü–í
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            task_data = {
                'task_id': task_id,
                'task_name': row['task_name'],
                'slot': row['slot'],
                'assigned_time': assigned_time,
                'duration': int(total_duration // 60),
                'status': '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ'
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            success = safe_update_user_data(
                context.application,
                opv_user_id,
                {
                    'task': task_data,
                    'photos': None,  # –û—á–∏—â–∞–µ–º —Ñ–æ—Ç–æ
                    'photo_request_time': None  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ—Ç–æ
                }
            )
            
            if success:
                pass
            else:
                pass
        except Exception as e:
            pass
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ó–° –æ–± —É—Å–ø–µ—Ö–µ
        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task_id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É. –û–ü–í —É–≤–µ–¥–æ–º–ª—ë–Ω.")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        first_message_id = context.user_data.get('last_task_message_id')
        if first_message_id:
            try:
                await context.bot.edit_message_caption(
                    chat_id=ZS_GROUP_CHAT_ID,
                    message_id=first_message_id,
                    caption=f"‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task_id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
                )
            except Exception as e:
                pass

    except Exception as e:
        import traceback
        traceback.print_exc()
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    finally:
        # –í–ê–ñ–ù–û: –í–°–ï–ì–î–ê –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ó–° –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        context.user_data.pop('reject_task_id', None)
        context.user_data.pop('reject_opv_id', None)