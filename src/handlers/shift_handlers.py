import pandas as pd
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import CallbackContext
from ..database.sql_client import SQL
from ..keyboards.auth_keyboards import get_shift_keyboard, get_role_keyboard, get_employment_keyboard
from ..keyboards.opv_keyboards import get_sector_keyboard
from ..keyboards.zs_keyboards import get_zs_main_menu_keyboard
from ..utils.time_utils import get_task_date
from ..utils.task_utils import check_user_task_status
from ..utils.navigation import navigation_history
from ..config.settings import zav_on_shift, MERCHANT_ID

async def shift_start(update: Update, context: CallbackContext):
    context.user_data['worked_seconds'] = 0
    """–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã - –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–º–µ–Ω—ã"""
    reply_markup = get_shift_keyboard()
    
    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É:", reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É:", reply_markup=reply_markup)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–º–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_id = update.effective_user.id
    navigation_history.add_menu(user_id, 'shift_choice')

async def shift_choice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–º–µ–Ω—ã"""
    query = update.callback_query
    await query.answer()
    shift = query.data.lower()
    
    reply_markup = get_role_keyboard(shift)
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–º–µ–Ω—É: {shift}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=reply_markup)

async def role_choice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    query = update.callback_query
    await query.answer()
    role, shift = query.data.split('_')
    
    context.user_data.update({
        'role': role,
        'shift': shift
    })

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—Ç —Å–º–µ–Ω—ã –≤ –±–∞–∑—É
        session_row = pd.DataFrame([{
            'employee_id': context.user_data['staff_id'],
            'role': role,
            'shift_type': shift,
            'start_time': datetime.now(),
            'end_time': None,
            'load_date': pd.to_datetime('today').date(),
            'merchantid': MERCHANT_ID 
        }])
        SQL.sql_execute_df('wms', session_row, 'wms_bot.shift_sessions1')
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã: {e}")

    if role == 'opv':
        reply_markup = get_employment_keyboard()
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:", reply_markup=reply_markup)
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
        navigation_history.add_menu(update.effective_user.id, 'employment_choice')
    else:
        # –î–ª—è –ó–° —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        if update.effective_user.id not in zav_on_shift:
            zav_on_shift.append(update.effective_user.id)

        reply_markup = get_zs_main_menu_keyboard()
        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: {role.upper()} –Ω–∞ —Å–º–µ–Ω–µ: {shift}.",
            reply_markup=reply_markup
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ó–° –≤ –∏—Å—Ç–æ—Ä–∏—é
        navigation_history.add_menu(update.effective_user.id, 'zs_main_menu')

async def employment_type_choice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()

    employment_type = query.data.replace('employment_', '')
    context.user_data['employment_type'] = employment_type

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    try:
        from datetime import datetime
        log_entry = f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {context.user_data['staff_id']} ({context.user_data.get('staff_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}) –≤—ã–±—Ä–∞–ª —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: '{employment_type}'\n"
        
        with open('employment_choice_log.txt', 'a', encoding='utf-8') as f:
            f.write(log_entry)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")

    # –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ context.user_data –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π
    print(f"‚úÖ –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ '{employment_type}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context.user_data['staff_id']}")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Å–µ–∫—Ç–æ—Ä–∞
    shift = context.user_data.get('shift')
    shift_ru = '–î–µ–Ω—å' if shift == 'day' else '–ù–æ—á—å'
    task_date = get_task_date(shift)

    sectors_df = SQL.sql_select('wms', f"""SELECT DISTINCT sector FROM wms_bot.shift_tasks WHERE task_date =  '{task_date}' AND shift = '{shift_ru}' and merchant_code='{MERCHANT_ID}'""")
    sectors = sectors_df['sector'].dropna().tolist()

    if not sectors:
        await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–π —Å–º–µ–Ω—ã.")
        return

    reply_markup = get_sector_keyboard(sectors)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ç–æ—Ä, —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —ç—Ç—É —Å–º–µ–Ω—É:", reply_markup=reply_markup)
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ç–æ—Ä–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    navigation_history.add_menu(update.effective_user.id, 'sector_choice')

async def sector_select_and_confirm(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ç–æ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    sector = query.data.replace('sectorchoice_', '')
    context.user_data.update({
        'sector': sector,
        'sector_selected': True
    })

    from ..keyboards.opv_keyboards import get_task_confirmation_keyboard
    reply_markup = get_task_confirmation_keyboard()

    await query.edit_message_text(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ–∫—Ç–æ—Ä: *{sector}*\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è.",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    navigation_history.add_menu(update.effective_user.id, 'task_confirmation')

async def shift_end(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã"""
    staff_id = context.user_data.get('staff_id')
    role = context.user_data.get('role')

    if not staff_id or not role:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å–º–µ–Ω—É –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Å–º–µ–Ω—ã
    active_tasks_df = SQL.sql_select('wms', f"""
        SELECT id FROM wms_bot.shift_tasks
        WHERE user_id = '{staff_id}'
          AND status IN ('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ', '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ')
          AND merchant_code = '{MERCHANT_ID}'
    """)

    if not active_tasks_df.empty:
        await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Å–º–µ–Ω—ã.")
        return

    now = datetime.now()

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–µ—Ü —Å–º–µ–Ω—ã
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_sessions1
            SET end_time = '{now}' 
            WHERE employee_id = '{staff_id}' AND end_time IS NULL
        """)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω—ã
        session_df = SQL.sql_select('wms', f"""
            SELECT start_time
            FROM wms_bot.shift_sessions1
            WHERE employee_id = '{staff_id}'
              AND end_time = '{now}'
            ORDER BY start_time DESC LIMIT 1
        """)

        if session_df.empty:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É.")
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã
        start_time = pd.to_datetime(session_df.iloc[0]['start_time'])
        shift_duration = now - start_time
        shift_hours = round(shift_duration.total_seconds() / 3600, 2)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∏–∑ –ë–î (—Å—É–º–º–∞ –≤—Å–µ—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π)
        from ..utils.task_utils import get_total_worked_time_from_db
        shift = context.user_data.get('shift')  # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ–Ω—É
        total_worked_seconds = get_total_worked_time_from_db(staff_id, shift)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–º–µ–Ω—É
        
        # –¢–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        context_worked_seconds = context.user_data.get('worked_seconds', 0)
        
        # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        final_worked_seconds = max(total_worked_seconds, context_worked_seconds)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        worked_time = str(timedelta(seconds=final_worked_seconds))
        worked_hours = round(final_worked_seconds / 3600, 2)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã
        completion_message = (
            f"‚úÖ *–°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
            f"‚è± *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã:* {shift_hours} —á\n"
            f"‚è∞ *–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π:* {worked_time} ({worked_hours} —á)\n\n"
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"‚Ä¢ –í—Ä–µ–º—è –≤ —Å–º–µ–Ω–µ: {shift_hours} —á\n"
            f"‚Ä¢ –í—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞–Ω–∏—è—Ö: {worked_hours} —á"
        )
        
        await update.message.reply_text(completion_message, parse_mode='Markdown')


    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

async def exit_session(update: Update, context: CallbackContext):
    """–í—ã—Ö–æ–¥ –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
    role = context.user_data.get('role')

    if role == 'opv':
        staff_id = context.user_data.get('staff_id')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status_check = check_user_task_status(staff_id)
        if status_check['blocked']:
            reply_markup = status_check.get('reply_markup')
            await update.message.reply_text(status_check['message'], reply_markup=reply_markup)
            return

        # –ï—Å–ª–∏ –Ω–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
        from ..keyboards.opv_keyboards import get_next_task_keyboard
        reply_markup = get_next_task_keyboard()
        await update.message.reply_text("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é. –ì–æ—Ç–æ–≤—ã –≤–∑—è—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ? üëá", reply_markup=reply_markup)
    elif role == 'zs':
        reply_markup = get_zs_main_menu_keyboard()
        await update.message.reply_text("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?", reply_markup=reply_markup)
    else:
        await update.message.reply_text("–í—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
