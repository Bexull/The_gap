"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –º–µ–Ω—é
"""

from telegram import Update
from telegram.ext import CallbackContext
from ..utils.navigation import navigation_history, MENU_NAMES
from ..keyboards.auth_keyboards import get_shift_keyboard, get_role_keyboard, get_employment_keyboard
from ..keyboards.opv_keyboards import get_sector_keyboard, get_task_confirmation_keyboard, get_next_task_keyboard
from ..keyboards.zs_keyboards import get_zs_main_menu_keyboard, get_opv_list_keyboard
from ..database.sql_client import SQL
from ..utils.time_utils import get_task_date
from ..config.settings import MERCHANT_ID

async def back_to_previous_menu(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' - –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    previous_menu = navigation_history.get_previous_menu(user_id)
    
    if not previous_menu:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ–Ω—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
        await back_to_start(update, context)
        return
    
    menu_name = previous_menu['name']
    menu_data = previous_menu.get('data', {})
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –º–µ–Ω—é
    if menu_name == 'start':
        await handle_start_menu(update, context)
    elif menu_name == 'shift_choice':
        await handle_shift_choice_menu(update, context)
    elif menu_name == 'role_choice':
        await handle_role_choice_menu(update, context)
    elif menu_name == 'employment_choice':
        await handle_employment_choice_menu(update, context)
    elif menu_name == 'sector_choice':
        await handle_sector_choice_menu(update, context)
    elif menu_name == 'task_confirmation':
        await handle_task_confirmation_menu(update, context)
    elif menu_name == 'zs_main_menu':
        await handle_zs_main_menu(update, context)
    elif menu_name == 'opv_list':
        await handle_opv_list_menu(update, context)
    else:
        # –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ–Ω—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
        await back_to_start(update, context)

async def back_to_start(update: Update, context: CallbackContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É - –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç /start"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    navigation_history.clear_history(user_id)
    context.user_data.clear()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ
    try:
        from ..database.sql_client import SQL
        from ..keyboards.auth_keyboards import get_contact_keyboard
        
        auth_check = SQL.sql_select('wms', f"""
            SELECT phone, fio, employee_id
            FROM wms_bot.bot_auth
            WHERE userid = {user_id}
        """)
        
        if not auth_check.empty:
            record = auth_check.iloc[0]
            context.user_data.update({
                'phone': record['phone'],
                'staff_name': record['fio'],
                'staff_id': record['employee_id']
            })
            await query.edit_message_text(f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {record['fio']}!")
            from .shift_handlers import shift_start
            await shift_start(update, context)
        else:
            reply_markup = get_contact_keyboard()
            await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=reply_markup)
            navigation_history.add_menu(user_id, 'auth')

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—á–∞–ª—É: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–µ–Ω—é
async def handle_start_menu(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –Ω–∞—á–∞–ª–∞"""
    query = update.callback_query
    reply_markup = get_shift_keyboard()
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É:", reply_markup=reply_markup)

async def handle_shift_choice_menu(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å–º–µ–Ω—ã"""
    query = update.callback_query
    shift = context.user_data.get('shift', 'day')
    reply_markup = get_role_keyboard(shift)
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–º–µ–Ω—É: {shift}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=reply_markup)

async def handle_role_choice_menu(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏"""
    query = update.callback_query
    role = context.user_data.get('role')
    shift = context.user_data.get('shift')
    
    if role == 'opv':
        reply_markup = get_employment_keyboard()
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:", reply_markup=reply_markup)
    else:
        from ..config.settings import zav_on_shift
        if update.effective_user.id not in zav_on_shift:
            zav_on_shift.append(update.effective_user.id)
        
        reply_markup = get_zs_main_menu_keyboard()
        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: {role.upper()} –Ω–∞ —Å–º–µ–Ω–µ: {shift}.",
            reply_markup=reply_markup
        )

async def handle_employment_choice_menu(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏"""
    query = update.callback_query
    reply_markup = get_employment_keyboard()
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:", reply_markup=reply_markup)

async def handle_sector_choice_menu(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å–µ–∫—Ç–æ—Ä–∞"""
    query = update.callback_query
    shift = context.user_data.get('shift')
    shift_ru = '–î–µ–Ω—å' if shift == 'day' else '–ù–æ—á—å'
    task_date = get_task_date(shift)

    print("shift:", shift)
    print("shift_ru:", shift_ru)
    print("task_date:", task_date)

    print(f"""
    SELECT DISTINCT sector FROM wms_bot.shift_tasks 
    WHERE task_date = '{task_date}' AND shift = '{shift_ru}' AND merchant_code='{MERCHANT_ID}'
    """)
    
    sql_sectors = f"""
        SELECT DISTINCT sector FROM wms_bot.shift_tasks 
        WHERE task_date = '{task_date}' AND shift = '{shift_ru}' and merchant_code='{MERCHANT_ID}'
    """
    print("üîé SQL (sectors):", sql_sectors)
    sectors_df = SQL.sql_select('wms', sql_sectors)
    sectors = sectors_df['sector'].dropna().tolist()
    
    if not sectors:
        await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–π —Å–º–µ–Ω—ã.")
        return
    
    reply_markup = get_sector_keyboard(sectors)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ç–æ—Ä, —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —ç—Ç—É —Å–º–µ–Ω—É:", reply_markup=reply_markup)

async def handle_task_confirmation_menu(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–¥–∞–Ω–∏—è"""
    query = update.callback_query
    sector = context.user_data.get('sector', '')
    reply_markup = get_task_confirmation_keyboard()
    await query.edit_message_text(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ–∫—Ç–æ—Ä: *{sector}*\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è.",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def handle_zs_main_menu(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –ó–°"""
    query = update.callback_query
    reply_markup = get_zs_main_menu_keyboard()
    await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ó–°:", reply_markup=reply_markup)

async def handle_opv_list_menu(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –û–ü–í"""
    query = update.callback_query
    reply_markup = get_opv_list_keyboard()
    await query.edit_message_text("–°–ø–∏—Å–æ–∫ –û–ü–í:", reply_markup=reply_markup)
    
