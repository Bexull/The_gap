from datetime import datetime, timedelta
import datetime as dt
from telegram import InputMediaPhoto
from ..config.settings import ZS_GROUP_CHAT_ID, TOPIC_IDS, frozen_tasks_info, task_time_tracker
from ..keyboards.opv_keyboards import get_task_keyboard
from ..keyboards.zs_keyboards import get_zs_review_keyboard
from ..utils.time_utils import align_seconds, seconds_to_hms

def get_topic_id(sector: str) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç ID —Ç–æ–ø–∏–∫–∞ –¥–ª—è —Å–µ–∫—Ç–æ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏–π"""
    if not sector:
        return None
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–∞
    sector_normalized = sector.strip().capitalize()
    
    # –ü—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    if sector_normalized in TOPIC_IDS:
        return TOPIC_IDS[sector_normalized]
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    for topic_sector, topic_id in TOPIC_IDS.items():
        if sector_normalized in topic_sector or topic_sector in sector_normalized:
            return topic_id
    
    print(f"‚ö†Ô∏è –¢–æ–ø–∏–∫ –¥–ª—è —Å–µ–∫—Ç–æ—Ä–∞ '{sector_normalized}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ TOPIC_IDS: {list(TOPIC_IDS.keys())}")
    return None

def check_user_task_status(staff_id: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö"""
    from ..database.sql_client import SQL
    from ..config.settings import MERCHANT_ID
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    active_df = SQL.sql_select('wms', f"""
        SELECT id, status
        FROM wms_bot.shift_tasks
        WHERE user_id = '{staff_id}'
          AND status IN ('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è', '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ','–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ')
          AND merchant_code = '{MERCHANT_ID}'
    """)
    
    if not active_df.empty:
        return {
            'blocked': True,
            'reason': 'active_task',
            'message': (
                "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –±—Ä–∞—Ç—å –Ω–æ–≤–æ–µ."
                ),
            'reply_markup': get_task_keyboard()
        }
    
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    pending_df = SQL.sql_select('wms', f"""
        SELECT id, task_name, status
        FROM wms_bot.shift_tasks
        WHERE user_id = '{staff_id}'
          AND status = '–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏'
          AND merchant_code = '{MERCHANT_ID}'
        ORDER BY time_end DESC
        LIMIT 1
    """)
    
    if not pending_df.empty:
        task_info = pending_df.iloc[0]
        return {
            'blocked': True,
            'reason': 'pending_task',
            'message': f"‚è≥ –£ –≤–∞—Å –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{task_info['id']} ({task_info['task_name']}), –∫–æ—Ç–æ—Ä–æ–µ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≤–µ–¥—É—é—â–µ–≥–æ.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –±—Ä–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.",
            'task_id': task_info['id'],
            'task_name': task_info['task_name']
        }

    return {
        'blocked': False,
        'reason': None,
        'message': None
    }

async def send_task_to_zs(context, task: dict, photos: list):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–µ–¥—É—é—â–µ–º—É"""
    try:
        keyboard = get_zs_review_keyboard(task['task_id'], context.user_data.get('staff_id'))
        sector = context.user_data.get('sector', '').strip().capitalize()
        thread_id = get_topic_id(sector)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        task_id = task.get('task_id')
        start_time_for_calculation = task['assigned_time']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏
        from ..config.settings import frozen_tasks_info
        if task_id and task_id in frozen_tasks_info and 'original_start_time' in frozen_tasks_info[task_id]:
            original_start_time = frozen_tasks_info[task_id]['original_start_time']
            if isinstance(original_start_time, datetime):
                start_time_for_calculation = original_start_time
                print(f"üîß [FIX] –ò—Å–ø–æ–ª—å–∑—É–µ–º original_start_time –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è {task_id}: {start_time_for_calculation}")
            else:
                print(f"‚ö†Ô∏è [WARNING] original_start_time –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è datetime –æ–±—ä–µ–∫—Ç–æ–º: {type(original_start_time)}")
        else:
            print(f"‚ÑπÔ∏è [INFO] –ò—Å–ø–æ–ª—å–∑—É–µ–º assigned_time –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è {task_id}: {start_time_for_calculation}")
        
        tracker_entry = task_time_tracker.get(task_id)
        if tracker_entry:
            elapsed_seconds = tracker_entry.get('elapsed_seconds', 0)
        elif task_id and task_id in frozen_tasks_info:
            freeze_meta = frozen_tasks_info[task_id]
            elapsed_seconds = freeze_meta.get('elapsed_seconds', 0)
        else:
            elapsed_seconds = (datetime.now() - start_time_for_calculation).total_seconds()

        elapsed_seconds = align_seconds(elapsed_seconds, mode='round')
        time_spent = timedelta(seconds=elapsed_seconds)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"‚è∞ [DEBUG] –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}: {time_spent} (–Ω–∞—á–∞–ª–æ: {start_time_for_calculation}, —Ç–µ–∫—É—â–µ–µ: {datetime.now()})")

        message = (
            f"üì¨ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç *{context.user_data.get('staff_name', '–û–ü–í')}* –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n"
            f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {task.get('task_name', '‚Äî')}\n"
            f"üì¶ *–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤:* {task.get('product_group', '‚Äî')}\n"
            f"üìç *–°–ª–æ—Ç:* {task.get('slot', '‚Äî')}\n"
            f"üè¢ *–ü–æ—Å—Ç–∞–≤—â–∏–∫:* {task.get('provider', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üè∑Ô∏è *–°–µ–∫—Ç–æ—Ä:* {sector}\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(time_spent).split('.')[0]}\n"
            f"‚è≥ –í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {task['duration']} –º–∏–Ω"
        )

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —Ç–æ–ø–∏–∫–∞
        async def send_with_topic_fallback(media_group=None, text=None, reply_markup=None):
            try:
                if media_group:
                    messages = await context.bot.send_media_group(
                        chat_id=ZS_GROUP_CHAT_ID,
                        media=media_group,
                        message_thread_id=thread_id
                    )
                    return messages[0].message_id
                else:
                    sent_msg = await context.bot.send_message(
                        chat_id=ZS_GROUP_CHAT_ID,
                        text=text,
                        parse_mode='Markdown',
                        reply_markup=reply_markup,
                        message_thread_id=thread_id
                    )
                    return sent_msg.message_id
            except Exception as topic_error:
                if "Message thread not found" in str(topic_error):
                    print(f"‚ö†Ô∏è –¢–æ–ø–∏–∫ –¥–ª—è —Å–µ–∫—Ç–æ—Ä–∞ '{sector}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞
                    if media_group:
                        messages = await context.bot.send_media_group(
                            chat_id=ZS_GROUP_CHAT_ID,
                            media=media_group
                        )
                        return messages[0].message_id
                    else:
                        sent_msg = await context.bot.send_message(
                            chat_id=ZS_GROUP_CHAT_ID,
                            text=text,
                            parse_mode='Markdown',
                            reply_markup=reply_markup
                        )
                        return sent_msg.message_id
                else:
                    raise topic_error

        if photos:
            media_group = []

            for i, photo in enumerate(photos):
                if i == 0:
                    media_group.append(InputMediaPhoto(media=photo, caption=message, parse_mode='Markdown'))
                else:
                    media_group.append(InputMediaPhoto(media=photo))

            message_id = await send_with_topic_fallback(media_group=media_group)
            context.user_data['last_task_message_id'] = message_id

            await send_with_topic_fallback(
                text="üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
        else:
            message_id = await send_with_topic_fallback(
                text=message,
                reply_markup=keyboard
            )
            context.user_data['last_task_message_id'] = message_id

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ó–° –≥—Ä—É–ø–ø—É: {e}")
        raise

def add_worked_time(context, user_id: int, task_duration_seconds: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∫ –æ–±—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        current_worked_seconds = context.user_data.get('worked_seconds', 0)
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        new_worked_seconds = current_worked_seconds + task_duration_seconds
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['worked_seconds'] = new_worked_seconds
        
        print(f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–ª—è user_id={user_id}: {current_worked_seconds}s + {task_duration_seconds}s = {new_worked_seconds}s")
        return new_worked_seconds
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã: {e}")
        return 0

def get_total_worked_time_from_db(staff_id: str, shift: str = None) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∏–∑ –ë–î –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º"""
    from ..database.sql_client import SQL
    from ..config.settings import MERCHANT_ID
    from .time_utils import get_task_date
    import pandas as pd
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π
        if shift == 'night':
            task_date = get_task_date(shift)  # –î–ª—è –Ω–æ—á–Ω–æ–π —Å–º–µ–Ω—ã –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É
        else:
            task_date = pd.to_datetime('today').date()  # –î–ª—è –¥–Ω–µ–≤–Ω–æ–π —Å–º–µ–Ω—ã - —Å–µ–≥–æ–¥–Ω—è
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∑–∞ –Ω—É–∂–Ω—É—é –¥–∞—Ç—É
        completed_tasks_df = SQL.sql_select('wms', f"""
            SELECT task_duration 
            FROM wms_bot.shift_tasks
            WHERE user_id = '{staff_id}'
              AND status = '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ'
              AND task_date = '{task_date}'
              AND time_end IS NOT NULL
              AND merchant_code = '{MERCHANT_ID}'
        """)
        
        total_seconds = 0
        for _, row in completed_tasks_df.iterrows():
            duration_raw = row['task_duration']
            
            if isinstance(duration_raw, str):
                # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏
                time_parts = duration_raw.split(':')
                if len(time_parts) >= 2:
                    hours = int(time_parts[0])
                    minutes = int(time_parts[1])
                    seconds = int(time_parts[2]) if len(time_parts) > 2 else 0
                    total_seconds += hours * 3600 + minutes * 60 + seconds
            elif hasattr(duration_raw, 'hour'):
                # –≠—Ç–æ –æ–±—ä–µ–∫—Ç time
                total_seconds += duration_raw.hour * 3600 + duration_raw.minute * 60 + duration_raw.second
            else:
                # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –≤—Ä–µ–º—è
                try:
                    from datetime import datetime
                    t = datetime.strptime(str(duration_raw), '%H:%M:%S')
                    total_seconds += t.hour * 3600 + t.minute * 60 + t.second
                except:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç 15 –º–∏–Ω—É—Ç
                    total_seconds += 900
        
        print(f"‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è –∏–∑ –ë–î –¥–ª—è staff_id={staff_id} (shift={shift}, date={task_date}): {total_seconds} —Å–µ–∫—É–Ω–¥")
        return total_seconds
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –ë–î: {e}")
        return 0

def parse_task_duration(duration_raw) -> int:
    """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –∑–∞–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥—ã"""
    try:
        if isinstance(duration_raw, str):
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏
            time_parts = duration_raw.split(':')
            if len(time_parts) >= 2:
                hours = int(time_parts[0])
                minutes = int(time_parts[1])
                seconds = int(time_parts[2]) if len(time_parts) > 2 else 0
                return hours * 3600 + minutes * 60 + seconds
        elif hasattr(duration_raw, 'hour'):
            # –≠—Ç–æ –æ–±—ä–µ–∫—Ç time
            return duration_raw.hour * 3600 + duration_raw.minute * 60 + duration_raw.second
        else:
            # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –≤—Ä–µ–º—è
            try:
                from datetime import datetime
                t = datetime.strptime(str(duration_raw), '%H:%M:%S')
                return t.hour * 3600 + t.minute * 60 + t.second
            except:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç 15 –º–∏–Ω—É—Ç
                return 900
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return 900  # –¥–µ—Ñ–æ–ª—Ç 15 –º–∏–Ω—É—Ç

def get_task_remaining_time(task_id, task_duration):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–π –∑–∞–º–æ—Ä–æ–∑–∫–∏.
    
    Args:
        task_id: ID –∑–∞–¥–∞–Ω–∏—è
        task_duration: –°—Ç—Ä–æ–∫–∞ —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∑–∞–¥–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "15 –º–∏–Ω")
        
    Returns:
        tuple: (allocated_seconds, elapsed_seconds) - –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è
    full_duration = parse_task_duration(task_duration)
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    allocated_seconds = full_duration
    elapsed_seconds = 0
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ
    if task_id in frozen_tasks_info:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (allocated_seconds), –∞ –Ω–µ remaining_seconds
        allocated_seconds = frozen_tasks_info[task_id].get('allocated_seconds', full_duration)
        elapsed_seconds = frozen_tasks_info[task_id].get('elapsed_seconds', 0)
        print(f"üîß [DEBUG] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ frozen_tasks_info –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}: allocated={allocated_seconds}s, elapsed={elapsed_seconds}s")
    
    return allocated_seconds, elapsed_seconds

def format_task_time_info(total_seconds, elapsed_seconds):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        total_seconds: –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        elapsed_seconds: –ü—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        tuple: (remaining_time_str, elapsed_info) - —Å—Ç—Ä–æ–∫–∞ —Å –æ—Å—Ç–∞–≤—à–∏–º—Å—è –≤—Ä–µ–º–µ–Ω–µ–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—à–µ–¥—à–µ–º –≤—Ä–µ–º–µ–Ω–∏
    """
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    remaining_time = str(timedelta(seconds=total_seconds)).split('.')[0]
    
    # –ï—Å–ª–∏ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ 0, –≥–æ—Ç–æ–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
    elapsed_info = ""
    if elapsed_seconds > 0:
        elapsed_time = str(timedelta(seconds=elapsed_seconds)).split('.')[0]
        elapsed_info = f"\n‚è± –£–∂–µ –∑–∞—Ç—Ä–∞—á–µ–Ω–æ: {elapsed_time}"
    
    return remaining_time, elapsed_info