import pandas as pd
from datetime import datetime
from ..database.sql_client import SQL
from ..config.settings import MERCHANT_ID

def get_free_opv_for_special_tasks():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –û–ü–í –¥–ª—è —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–π"""
    try:
        now = datetime.now()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–µ–Ω—É
        shift_ru = '–î–µ–Ω—å' if 8 <= now.hour < 20 else '–ù–æ—á—å'
        shift_en = 'day' if 8 <= now.hour < 20 else 'night'
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã—Ö –û–ü–í
        print(f"üîç –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –û–ü–í –¥–ª—è —Å–º–µ–Ω—ã: {shift_ru} ({shift_en})")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        all_sessions_df = SQL.sql_select('wms', f"""
            SELECT ss.employee_id, ss.role, ss.shift_type, ss.end_time, bs.gender, concat(bs."name", ' ', bs.surname) AS fio
            FROM wms_bot.shift_sessions1 ss
            LEFT JOIN wms_bot.t_staff bs ON bs.id = ss.employee_id::int
            WHERE ss.start_time::date = current_date
        """)
        print(f"üìä –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {len(all_sessions_df)}")
        if not all_sessions_df.empty:
            print(f"üë• –í—Å–µ —Å–µ—Å—Å–∏–∏: {all_sessions_df[['employee_id', 'role', 'shift_type', 'end_time']].to_string()}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        query_sql = f"""
            SELECT DISTINCT ss.employee_id, bs.gender, concat(bs."name", ' ', bs.surname) AS fio, ba.userid
            FROM wms_bot.shift_sessions1 ss
            JOIN wms_bot.t_staff bs ON bs.id = ss.employee_id::int
            JOIN wms_bot.bot_auth ba ON ba.employee_id = ss.employee_id
            WHERE ss.end_time IS NULL
              AND ss.start_time::date = current_date
              AND ss.role = 'opv'
              AND ss.shift_type = '{shift_en}'
              AND ss.merchantid = {MERCHANT_ID}
              AND NOT EXISTS (
                  SELECT 1
                  FROM wms_bot.shift_tasks st
                  WHERE st.user_id = ss.employee_id::int
                    AND st.status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
                    AND st.is_constant_task = false
                    AND st.priority = 111
                    AND st.time_end IS null
                    AND st.merchant_code = '{MERCHANT_ID}')
        """
        print(f"üîç SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –û–ü–í:")
        print(f"üìù {query_sql}")
        
        opv_df = SQL.sql_select('wms', query_sql)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –û–ü–í: {len(opv_df)}")
        if not opv_df.empty:
            print(f"üë• –°–≤–æ–±–æ–¥–Ω—ã–µ –û–ü–í: {', '.join(opv_df['fio'].tolist())}")
        
        return opv_df, shift_ru, shift_en
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –û–ü–í: {e}")
        return pd.DataFrame(), None, None

def get_busy_opv_for_special_tasks():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –û–ü–í (–≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏—è)"""
    try:
        now = datetime.now()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–µ–Ω—É
        shift_ru = '–î–µ–Ω—å' if 8 <= now.hour < 20 else '–ù–æ—á—å'
        shift_en = 'day' if 8 <= now.hour < 20 else 'night'
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç—ã—Ö –û–ü–í
        busy_df = SQL.sql_select('wms', f"""
            SELECT DISTINCT ss.employee_id, bs.gender, concat(bs."name", ' ', bs.surname) AS fio, 
                   st.task_name, st.time_begin, st.id as task_id
            FROM wms_bot.shift_sessions1 ss
            JOIN wms_bot.t_staff bs ON bs.id = ss.employee_id::int
            JOIN wms_bot.shift_tasks st ON st.user_id = ss.employee_id::int
            WHERE ss.end_time IS NULL
              AND ss.start_time::date = current_date
              AND ss.role = 'opv'
              AND ss.shift_type = '{shift_en}'
              AND ss.merchantid = {MERCHANT_ID}
              AND st.status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
              AND st.is_constant_task = false
              AND st.priority = 111
              AND st.time_end IS null
              AND st.merchant_code = '{MERCHANT_ID}'
        """)
        
        return busy_df, shift_ru, shift_en
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç—ã—Ö –û–ü–í: {e}")
        return pd.DataFrame(), None, None

async def force_assign_tasks_by_time(context, start_time_str):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        from datetime import datetime
        now = datetime.now()
        today = pd.to_datetime('today').date()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–µ–Ω—É
        shift_ru = '–î–µ–Ω—å' if 8 <= now.hour < 20 else '–ù–æ—á—å'
        shift_en = 'day' if 8 <= now.hour < 20 else 'night'
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        schedule_df = SQL.sql_select('wms', f"""
            SELECT * FROM wms_bot.shift_tasks
            WHERE task_date = '{today}'
              AND shift = '{shift_ru}'
              AND is_constant_task = false
              AND status = '–í –æ–∂–∏–¥–∞–Ω–∏–∏'
              AND merchant_code = '{MERCHANT_ID}'
              AND start_time::time = '{start_time_str}'
        """)
        
        if schedule_df.empty:
            return f"‚ùå –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –≤—Ä–µ–º—è {start_time_str}"
        
        
        results = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        for _, task_row in schedule_df.iterrows():
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–µ–π
            start_time_full = task_row['start_time'].strftime('%Y-%m-%d %H:%M:%S') if pd.notnull(task_row['start_time']) else None
            task_name_escaped = str(task_row['task_name']).replace("'", "''")
            
            duplicates_df = SQL.sql_select('wms', f"""
                SELECT COUNT(*) as task_count
                FROM wms_bot.shift_tasks
                WHERE task_date = '{today}'
                AND shift = '{shift_ru}'
                AND is_constant_task = false
                AND status = '–í –æ–∂–∏–¥–∞–Ω–∏–∏'
                AND start_time = '{start_time_full}'
                AND task_name = '{task_name_escaped}'
                AND merchant_code = '{MERCHANT_ID}'
            """)
            
            task_count = int(duplicates_df.iloc[0]['task_count'])
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã—Ö –û–ü–í
            opv_df = SQL.sql_select('wms', f"""
                SELECT DISTINCT ss.employee_id, bs.gender, concat(bs."name", ' ', bs.surname) AS fio, ba.userid
                FROM wms_bot.shift_sessions1 ss
                JOIN wms_bot.t_staff bs ON bs.id = ss.employee_id::int
                JOIN wms_bot.bot_auth ba ON ba.employee_id = ss.employee_id
                WHERE ss.end_time IS NULL
                  AND ss.start_time::date = current_date
                  AND ss.role = 'opv'
                  AND ss.shift_type = '{shift_en}'
                  AND ss.merchantid = {MERCHANT_ID}
                  AND NOT EXISTS (
                      SELECT 1
                      FROM wms_bot.shift_tasks st
                      WHERE st.user_id = ss.employee_id::int
                        AND st.status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
                        AND st.is_constant_task = false
                        AND st.priority = 111
                        AND st.time_end IS null
                        AND st.merchant_code = '{MERCHANT_ID}')
            """)
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª—É
            if task_row['gender'] in ['M', 'F']:
                opv_df = opv_df[opv_df['gender'].fillna('U').str.upper() == task_row['gender']]
            
            if opv_df.empty:
                results.append(f"‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –û–ü–í –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_row['task_name']}")
                continue
            
            # –ë–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –û–ü–í
            selected_opv = opv_df.head(task_count)
            assigned_count = 0
            
            for _, opv in selected_opv.iterrows():
                # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –û–ü–í
                SQL.sql_delete('wms', f"""
                    UPDATE wms_bot.shift_tasks
                    SET status = '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ'
                    WHERE user_id = '{opv['employee_id']}'
                    AND status IN ('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è')
                    AND time_end IS NULL
                """)
                
                # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
                task_to_assign_df = SQL.sql_select('wms', f"""
                    SELECT id FROM wms_bot.shift_tasks
                    WHERE task_date = '{today}'
                    AND shift = '{shift_ru}'
                    AND is_constant_task = false
                    AND status = '–í –æ–∂–∏–¥–∞–Ω–∏–∏'
                    AND start_time = '{start_time_full}'
                    AND task_name = '{task_name_escaped}'
                    AND merchant_code = '{MERCHANT_ID}'
                    ORDER BY id LIMIT 1
                """)
                
                if task_to_assign_df.empty:
                    break
                
                task_id = int(task_to_assign_df.iloc[0]['id'])
                now_str = now.strftime('%Y-%m-%d %H:%M:%S')
                
                SQL.sql_delete('wms', f"""
                    UPDATE wms_bot.shift_tasks
                    SET status = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
                        user_id = '{opv['employee_id']}',
                        time_begin = '{now_str}',
                        operator_name = '{opv['fio']}'
                    WHERE id = {task_id}
                """)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                from ..keyboards.opv_keyboards import get_special_task_keyboard
                
                try:
                    if task_row['task_duration'] is not None and pd.notnull(task_row['task_duration']):
                        if hasattr(task_row['task_duration'], 'strftime'):
                            duration = task_row['task_duration'].strftime('%H:%M')
                        else:
                            duration = str(task_row['task_duration'])
                    else:
                        duration = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è task_duration: {e}")
                    duration = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                
                chat_id = opv['userid']
                if isinstance(chat_id, pd.Series):
                    chat_id = chat_id.values[0]
                
                await context.bot.send_message(
                    chat_id=int(chat_id),
                    text=(
                        f"üìå *–ù–∞ –í–∞—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ!*\n\n"
                        f"üìù *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {task_row['task_name']}\n"
                        f"üì¶ *–ì—Ä—É–ø–ø–∞:* {task_row['product_group']}\n"
                        f"üìç *–°–ª–æ—Ç:* {task_row['slot']}\n"
                        f"‚è∞ *–í—Ä–µ–º—è:* {duration} –º–∏–Ω\n\n"
                        f"*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 111* - –∑–∞–¥–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ó–°"
                    ),
                    parse_mode='Markdown',
                    reply_markup=get_special_task_keyboard()
                )
                
                assigned_count += 1
                results.append(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ {task_row['task_name']} ({task_id}) –¥–ª—è {opv['fio']}")
            
            if assigned_count == 0:
                results.append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ {task_row['task_name']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        results.append(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ {start_time_str}: {len(schedule_df)}")
        results.append(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ: {assigned_count}")
        
        return "\n".join(results)
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏: {e}"
