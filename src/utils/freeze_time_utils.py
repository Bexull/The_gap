"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å freeze_time –≤ –ë–î
–ï–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
"""

import datetime as dt
from datetime import timedelta
from ..database.sql_client import SQL
from ..config.settings import MERCHANT_ID


def parse_freeze_time_from_db(freeze_time_raw) -> int:
    """
    –ü–∞—Ä—Å–∏—Ç freeze_time –∏–∑ –ë–î –≤ —Å–µ–∫—É–Ω–¥—ã
    
    Args:
        freeze_time_raw: –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ë–î (–º–æ–∂–µ—Ç –±—ã—Ç—å None, time, str, timedelta)
    
    Returns:
        int: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
    """
    if freeze_time_raw is None:
        return 0
    
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ time –æ–±—ä–µ–∫—Ç
        if isinstance(freeze_time_raw, dt.time):
            return freeze_time_raw.hour * 3600 + freeze_time_raw.minute * 60 + freeze_time_raw.second
        
        # –ï—Å–ª–∏ —ç—Ç–æ timedelta
        if isinstance(freeze_time_raw, timedelta):
            return int(freeze_time_raw.total_seconds())
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ - –ø–∞—Ä—Å–∏–º
        if isinstance(freeze_time_raw, str):
            freeze_time_raw = freeze_time_raw.strip()
            
            # –§–æ—Ä–º–∞—Ç HH:MM:SS
            if ':' in freeze_time_raw:
                parts = freeze_time_raw.split(':')
                if len(parts) == 3:
                    h, m, s = map(int, parts)
                    return h * 3600 + m * 60 + s
                elif len(parts) == 2:
                    m, s = map(int, parts)
                    return m * 60 + s
        
        return 0
    except Exception as e:
        print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ freeze_time: {freeze_time_raw}, –æ—à–∏–±–∫–∞: {e}")
        return 0


def read_freeze_time(task_id: int) -> int:
    """
    –ß–∏—Ç–∞–µ—Ç freeze_time –∏–∑ –ë–î –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
    
    Args:
        task_id: ID –∑–∞–¥–∞–Ω–∏—è
    
    Returns:
        int: –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (0 –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)
    """
    try:
        df = SQL.sql_select('wms', f"""
            SELECT freeze_time
            FROM wms_bot.shift_tasks
            WHERE id = {task_id}
            AND merchant_code = '{MERCHANT_ID}'
            LIMIT 1
        """)
        
        if df.empty:
            print(f"‚ÑπÔ∏è [INFO] –ó–∞–¥–∞–Ω–∏–µ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
            return 0
        
        freeze_time_raw = df.iloc[0]['freeze_time']
        elapsed_seconds = parse_freeze_time_from_db(freeze_time_raw)
        
        print(f"üìñ [READ] task={task_id} freeze_time_db={freeze_time_raw} ‚Üí {elapsed_seconds}s")
        return elapsed_seconds
        
    except Exception as e:
        print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è freeze_time –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}: {e}")
        return 0


def save_freeze_time(task_id: int, total_seconds: int):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ë–î
    
    Args:
        task_id: ID –∑–∞–¥–∞–Ω–∏—è
        total_seconds: –æ–±—â–µ–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ TIME —Ñ–æ—Ä–º–∞—Ç (HH:MM:SS)
        hours = int(total_seconds // 3600)
        minutes = int((total_seconds % 3600) // 60)
        seconds = int(total_seconds % 60)
        
        formatted_time = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
        
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_tasks
            SET freeze_time = '{formatted_time}'
            WHERE id = {task_id}
            AND merchant_code = '{MERCHANT_ID}'
        """)
        
        print(f"üíæ [SAVE] task={task_id} freeze_time={formatted_time} ({total_seconds}s)")
        
    except Exception as e:
        print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è freeze_time –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}: {e}")


def accumulate_freeze_time(task_id: int, current_session_seconds: float) -> int:
    """
    –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è: —á–∏—Ç–∞–µ—Ç —Å—Ç–∞—Ä–æ–µ –∏–∑ –ë–î, –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç
    
    Args:
        task_id: ID –∑–∞–¥–∞–Ω–∏—è
        current_session_seconds: –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    Returns:
        int: –æ–±—â–µ–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    try:
        # 1. –ß–∏—Ç–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ –ë–î
        previous_elapsed = read_freeze_time(task_id)
        
        # 2. –ü—Ä–∏–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        total_elapsed = previous_elapsed + int(current_session_seconds)
        
        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –ë–î
        save_freeze_time(task_id, total_elapsed)
        
        print(f"‚ûï [ACCUMULATE] task={task_id} previous={previous_elapsed}s + session={int(current_session_seconds)}s = total={total_elapsed}s")
        
        return total_elapsed
        
    except Exception as e:
        print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è freeze_time –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}: {e}")
        return 0


def clear_freeze_time(task_id: int):
    """
    –û—á–∏—â–∞–µ—Ç freeze_time –≤ –ë–î (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤ 00:00:00)
    
    Args:
        task_id: ID –∑–∞–¥–∞–Ω–∏—è
    """
    try:
        save_freeze_time(task_id, 0)
        print(f"üßπ [CLEAR] task={task_id} freeze_time –æ—á–∏—â–µ–Ω")
    except Exception as e:
        print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ freeze_time –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}: {e}")

