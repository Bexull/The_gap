"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å time_begin –∏ freeze_time –≤ –ë–î
–ë–î - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
"""

import datetime as dt
from datetime import datetime, timedelta
from ..database.sql_client import SQL
from ..config.settings import MERCHANT_ID


def parse_freeze_time_from_db(freeze_time_raw) -> int:
    """
    –ü–∞—Ä—Å–∏—Ç freeze_time –∏–∑ –ë–î –≤ —Å–µ–∫—É–Ω–¥—ã
    
    Args:
        freeze_time_raw: –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ë–î (–º–æ–∂–µ—Ç –±—ã—Ç—å None, time, str, timedelta)
    
    Returns:
        int: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
    """
    if freeze_time_raw is None:
        return 0
    
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ time –æ–±—ä–µ–∫—Ç
        if isinstance(freeze_time_raw, dt.time):
            return freeze_time_raw.hour * 3600 + freeze_time_raw.minute * 60 + freeze_time_raw.second
        
        # –ï—Å–ª–∏ —ç—Ç–æ timedelta
        if isinstance(freeze_time_raw, timedelta):
            return int(freeze_time_raw.total_seconds())
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ - –ø–∞—Ä—Å–∏–º
        if isinstance(freeze_time_raw, str):
            freeze_time_raw = freeze_time_raw.strip()
            
            # –§–æ—Ä–º–∞—Ç HH:MM:SS
            if ':' in freeze_time_raw:
                parts = freeze_time_raw.split(':')
                if len(parts) == 3:
                    h, m, s = map(int, parts)
                    return h * 3600 + m * 60 + s
                elif len(parts) == 2:
                    m, s = map(int, parts)
                    return m * 60 + s
        
        return 0
    except Exception as e:
        print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ freeze_time: {freeze_time_raw}, –æ—à–∏–±–∫–∞: {e}")
        return 0


def parse_time_begin_from_db(time_begin_raw):
    """
    –ü–∞—Ä—Å–∏—Ç time_begin –∏–∑ –ë–î –≤ datetime
    
    Args:
        time_begin_raw: –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ë–î (–º–æ–∂–µ—Ç –±—ã—Ç—å None, datetime, str, time)
    
    Returns:
        datetime –∏–ª–∏ None
    """
    if time_begin_raw is None:
        return None
    
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ datetime –æ–±—ä–µ–∫—Ç
        if isinstance(time_begin_raw, datetime):
            return time_begin_raw
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ - –ø–∞—Ä—Å–∏–º
        if isinstance(time_begin_raw, str):
            time_begin_raw = time_begin_raw.strip()
            
            # –§–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM:SS
            if ' ' in time_begin_raw:
                return datetime.strptime(time_begin_raw, '%Y-%m-%d %H:%M:%S')
            # –§–æ—Ä–º–∞—Ç HH:MM:SS (–¥–æ–±–∞–≤–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É)
            elif ':' in time_begin_raw:
                time_part = datetime.strptime(time_begin_raw, '%H:%M:%S').time()
                return datetime.combine(datetime.today(), time_part)
        
        # –ï—Å–ª–∏ —ç—Ç–æ time –æ–±—ä–µ–∫—Ç
        if isinstance(time_begin_raw, dt.time):
            return datetime.combine(datetime.today(), time_begin_raw)
        
        return None
    except Exception as e:
        print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ time_begin: {time_begin_raw}, –æ—à–∏–±–∫–∞: {e}")
        return None


def seconds_to_time_str(seconds: int) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ HH:MM:SS"""
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    secs = int(seconds % 60)
    return f"{hours:02d}:{minutes:02d}:{secs:02d}"


def get_task_timing_info(task_id: int) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –ë–î
    
    Args:
        task_id: ID –∑–∞–¥–∞–Ω–∏—è
    
    Returns:
        dict: {
            'time_begin': datetime –∏–ª–∏ None,
            'freeze_time': int (—Å–µ–∫—É–Ω–¥—ã),
            'task_duration': int (—Å–µ–∫—É–Ω–¥—ã),
            'status': str
        }
    """
    try:
        df = SQL.sql_select('wms', f"""
            SELECT time_begin, freeze_time, task_duration, status
            FROM wms_bot.shift_tasks
            WHERE id = {task_id}
            AND merchant_code = '{MERCHANT_ID}'
            LIMIT 1
        """)
        
        if df.empty:
            print(f"‚ö†Ô∏è [WARNING] –ó–∞–¥–∞–Ω–∏–µ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
            return {
                'time_begin': None,
                'freeze_time': 0,
                'task_duration': 0,
                'status': None
            }
        
        row = df.iloc[0]
        
        # –ü–∞—Ä—Å–∏–º time_begin
        time_begin = parse_time_begin_from_db(row.get('time_begin'))
        
        # –ü–∞—Ä—Å–∏–º freeze_time
        freeze_time_seconds = parse_freeze_time_from_db(row.get('freeze_time'))
        
        # –ü–∞—Ä—Å–∏–º task_duration
        task_duration_raw = row.get('task_duration')
        if isinstance(task_duration_raw, dt.time):
            task_duration_seconds = task_duration_raw.hour * 3600 + task_duration_raw.minute * 60 + task_duration_raw.second
        elif isinstance(task_duration_raw, timedelta):
            task_duration_seconds = int(task_duration_raw.total_seconds())
        elif isinstance(task_duration_raw, (int, float)):
            task_duration_seconds = int(task_duration_raw)
        else:
            task_duration_seconds = 0
        
        return {
            'time_begin': time_begin,
            'freeze_time': freeze_time_seconds,
            'task_duration': task_duration_seconds,
            'status': row.get('status')
        }
        
    except Exception as e:
        print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è timing info –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}: {e}")
        return {
            'time_begin': None,
            'freeze_time': 0,
            'task_duration': 0,
            'status': None
        }


def calculate_remaining_time(task_id: int) -> int:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    
    –§–æ—Ä–º—É–ª–∞: remaining = task_duration - freeze_time - (now - time_begin)
    
    Args:
        task_id: ID –∑–∞–¥–∞–Ω–∏—è
    
    Returns:
        int: –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –µ—Å–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ)
    """
    info = get_task_timing_info(task_id)
    
    task_duration = info['task_duration']
    freeze_time = info['freeze_time']
    time_begin = info['time_begin']
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    if time_begin is not None:
        current_session_seconds = int((datetime.now() - time_begin).total_seconds())
    else:
        current_session_seconds = 0
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    remaining = task_duration - freeze_time - current_session_seconds
    
    return remaining


def update_freeze_time_on_pause(task_id: int):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç freeze_time –ø—Ä–∏ –ø–∞—É–∑–µ –∑–∞–¥–∞–Ω–∏—è (–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –∑–∞–º–æ—Ä–æ–∑–∫–∞)
    
    –í—ã—á–∏—Å–ª—è–µ—Ç delta = now() - time_begin –∏ –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç –∫ freeze_time
    –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç time_begin = NULL
    
    Args:
        task_id: ID –∑–∞–¥–∞–Ω–∏—è
    """
    try:
        info = get_task_timing_info(task_id)
        
        if info['time_begin'] is None:
            print(f"‚ö†Ô∏è [WARNING] task={task_id} time_begin —É–∂–µ NULL, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ freeze_time")
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        delta_seconds = int((datetime.now() - info['time_begin']).total_seconds())
        
        # –ù–æ–≤–æ–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        new_freeze_time_seconds = info['freeze_time'] + delta_seconds
        new_freeze_time_str = seconds_to_time_str(new_freeze_time_seconds)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_tasks
            SET freeze_time = '{new_freeze_time_str}',
                time_begin = NULL
            WHERE id = {task_id}
            AND merchant_code = '{MERCHANT_ID}'
        """)
        
        print(f"üíæ [PAUSE] task={task_id} freeze_time: {info['freeze_time']}s + {delta_seconds}s = {new_freeze_time_seconds}s ({new_freeze_time_str}), time_begin=NULL")
        
    except Exception as e:
        print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è freeze_time –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}: {e}")


def reset_time_begin(task_id: int):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç time_begin = NOW() –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    (–≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É, —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∞, –≤–∑—è—Ç–∏–µ –∑–∞–¥–∞–Ω–∏—è)
    
    Args:
        task_id: ID –∑–∞–¥–∞–Ω–∏—è
    """
    try:
        now_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_tasks
            SET time_begin = '{now_str}'
            WHERE id = {task_id}
            AND merchant_code = '{MERCHANT_ID}'
        """)
        
        print(f"‚ñ∂Ô∏è [START] task={task_id} time_begin={now_str}")
        
    except Exception as e:
        print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ time_begin –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}: {e}")


def clear_time_begin(task_id: int):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç time_begin = NULL –ø—Ä–∏ –ø–∞—É–∑–µ –∑–∞–¥–∞–Ω–∏—è
    (–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ—Å–ª–∏ freeze_time —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ)
    
    Args:
        task_id: ID –∑–∞–¥–∞–Ω–∏—è
    """
    try:
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_tasks
            SET time_begin = NULL
            WHERE id = {task_id}
            AND merchant_code = '{MERCHANT_ID}'
        """)
        
        print(f"‚è∏Ô∏è [PAUSE] task={task_id} time_begin=NULL")
        
    except Exception as e:
        print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ time_begin –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}: {e}")


def reset_freeze_time(task_id: int):
    """
    –û–±–Ω—É–ª—è–µ—Ç freeze_time (–ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è)
    
    Args:
        task_id: ID –∑–∞–¥–∞–Ω–∏—è
    """
    try:
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_tasks
            SET freeze_time = '00:00:00'
            WHERE id = {task_id}
            AND merchant_code = '{MERCHANT_ID}'
        """)
        
        print(f"üîÑ [RESET] task={task_id} freeze_time=00:00:00")
        
    except Exception as e:
        print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ freeze_time –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}: {e}")


# ============================================================================
# –£–°–¢–ê–†–ï–í–®–ò–ï –§–£–ù–ö–¶–ò–ò (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –ø–æ–∑–∂–µ)
# ============================================================================

def read_freeze_time(task_id: int) -> int:
    """
    –£–°–¢–ê–†–ï–õ–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ get_task_timing_info() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ
    
    –ß–∏—Ç–∞–µ—Ç freeze_time –∏–∑ –ë–î –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
    """
    info = get_task_timing_info(task_id)
    freeze_time = info['freeze_time']
    print(f"üìñ [READ] task={task_id} freeze_time={freeze_time}s")
    return freeze_time


def save_freeze_time(task_id: int, total_seconds: int):
    """
    –£–°–¢–ê–†–ï–õ–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ update_freeze_time_on_pause() –∏–ª–∏ reset_freeze_time()
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ë–î
    """
    try:
        formatted_time = seconds_to_time_str(total_seconds)
        
        SQL.sql_delete('wms', f"""
            UPDATE wms_bot.shift_tasks
            SET freeze_time = '{formatted_time}'
            WHERE id = {task_id}
            AND merchant_code = '{MERCHANT_ID}'
        """)
        
        print(f"üíæ [SAVE] task={task_id} freeze_time={formatted_time} ({total_seconds}s)")
        
    except Exception as e:
        print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è freeze_time –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}: {e}")


def accumulate_freeze_time(task_id: int, current_session_seconds: float) -> int:
    """
    –£–°–¢–ê–†–ï–õ–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ update_freeze_time_on_pause()
    
    –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è: —á–∏—Ç–∞–µ—Ç —Å—Ç–∞—Ä–æ–µ –∏–∑ –ë–î, –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç
    """
    try:
        # 1. –ß–∏—Ç–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ –ë–î
        previous_elapsed = read_freeze_time(task_id)
        
        # 2. –ü—Ä–∏–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        total_elapsed = previous_elapsed + int(current_session_seconds)
        
        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –ë–î
        save_freeze_time(task_id, total_elapsed)
        
        print(f"‚ûï [ACCUMULATE] task={task_id} previous={previous_elapsed}s + session={int(current_session_seconds)}s = total={total_elapsed}s")
        
        return total_elapsed
        
    except Exception as e:
        print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è freeze_time –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}: {e}")
        return 0


def clear_freeze_time(task_id: int):
    """
    –£–°–¢–ê–†–ï–õ–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ reset_freeze_time()
    
    –û—á–∏—â–∞–µ—Ç freeze_time –≤ –ë–î (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤ 00:00:00)
    """
    reset_freeze_time(task_id)
