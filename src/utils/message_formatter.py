"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∑–∞–¥–∞–Ω–∏—è—Ö
"""
from .time_utils import seconds_to_hms, hms_to_seconds
from .freeze_time_utils import calculate_remaining_time


def format_task_message(task, status: str = "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", show_timer: bool = True) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–¥–∞–Ω–∏–∏ —Å –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º —Å—Ç–∏–ª–µ–º
    
    Args:
        task: –û–±—ä–µ–∫—Ç –∑–∞–¥–∞–Ω–∏—è (dict –∏–ª–∏ pandas Series) —Å –ø–æ–ª—è–º–∏:
              - id/task_id: ID –∑–∞–¥–∞–Ω–∏—è
              - task_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
              - product_group: –ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤
              - slot: –°–ª–æ—Ç
              - provider: –ü–æ—Å—Ç–∞–≤—â–∏–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
              - task_duration: –ü–ª–∞–Ω–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS
              - comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
              - priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, 111 –¥–ª—è —Å–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–π)
        status: –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
        show_timer: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –∏ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
    
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–¥–∞—á–∏
    task_id = task.get('id') or task.get('task_id')
    task_name = task.get('task_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    product_group = task.get('product_group', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    slot = task.get('slot', '–ù–µ —É–∫–∞–∑–∞–Ω')
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–∑–∞–º–µ–Ω—è–µ–º None/"None" –Ω–∞ "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    provider = task.get('provider')
    if provider is None or str(provider).strip() in ['None', 'none', '']:
        provider = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
    
    comment = task.get('comment')
    priority = task.get('priority')
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    text = f"üìÑ –ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è: {task_id}\n"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    is_special = str(priority) == '111'
    
    # –°—Ç–∞—Ç—É—Å
    if is_special:
        text += "üî• –°–ø–µ—Ü-–∑–∞–¥–∞–Ω–∏–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 111)\n\n"
    elif status == "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è":
        text += "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è\n\n"
    elif status == "–ü–æ–ª—É—á–µ–Ω–æ":
        text += "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
    elif status == "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ":
        text += "üîÑ –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ\n\n"
    elif status == "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ":
        text += "‚ùÑÔ∏è –ó–∞–¥–∞–Ω–∏–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ\n\n"
    else:
        text += f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: {status}\n\n"
    
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –Ω–∞—á–∞–ª–µ)
    if comment and str(comment).strip():
        text += f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    text += f"üìù –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {task_name}\n"
    text += f"üì¶ –ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤: {product_group}\n"
    text += f"üìç –°–ª–æ—Ç: {slot}\n"
    text += f"üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {provider}\n"
    
    # –í—Ä–µ–º—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å)
    if show_timer:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤—ã—á–∏—Å–ª–∏—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è (–æ–Ω–æ —á–∏—Ç–∞–µ—Ç –∏–∑ –ë–î task_duration)
        try:
            remaining_seconds = calculate_remaining_time(task_id)
            remaining_str = seconds_to_hms(remaining_seconds)
            
            # –ü–æ–ª—É—á–∞–µ–º task_duration –∏–∑ –ë–î —á–µ—Ä–µ–∑ get_task_timing_info
            # –í–ê–ñ–ù–û: get_task_timing_info –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç task_duration –£–ñ–ï –í –°–ï–ö–£–ù–î–ê–•!
            from .freeze_time_utils import get_task_timing_info
            timing_info = get_task_timing_info(task_id)
            
            if timing_info and timing_info.get('task_duration'):
                allocated_seconds = timing_info['task_duration']  # –£–∂–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö!
                allocated_str = seconds_to_hms(allocated_seconds)
                text += f"‚è±Ô∏è –í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {allocated_str}\n"
                text += f"‚è≥ –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: {remaining_str}"
        except Exception as e:
            # Fallback - –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –∏–∑ –æ–±—ä–µ–∫—Ç–∞ task
            task_duration = task.get('task_duration')
            if task_duration is not None:
                allocated_seconds = hms_to_seconds(task_duration)
                if allocated_seconds > 0:
                    allocated_str = seconds_to_hms(allocated_seconds)
                    text += f"‚è±Ô∏è –í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {allocated_str}\n"
                    text += f"‚è≥ –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: {allocated_str}"
    
    return text

